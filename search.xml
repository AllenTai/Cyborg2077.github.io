<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>黑客帝国代码雨</title>
      <link href="/2021/12/07/Rain/"/>
      <url>/2021/12/07/Rain/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码雨"><a href="#代码雨" class="headerlink" title="代码雨"></a>代码雨</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.MemoryImageSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JDialog;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.Timer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rain</span> <span class="keyword">extends</span> <span class="title">JDialog</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> Dimension screenSize;</span><br><span class="line">    <span class="keyword">private</span> JPanel graphicsPanel;</span><br><span class="line">    <span class="comment">//行高,列宽</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> gap = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//存放雨点顶部的位置信息(marginTop)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] posArr;</span><br><span class="line">    <span class="comment">//行数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lines;</span><br><span class="line">    <span class="comment">//列数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> columns;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initComponents();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initComponents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        graphicsPanel = <span class="keyword">new</span> GraphicsPanel();</span><br><span class="line">        add(graphicsPanel, BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">//设置光标不可见</span></span><br><span class="line">        Toolkit defaultToolkit = Toolkit.getDefaultToolkit();</span><br><span class="line">        Image image = defaultToolkit.createImage(<span class="keyword">new</span> MemoryImageSource(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        Cursor invisibleCursor = defaultToolkit.createCustomCursor(image, <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>), <span class="string">&quot;cursor&quot;</span>);</span><br><span class="line">        setCursor(invisibleCursor);</span><br><span class="line">        <span class="comment">//ESC键退出</span></span><br><span class="line">        KeyPressListener keyPressListener = <span class="keyword">new</span> KeyPressListener();</span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(keyPressListener);</span><br><span class="line">        <span class="comment">//this.setAlwaysOnTop(true);</span></span><br><span class="line">        <span class="comment">//去标题栏</span></span><br><span class="line">        <span class="keyword">this</span>.setUndecorated(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//全屏</span></span><br><span class="line">        <span class="keyword">this</span>.getGraphicsConfiguration().getDevice().setFullScreenWindow(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">        screenSize = Toolkit.getDefaultToolkit().getScreenSize();</span><br><span class="line">        lines = screenSize.height / gap;</span><br><span class="line">        columns = screenSize.width / gap;</span><br><span class="line"> </span><br><span class="line">        posArr = <span class="keyword">new</span> <span class="keyword">int</span>[columns + <span class="number">1</span>];</span><br><span class="line">        random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; posArr.length; i++) &#123;</span><br><span class="line">            posArr[i] = random.nextInt(lines);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//每秒10帧</span></span><br><span class="line">        <span class="keyword">new</span> Timer(<span class="number">100</span>, <span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 随机字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">getChr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>) (random.nextInt(<span class="number">94</span>) + <span class="number">33</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        graphicsPanel.repaint();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicsPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">            Graphics2D g2d = (Graphics2D) g;</span><br><span class="line">            g2d.setFont(getFont().deriveFont(Font.BOLD));</span><br><span class="line">            g2d.setColor(Color.BLACK);</span><br><span class="line">            g2d.fillRect(<span class="number">0</span>, <span class="number">0</span>, screenSize.width, screenSize.height);</span><br><span class="line">            <span class="comment">//当前列</span></span><br><span class="line">            <span class="keyword">int</span> currentColumn = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; screenSize.width; x += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> endPos = posArr[currentColumn];</span><br><span class="line">                g2d.setColor(Color.CYAN);</span><br><span class="line">                g2d.drawString(String.valueOf(getChr()), x, endPos * gap);</span><br><span class="line">                <span class="keyword">int</span> cg = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = endPos - <span class="number">15</span>; j &lt; endPos; j++) &#123;</span><br><span class="line">                    <span class="comment">//颜色渐变</span></span><br><span class="line">                    cg += <span class="number">20</span>;</span><br><span class="line">                    <span class="keyword">if</span> (cg &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                        cg = <span class="number">255</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    g2d.setColor(<span class="keyword">new</span> Color(<span class="number">0</span>, cg, <span class="number">0</span>));</span><br><span class="line">                    g2d.drawString(String.valueOf(getChr()), x, j * gap);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//每放完一帧，当前列上雨点的位置随机下移1~5行</span></span><br><span class="line">                posArr[currentColumn] += random.nextInt(<span class="number">5</span>);</span><br><span class="line">                <span class="comment">//当雨点位置超过屏幕高度时，重新产生一个随机位置</span></span><br><span class="line">                <span class="keyword">if</span> (posArr[currentColumn] * gap &gt; getHeight()) &#123;</span><br><span class="line">                    posArr[currentColumn] = random.nextInt(lines);</span><br><span class="line">                &#125;</span><br><span class="line">                currentColumn++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyPressListener</span> <span class="keyword">extends</span> <span class="title">KeyAdapter</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_ESCAPE) &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Rain();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 花里胡哨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末不挂科速成课</title>
      <link href="/2021/11/16/FinalExam/"/>
      <url>/2021/11/16/FinalExam/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="速成课"><a href="#速成课" class="headerlink" title="速成课"></a>速成课</h2><p>资料来源<a class="btn-beautify button--animated blue large" href="https://www.techfens.com/"   title="TechFen's Blog"><i class="far fa-hand-point-right"></i><span>TechFen's Blog</span></a></p><p>这里收录了常见的一些期末考试的科目，更多速成课详情<a class="btn-beautify button--animated pink large" href="https://pan.techfens.com/"   title="戳这里"><i class="far fa-hand-point-right"></i><span>戳这里</span></a><br><img src="/img/%E9%80%9F%E6%88%90%E8%AF%BE.png" alt="速成课"></p><a class="btn-beautify button--animated pink large" href="https://pan.techfens.com/A%20-%20%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80"   title="数学类"><i class="far fa-hand-point-right"></i><span>数学类</span></a><p><img src="/img/%E6%95%B0%E5%AD%A6%E7%B1%BB.png" alt="数学类"></p><a class="btn-beautify button--animated red large" href="https://pan.techfens.com/D%20-%20%E6%9C%BA%E6%A2%B0%E3%80%81%E5%8A%9B%E5%AD%A6%E7%B1%BB"   title="机械力学类"><i class="far fa-hand-point-right"></i><span>机械力学类</span></a><p><img src="/img/%E6%9C%BA%E6%A2%B0%E5%8A%9B%E5%AD%A6%E7%B1%BB.png" alt="机械力学类"></p><a class="btn-beautify button--animated purple large" href="https://pan.techfens.com/C%20-%20%E7%BB%8F%E6%B5%8E%E3%80%81%E7%AE%A1%E7%90%86%E7%B1%BB"   title="经管类"><i class="far fa-hand-point-right"></i><span>经管类</span></a><p><img src="/img/%E7%BB%8F%E7%AE%A1%E7%B1%BB.png" alt="经管类"></p><a class="btn-beautify button--animated orange large" href="https://pan.techfens.com/E%20-%20%E9%80%9A%E4%BF%A1%E3%80%81%E7%94%B5%E6%B0%94%E7%B1%BB"   title="通信电气类"><i class="far fa-hand-point-right"></i><span>通信电气类</span></a><p><img src="/img/%E9%80%9A%E4%BF%A1%E7%94%B5%E6%B0%94%E7%B1%BB.png" alt="通信电气类"></p><a class="btn-beautify button--animated green large" href="https://pan.techfens.com/F%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB"   title="计算机类"><i class="far fa-hand-point-right"></i><span>计算机类</span></a><p><img src="/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB.png" alt="计算机类"></p><a class="btn-beautify button--animated large" href="https://pan.techfens.com/G%20-%20%E5%8C%96%E5%B7%A5%E3%80%81%E5%8C%96%E5%AD%A6%E7%B1%BB"   title="化学类"><i class="far fa-hand-point-right"></i><span>化学类</span></a><p><img src="/img/%E5%8C%96%E5%AD%A6%E7%B1%BB.png" alt="化学类"></p>]]></content>
      
      
      <categories>
          
          <category> 期末不挂科 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实训作业:十大排序算法(持续更新中)</title>
      <link href="/2021/11/10/SortMenu/"/>
      <url>/2021/11/10/SortMenu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>排序算法是《数据结构与算法》中最基本的算法之一。</p><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，</p><p>而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p><p>常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p><p>用一张图概括：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/sort.png" alt="排序算法稳定性图片"></p><h2 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h2><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</p><p>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；</p><p>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 </p><p>希尔排序 线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</p><h2 id="关于稳定性"><a href="#关于稳定性" class="headerlink" title="关于稳定性"></a>关于稳定性</h2><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><p>名词解释：</p><ul><li>n：数据规模</li><li>k：”桶”的个数</li><li>In-place：占用常数内存，不占用额外内存</li><li>Out-place：占用额外内存</li><li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li></ul><hr><hr><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，</p><p>因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，</p><p>它的工作原理是通过构建有序序列，对于未排序数据，</p><p>在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入(折半插入)。</p><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。</p><p>（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。</p><p>由于没有改变两个元素的相对顺序，所以插入排序是稳定的）</p><p><del>跟斗地主一样,左起第一张牌当成有序序列，第二张牌到最后一张当成是无序序列。</del></p><p><del>从头到尾依次扫描未排序的牌，将扫描到的每一张牌插入到有序序列的适当位置。</del></p><h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="插入排序"></p><h3 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//第一张牌有序，所以从第二张牌开始往前比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//把这张牌拿在手里</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="comment">//j=i-1是手牌的前一张，只要还没到最左边的牌，就一直比较下去</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="comment">//如果前面的牌比手牌大，那就把前面的牌往后移</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//j = j + 1;</span></span><br><span class="line"><span class="comment">//arr[j] = temp;</span></span><br><span class="line">arr[++j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序过程及效率"><a href="#排序过程及效率" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png" alt="直接插入排序"></p><hr><hr><h2 id="直接插入排序的优化——折半插入排序"><a href="#直接插入排序的优化——折半插入排序" class="headerlink" title="直接插入排序的优化——折半插入排序"></a>直接插入排序的优化——折半插入排序</h2><p>查找采用折半查找方法，称为二分插入排序或折半插入排序。</p><p>二分插入排序算法的原理和插入排序算法原理一样，都是把要插入的数作为手牌，</p><p>只不过优化了查找要插入位置的算法进行二分，与中间(m=(low+hgih)/2)的数值作比较，</p><p>小则high=m-1，反之low=m+1,一直到low&gt;high,high+1为要插入的位置。</p><p><del>学会这种方法，斗地主插牌就比别人快啦</del></p><h3 id="Java代码实现-1"><a href="#Java代码实现-1" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] binInsertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt;= temp)</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">high++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= high + <span class="number">1</span>; j--) &#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[high] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-1"><a href="#排序过程及效率-1" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png" alt="折半插入排序"></p><hr><hr><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，</p><p>待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。</p><h3 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>将n个元素分成d个组：</p><p>{R[0]  ,R[d],  R[2d], ···  ,R[kd]  }</p><p>{R[1]  ,R[1+d],  R[1+2d], ···  ,R[1+kd] }</p><p>···</p><p>{R[d-1]  ,R[2d-1],  R[3d-1], ···  ,R[(k+1)d-1]}</p><p>相距d个位置的元素分为一组，然后在组内完成排序</p><p>① d=arr.length/2</p><p>② 将排序序列分为d个组，在组内进行直接插入排序</p><p>③ 递减d=d/2，重复②，直到d=0</p><p>由于算法最后一趟对所有元素进行了直接插入排序，所以结果是一定正确的</p><p>由于不同组别可能存在两个或若干个相同的元素，在各自组内直接插入排序之后，</p><p>可能会导致相等元素在排序之后的相对位置发生改变，所以希尔排序是不稳定的。</p><h3 id="动图演示-1"><a href="#动图演示-1" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Sorting_shellsort_anim.gif" alt="希尔排序"></p><h3 id="Java代码实现-2"><a href="#Java代码实现-2" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = arr.length;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = length / <span class="number">2</span>; step &gt;= <span class="number">1</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; length; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i - step;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">                arr[j + step] = arr[j];</span><br><span class="line">                j -= step;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + step] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-2"><a href="#排序过程及效率-2" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.png" alt="希尔排序"></p><hr><hr><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，</p><p>一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p><p>走访数列的工作是重复地进行直到没有再需要交换，</p><p>也就是说该数列已经排序完成。</p><p>这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p><h3 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。</p><p>这步做完后，最后的元素会是最大的数。</p><p>针对所有的元素重复以上的步骤，除了最后一个。</p><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h3 id="动图演示-2"><a href="#动图演示-2" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif" alt="冒泡动图"></p><h3 id="Java代码演示"><a href="#Java代码演示" class="headerlink" title="Java代码演示"></a>Java代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                设定一个标记，若为true，则表示此次循环没有进行交换，</span></span><br><span class="line"><span class="comment">                也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line"><span class="comment">                例如已经顺序排好的数列。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">CreatStuScore.swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-3"><a href="#排序过程及效率-3" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png" alt="冒泡排序"></p><hr><hr><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。</p><p>所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h3 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕。</p><h3 id="动图演示-3"><a href="#动图演示-3" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="选择排序"></p><h3 id="Java代码演示-1"><a href="#Java代码演示-1" class="headerlink" title="Java代码演示"></a>Java代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line"><span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp=arr[min];</span><br><span class="line">arr[min]=arr[i];</span><br><span class="line">arr[i]=arr[min];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-4"><a href="#排序过程及效率-4" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png" alt="选择排序"></p><hr><hr><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。</p><p>该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><h3 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h3><ul><li><p>将序列中待排数字分为若干组，每个数字分为一组</p></li><li><p>将若干组两两合并，保证合并后的组是有序的</p></li><li><p>重复第二步操作直至剩下一组，排序完成</p></li></ul><p><img src="/img/%E5%BD%92%E5%B9%B6%E6%AD%A5%E9%AA%A41.png" alt="算法步骤图1"></p><p><img src="/img/%E5%BD%92%E5%B9%B6%E6%AD%A5%E9%AA%A42.png" alt="算法步骤图2"></p><h3 id="动图演示-4"><a href="#动图演示-4" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif" alt="归并排序"></p><h3 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line"><span class="keyword">int</span>[] temp = Arrays.copyOf(arr, arr.length);</span><br><span class="line"><span class="keyword">if</span> (temp.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (<span class="keyword">int</span>) Math.floor(temp.length / <span class="number">2</span>);</span><br><span class="line"><span class="comment">//分而治之的分</span></span><br><span class="line"><span class="keyword">int</span>[] left = Arrays.copyOfRange(temp, <span class="number">0</span>, mid);</span><br><span class="line"><span class="keyword">int</span>[] right = Arrays.copyOfRange(temp, mid, temp.length);</span><br><span class="line"><span class="comment">//递归调用，将左右子序列继续分为两组，直至每组只有一个元素</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="keyword">return</span> mergeZ(mergeSortZ(left), mergeSortZ(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeZ(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//比较两个子序列中的第一个元素，将较小元素加入到结果序列中</span></span><br><span class="line"><span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//此步操作相当于剔除left序列中的第一个元素，从而诞生新的第一个元素</span></span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一方序列的元素全部加入到结果序列中后，将剩余子序列的元素全部加入到结果序列中</span></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-5"><a href="#排序过程及效率-5" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png" alt="归并排序"></p><hr><hr><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。</p><p>在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，</p><p>快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）</p><p>可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，</p><p>就是快，而且效率高！它是处理大数据最快的排序算法之一了。</p><h3 id="算法步骤-5"><a href="#算法步骤-5" class="headerlink" title="算法步骤"></a>算法步骤</h3><ul><li>选定Pivot中心轴</li><li>将大于Pivot的数字放在Pivot的右边</li><li>将小于Pivot的数字放在Pivot的左边</li><li>分别对左右子序列重复前三步操作</li></ul><h3 id="动图演示-5"><a href="#动图演示-5" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="快速排序"></p><h3 id="Java代码实现-3"><a href="#Java代码实现-3" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSortZ(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R) &#123;</span><br><span class="line"><span class="keyword">if</span> (L &gt;= R)</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"><span class="keyword">int</span> left = L, right = R;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本思想</span></span><br><span class="line"><span class="comment">1.选定Pivot中心轴</span></span><br><span class="line"><span class="comment">2.将大于Pivot的数字放在Pivot的右边</span></span><br><span class="line"><span class="comment">3.将小于Pivot的数字放在Pivot的左边</span></span><br><span class="line"><span class="comment">4.分别对左右子序列重复前三部操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> pivot = arr[left];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">//右下标对应的元素若大于pivot，则不进行操作，右下标自减</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= pivot) &#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表右下标遇到了比pivot小的元素，将该元素放到左边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[left] = arr[right];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴</span></span><br><span class="line"><span class="comment">//左下标对应的元素若小于pivot，则不进行操作，左下标自增</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= pivot) &#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表左下标遇到了比pivot大的元素，将该元素放到右边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[right] = arr[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴 将pivot放在左右下标交汇点</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">arr[left] = pivot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">//递归调用，分别对左右子序列重复进行上述操作</span></span><br><span class="line">quickSortZ(arr, L, right - <span class="number">1</span>);</span><br><span class="line">quickSortZ(arr, right + <span class="number">1</span>, R);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-6"><a href="#排序过程及效率-6" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png" alt="快速排序"></p><hr><hr><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</p><p>堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><p>堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</p><p>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</p><p>堆排序的平均时间复杂度为 Ο(nlogn)。</p><p>本文采用的大顶堆。</p><h3 id="算法步骤-6"><a href="#算法步骤-6" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol><li><p>创建一个堆 H[0 ~ arr.length-1]；</p></li><li><p>把堆首（最大值）和堆尾互换；</p></li><li><p>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</p></li><li><p>重复步骤 2，直到堆的尺寸为 1。</p></li></ol><h3 id="动图演示-6"><a href="#动图演示-6" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif" alt="堆排序动画"></p><h3 id="Java代码实现-4"><a href="#Java代码实现-4" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSortZ(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对传进来的数组拷贝</span></span><br><span class="line"><span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"><span class="comment">//获取传进来的数组的长度</span></span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="comment">//以该数组来建一个堆</span></span><br><span class="line">buildMaxHeapZ(arr, len);</span><br><span class="line"><span class="comment">//将堆尾元素和堆首元素交换，交换到堆尾的元素已经排好序了，所以数组长度/堆长度减一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">swap(arr, <span class="number">0</span>, i);</span><br><span class="line">len--;</span><br><span class="line">heapifyZ(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立大顶堆  因为下标是从0开始 所以其实这里的len/2是最后一个非叶节点或非叶节点的下一个 但是不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeapZ</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapifyZ(arr, i, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 完成将以i对应的非叶节点的数，调整成大顶堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待调整数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i   第一个非叶节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 调整长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapifyZ</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//根节点下标从0开始 双亲节点下标是i 子节点下标是2i+1和2i+2</span></span><br><span class="line"><span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> largest = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子的值比爹大  那就左孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">largest = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有孩子的值比爹大  那就有孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">largest = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大值发生了变化，则可能会产生新的最大值，进行递归调用</span></span><br><span class="line"><span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line"><span class="comment">//将最大值对应的下标作为双亲结点</span></span><br><span class="line">swap(arr, i, largest);</span><br><span class="line"><span class="comment">//递归调用</span></span><br><span class="line">heapifyZ(arr, largest, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-7"><a href="#排序过程及效率-7" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%A0%86%E6%8E%92%E5%BA%8F.png" alt="堆排序过程及效率"></p><hr><hr><h2 id="Java完整代码–CreatStuScore类"><a href="#Java完整代码–CreatStuScore类" class="headerlink" title="Java完整代码–CreatStuScore类"></a>Java完整代码–CreatStuScore类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatStuScore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] args;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] scores(<span class="keyword">int</span> count) &#123;</span><br><span class="line">args=<span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; args.length) &#123;</span><br><span class="line">args[i++] = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java完整代码–FinalTest类"><a href="#Java完整代码–FinalTest类" class="headerlink" title="Java完整代码–FinalTest类"></a>Java完整代码–FinalTest类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;直接插入排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.insertSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n直接插入排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.insertSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，直接插入排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BubbleTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;冒泡排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.bubbleSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n冒泡排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.bubbleSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，冒泡插入排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BinInsertSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;折半插入排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.binInsertSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n折半插入排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.binInsertSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，折半插入排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;希尔排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.shellSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n希尔排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.shellSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，希尔排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;选择排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.selectSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n选择排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.selectSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，选择排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;快速排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.quickSort(arrays, <span class="number">0</span>, arrays.length - <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\n快速排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.quickSortZ(arrays, <span class="number">0</span>, arrays.length - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，快速排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">16</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;归并排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">arrays = Sort.mergeSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n归并排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.mergeSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，归并排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;堆排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">arrays = Sort.heapSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n堆排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.heapSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，堆排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><h2 id="Java完整代码–Sort类"><a href="#Java完整代码–Sort类" class="headerlink" title="Java完整代码–Sort类"></a>Java完整代码–Sort类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//第一张牌有序，所以从第二张牌开始往前比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//把这张牌拿在手里</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="comment">//从该牌的左起第一张开始比较，手牌小于左边的牌，则将左边的牌后移</span></span><br><span class="line"><span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//折半插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] binInsertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt;= temp)</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">high++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= high + <span class="number">1</span>; j--) &#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[high] = temp;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> step = length / <span class="number">2</span>; step &gt;= <span class="number">1</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; length; i++) &#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> j = i - step;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + step] = arr[j];</span><br><span class="line">j -= step;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + step] = temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                设定一个标记，若为true，则表示此次循环没有进行交换，</span></span><br><span class="line"><span class="comment">                也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line"><span class="comment">                例如已经顺序排好的数列。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> minPos = i;</span><br><span class="line"><span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[minPos]) &#123;</span><br><span class="line"><span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">minPos = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != minPos) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[minPos];</span><br><span class="line">arr[minPos] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R) &#123;</span><br><span class="line"><span class="keyword">if</span> (L &gt;= R)</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"><span class="keyword">int</span> left = L, right = R;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本思想</span></span><br><span class="line"><span class="comment">1.选定Pivot中心轴</span></span><br><span class="line"><span class="comment">2.将大于Pivot的数字放在Pivot的右边</span></span><br><span class="line"><span class="comment">3.将小于Pivot的数字放在Pivot的左边</span></span><br><span class="line"><span class="comment">4.分别对左右子序列重复前三部操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> pivot = arr[left];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">//右下标对应的元素若大于pivot，则不进行操作，右下标自减</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= pivot) &#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表右下标遇到了比pivot小的元素，将该元素放到左边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[left] = arr[right];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴</span></span><br><span class="line"><span class="comment">//左下标对应的元素若小于pivot，则不进行操作，左下标自增</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= pivot) &#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表左下标遇到了比pivot大的元素，将该元素放到右边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[right] = arr[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴 将pivot放在左右下标交汇点</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">arr[left] = pivot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"><span class="comment">//递归调用，分别对左右子序列重复进行上述操作</span></span><br><span class="line">quickSort(arr, L, right - <span class="number">1</span>);</span><br><span class="line">quickSort(arr, right + <span class="number">1</span>, R);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line"><span class="keyword">int</span>[] temp = Arrays.copyOf(arr, arr.length);</span><br><span class="line"><span class="keyword">if</span> (temp.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (<span class="keyword">int</span>) Math.floor(temp.length / <span class="number">2</span>);</span><br><span class="line"><span class="comment">//分而治之的分</span></span><br><span class="line"><span class="keyword">int</span>[] left = Arrays.copyOfRange(temp, <span class="number">0</span>, mid);</span><br><span class="line"><span class="keyword">int</span>[] right = Arrays.copyOfRange(temp, mid, temp.length);</span><br><span class="line"><span class="comment">//递归调用，将左右子序列继续分为两组，直至每组只有一个元素</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(temp));</span></span><br><span class="line"><span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//比较两个子序列中的第一个元素，将较小元素加入到结果序列中</span></span><br><span class="line"><span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//此步操作相当于剔除left序列中的第一个元素，从而诞生新的第一个元素</span></span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一方序列的元素全部加入到结果序列中后，将剩余子序列的元素全部加入到结果序列中</span></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(result));</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对传进来的数组拷贝</span></span><br><span class="line"><span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"><span class="comment">//获取传进来的数组的长度</span></span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="comment">//以该数组来建一个堆</span></span><br><span class="line">buildMaxHeap(arr, len);</span><br><span class="line"><span class="comment">//将堆尾元素和堆首元素交换，交换到堆尾的元素已经排好序了，所以数组长度/堆长度减一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">swap(arr, <span class="number">0</span>, i);</span><br><span class="line">len--;</span><br><span class="line">heapify(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立大顶堆  因为下标是从0开始 所以其实这里的len/2是最后一个非叶节点或非叶节点的下一个 但是不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapify(arr, i, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 完成将以i对应的非叶节点的数，调整成大顶堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待调整数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i   第一个非叶节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 调整长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//根节点下标从0开始 双亲节点下标是i 子节点下标是2i+1和2i+2</span></span><br><span class="line"><span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> largest = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子的值比爹大  那就左孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">largest = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有孩子的值比爹大  那就有孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">largest = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大值发生了变化，则可能会产生新的最大值，进行递归调用</span></span><br><span class="line"><span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line"><span class="comment">//将最大值对应的下标作为双亲结点</span></span><br><span class="line">swap(arr, i, largest);</span><br><span class="line"><span class="comment">//递归调用</span></span><br><span class="line">heapify(arr, largest, len);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//******************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//第一张牌有序，所以从第二张牌开始往前比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//把这张牌拿在手里</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">j=i-1就是从这张牌的前一张开始比较，</span></span><br><span class="line"><span class="comment">只要还没到最左边的牌，就一直比较下去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="comment">//前面的牌比手牌大，那就把前面的牌往后移</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[++j] = temp;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//折半插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] binInsertSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt;= temp)</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">high++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= high + <span class="number">1</span>; j--) &#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[high] = temp;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> step = length / <span class="number">2</span>; step &gt;= <span class="number">1</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; length; i++) &#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> j = i - step;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + step] = arr[j];</span><br><span class="line">j -= step;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + step] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                设定一个标记，若为true，则表示此次循环没有进行交换，</span></span><br><span class="line"><span class="comment">                也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line"><span class="comment">                例如已经顺序排好的数列。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line"><span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = arr[min];</span><br><span class="line">arr[min] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSortZ(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R) &#123;</span><br><span class="line"><span class="keyword">if</span> (L &gt;= R)</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"><span class="keyword">int</span> left = L, right = R;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本思想</span></span><br><span class="line"><span class="comment">1.选定Pivot中心轴</span></span><br><span class="line"><span class="comment">2.将大于Pivot的数字放在Pivot的右边</span></span><br><span class="line"><span class="comment">3.将小于Pivot的数字放在Pivot的左边</span></span><br><span class="line"><span class="comment">4.分别对左右子序列重复前三部操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> pivot = arr[left];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">//右下标对应的元素若大于pivot，则不进行操作，右下标自减</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= pivot) &#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表右下标遇到了比pivot小的元素，将该元素放到左边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[left] = arr[right];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴</span></span><br><span class="line"><span class="comment">//左下标对应的元素若小于pivot，则不进行操作，左下标自增</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= pivot) &#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表左下标遇到了比pivot大的元素，将该元素放到右边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[right] = arr[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴 将pivot放在左右下标交汇点</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">arr[left] = pivot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">//递归调用，分别对左右子序列重复进行上述操作</span></span><br><span class="line">quickSortZ(arr, L, right - <span class="number">1</span>);</span><br><span class="line">quickSortZ(arr, right + <span class="number">1</span>, R);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line"><span class="keyword">int</span>[] temp = Arrays.copyOf(arr, arr.length);</span><br><span class="line"><span class="keyword">if</span> (temp.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (<span class="keyword">int</span>) Math.floor(temp.length / <span class="number">2</span>);</span><br><span class="line"><span class="comment">//分而治之的分</span></span><br><span class="line"><span class="keyword">int</span>[] left = Arrays.copyOfRange(temp, <span class="number">0</span>, mid);</span><br><span class="line"><span class="keyword">int</span>[] right = Arrays.copyOfRange(temp, mid, temp.length);</span><br><span class="line"><span class="comment">//递归调用，将左右子序列继续分为两组，直至每组只有一个元素</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="keyword">return</span> mergeZ(mergeSortZ(left), mergeSortZ(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeZ(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//比较两个子序列中的第一个元素，将较小元素加入到结果序列中</span></span><br><span class="line"><span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//此步操作相当于剔除left序列中的第一个元素，从而诞生新的第一个元素</span></span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一方序列的元素全部加入到结果序列中后，将剩余子序列的元素全部加入到结果序列中</span></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSortZ(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对传进来的数组拷贝</span></span><br><span class="line"><span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"><span class="comment">//获取传进来的数组的长度</span></span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="comment">//以该数组来建一个堆</span></span><br><span class="line">buildMaxHeapZ(arr, len);</span><br><span class="line"><span class="comment">//将堆尾元素和堆首元素交换，交换到堆尾的元素已经排好序了，所以数组长度/堆长度减一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">swap(arr, <span class="number">0</span>, i);</span><br><span class="line">len--;</span><br><span class="line">heapifyZ(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立大顶堆  因为下标是从0开始 所以其实这里的len/2是最后一个非叶节点或非叶节点的下一个 但是不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeapZ</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapifyZ(arr, i, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 完成将以i对应的非叶节点的数，调整成大顶堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待调整数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i   第一个非叶节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 调整长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapifyZ</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//根节点下标从0开始 双亲节点下标是i 子节点下标是2i+1和2i+2</span></span><br><span class="line"><span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> largest = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子的值比爹大  那就左孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">largest = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有孩子的值比爹大  那就有孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">largest = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大值发生了变化，则可能会产生新的最大值，进行递归调用</span></span><br><span class="line"><span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line"><span class="comment">//将最大值对应的下标作为双亲结点</span></span><br><span class="line">swap(arr, i, largest);</span><br><span class="line"><span class="comment">//递归调用</span></span><br><span class="line">heapifyZ(arr, largest, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown</title>
      <link href="/2021/11/10/MarkDown/"/>
      <url>/2021/11/10/MarkDown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="学了五分钟的MarkDown语法"><a href="#学了五分钟的MarkDown语法" class="headerlink" title="学了五分钟的MarkDown语法"></a>学了五分钟的MarkDown语法</h1><h1 id="以后可能会继续更新"><a href="#以后可能会继续更新" class="headerlink" title="以后可能会继续更新"></a>以后可能会继续更新</h1><p>[在线编译器]<a href="https://dillinger.io/">https://dillinger.io/</a></p><h2 id="1-标题语法"><a href="#1-标题语法" class="headerlink" title="1.标题语法"></a>1.标题语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标题语法</span></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试环节"><a href="#测试环节" class="headerlink" title="测试环节"></a>测试环节</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加粗</span></span><br><span class="line">**我被加粗了**</span><br><span class="line"><span class="comment">// 代码高亮</span></span><br><span class="line">==HIGH LIGHT==</span><br><span class="line"><span class="comment">// 删除线</span></span><br><span class="line">~~我被删除啦~~</span><br><span class="line"><span class="comment">// 斜体</span></span><br><span class="line">*我是斜体字*</span><br></pre></td></tr></table></figure><h3 id="测试环节-1"><a href="#测试环节-1" class="headerlink" title="测试环节"></a>测试环节</h3><p><strong>我被加粗了</strong></p><p>==HIGH LIGHT==</p><p><del>我被删除啦</del></p><p><em>我是斜体字</em></p><h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用语法</span></span><br><span class="line">&gt;作者: Kyle_CyaN</span><br><span class="line">&gt;&gt;作者: Kyle_CyaN</span><br><span class="line">&gt;&gt;&gt;作者: Kyle_CyaN</span><br><span class="line">&gt;&gt;&gt;&gt;作者: Kyle_CyaN</span><br></pre></td></tr></table></figure><h3 id="测试环节-2"><a href="#测试环节-2" class="headerlink" title="测试环节"></a>测试环节</h3><blockquote><p>作者: Kyle_CyaN</p><blockquote><p>作者: Kyle_CyaN</p><blockquote><p>作者: Kyle_CyaN</p><blockquote><p>作者: Kyle_CyaN</p></blockquote></blockquote></blockquote></blockquote><h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分割线1</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">// 分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure><h3 id="测试环节-3"><a href="#测试环节-3" class="headerlink" title="测试环节"></a>测试环节</h3><hr><hr><h2 id="5-图片插入"><a href="#5-图片插入" class="headerlink" title="5.图片插入"></a>5.图片插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在线图片或本地图片</span></span><br><span class="line">![我的图片](photo/me.png)</span><br></pre></td></tr></table></figure><h3 id="测试环节-4"><a href="#测试环节-4" class="headerlink" title="测试环节"></a>测试环节</h3><p><img src="https://img2.baidu.com/it/u=1519358925,3330107491&fm=26&fmt=auto" alt="我的图片"></p><h2 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6.超链接"></a>6.超链接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超链接语法</span></span><br><span class="line">[这里是BILIBILI](https:<span class="comment">//www.bilibili.com/)</span></span><br></pre></td></tr></table></figure><h3 id="测试环节-5"><a href="#测试环节-5" class="headerlink" title="测试环节"></a>测试环节</h3><p><a href="https://www.bilibili.com/">哔哩哔哩</a></p><h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"><span class="comment">// 有序列表</span></span><br><span class="line"><span class="number">1.</span>目录<span class="number">4</span></span><br><span class="line"><span class="number">2.</span>目录<span class="number">5</span></span><br><span class="line"><span class="number">3.</span>目录<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="测试环节-6"><a href="#测试环节-6" class="headerlink" title="测试环节"></a>测试环节</h3><ul><li>目录1</li><li>目录2</li><li>目录3</li></ul><p>1.目录4<br>2.目录5<br>3.目录6</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>做表格当然是用工具啦，毕竟手敲那么累<br><a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables Generator</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/10/hello-world/"/>
      <url>/2021/11/10/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>这是我第一次使用<a href="https://hexo.io/">Hexo</a>框架搭建博客!<br>采用的主题是<a href="https://github.com/jerryc127/hexo-theme-butterfly">ButterFly</a><br>花了我一个晚上才搭建好，可以说是把能踩的坑全都踩了一遍。<br>以后会在这个小破站不定期更新一些学到的新东西。<br>如果想联系我的话，我的邮箱是<a href="mailto:&#67;&#121;&#x64;&#x65;&#114;&#112;&#x75;&#x6e;&#x6b;&#x32;&#48;&#55;&#x37;&#64;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#67;&#121;&#x64;&#x65;&#114;&#112;&#x75;&#x6e;&#x6b;&#x32;&#48;&#55;&#x37;&#64;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a>。</p><h1 id="这里是我的QQ号"><a href="#这里是我的QQ号" class="headerlink" title="这里是我的QQ号"></a>这里是我的QQ号</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowQQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String Ciphertext = <span class="string">&quot;1235689&quot;</span>;</span><br><span class="line">String QQ = <span class="string">&quot;&quot;</span> +</span><br><span class="line">Ciphertext.charAt(<span class="number">0</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">3</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">5</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">4</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">2</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">5</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">3</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">1</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">6</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">4</span>);</span><br><span class="line">System.out.println(QQ);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
