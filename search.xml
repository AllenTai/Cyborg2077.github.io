<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝桥杯入门习题</title>
      <link href="/2022/01/06/lanqiao/"/>
      <url>/2022/01/06/lanqiao/</url>
      
        <content type="html"><![CDATA[<h1 id="数列排序"><a href="#数列排序" class="headerlink" title="数列排序"></a>数列排序</h1><p>来源：<a href="http://lx.lanqiao.cn/problem.page?gpid=T52">http://lx.lanqiao.cn/problem.page?gpid=T52</a></p><h2 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：512.0MB</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;=n&lt;=200<br>输入格式<br>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。<br>输出格式<br>　　输出一行，按从小到大的顺序输出排序后的数列。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>5<br>8 3 6 4 9</p><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>3 4 6 8 9</p><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n= scan.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i]= scan.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h1><p>来源：<a href="http://lx.lanqiao.cn/problem.page?gpid=T50">http://lx.lanqiao.cn/problem.page?gpid=T50</a>   </p><h2 id="资源限制-1"><a href="#资源限制-1" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：512.0MB</p><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。<br>　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h2><p>FFFF</p><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h2><p>65535</p><h2 id="代码提交-1"><a href="#代码提交-1" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String hex= scan.next();</span><br><span class="line">System.out.println(Long.valueOf(hex,<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h1><p>来源：<a href="http://lx.lanqiao.cn/problem.page?gpid=T49">http://lx.lanqiao.cn/problem.page?gpid=T49</a></p><h2 id="资源限制-2"><a href="#资源限制-2" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：512.0MB</p><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。<br>　　给出一个非负整数，将它表示成十六进制的形式。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>　　输出这个整数的16进制表示</p><h2 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h2><p>30</p><h2 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h2><p>1E</p><h2 id="代码提交-2"><a href="#代码提交-2" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> target= scan.nextInt();</span><br><span class="line">System.out.println(Integer.toHexString(target).toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="特殊回文数"><a href="#特殊回文数" class="headerlink" title="特殊回文数"></a>特殊回文数</h1><p>来源：<a href="http://lx.lanqiao.cn/problem.page?gpid=T48">http://lx.lanqiao.cn/problem.page?gpid=T48</a></p><h2 id="资源限制-3"><a href="#资源限制-3" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：512.0MB</p><h2 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　123321是一个非常特殊的数，它从左边读和从右边读是一样的。<br>　　输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>　　输入一行，包含一个正整数n。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>　　按从小到大的顺序输出满足条件的整数，每个整数占一行。</p><h2 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h2><p>52</p><h2 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h2><p>899998<br>989989<br>998899</p><h2 id="代码提交-3"><a href="#代码提交-3" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n= scan.nextInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span>((i+j+k+j+i)==n)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+i+j+k+j+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span>((i+j+k+k+j+i)==n)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+i+j+k+k+j+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p>来源：<a href="http://lx.lanqiao.cn/problem.page?gpid=T47">http://lx.lanqiao.cn/problem.page?gpid=T47</a></p><h2 id="资源限制-4"><a href="#资源限制-4" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：512.0MB</p><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>　　按从小到大的顺序输出满足条件的四位十进制数。</p><h2 id="代码提交-4"><a href="#代码提交-4" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+i+j+j+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="特殊的数字"><a href="#特殊的数字" class="headerlink" title="特殊的数字"></a>特殊的数字</h1><p>来源：<a href="http://lx.lanqiao.cn/problem.page?gpid=T46">http://lx.lanqiao.cn/problem.page?gpid=T46</a></p><h2 id="资源限制-5"><a href="#资源限制-5" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：512.0MB</p><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1<em>1</em>1+5<em>5</em>5+3<em>3</em>3。编程求所有满足这种条件的三位十进制数。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>　　按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</p><h2 id="代码提交-5"><a href="#代码提交-5" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a=i/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> b=i/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c=i%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>((a*a*a+b*b*b+c*c*c)==i)</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h1><h2 id="资源限制-6"><a href="#资源限制-6" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h2><p>杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。</p><p>　　<br>它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。</p><p>　　<br>下面给出了杨辉三角形的前4行：</p><p>　　<br>   1</p><p>　　<br>  1 1</p><p>　　<br> 1 2 1</p><p>　　<br>1 3 3 1</p><p>　　<br>给出n，输出它的前n行。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包含一个数n。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。<br>样例输入<br>4</p><h2 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h2><p>1<br>1 1<br>1 2 1<br>1 3 3 1</p><h2 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>1 &lt;= n &lt;= 34。</p><h2 id="代码提交-6"><a href="#代码提交-6" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">arr[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i ; j++) &#123;</span><br><span class="line">arr[i][j] = arr[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找整数"><a href="#查找整数" class="headerlink" title="查找整数"></a>查找整数</h1><h2 id="资源限制-7"><a href="#资源限制-7" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h2><p>给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含一个整数n。</p><p>第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。</p><p>第三行包含一个整数a，为待查找的数。</p><h2 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h2><p>如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。</p><h2 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h2><p>6<br>1 9 4 8 3 9<br>9</p><h2 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h2><p>2</p><h2 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>1 &lt;= n &lt;= 1000。</p><h2 id="代码提交-7"><a href="#代码提交-7" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i]= scan.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> target=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> result=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(target==arr[i])&#123;</span><br><span class="line">result=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数列特征"><a href="#数列特征" class="headerlink" title="数列特征"></a>数列特征</h1><h2 id="资源限制-8"><a href="#资源限制-8" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h2><p>给出n个数，找出这n个数的最大值，最小值，和。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为整数n，表示数的个数。</p><p>第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。</p><h2 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</p><h2 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h2><p>5<br>1 3 -2 4 5</p><h2 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h2><p>5<br>-2<br>11</p><h2 id="数据规模与约定-2"><a href="#数据规模与约定-2" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>1 &lt;= n &lt;= 10000。</p><h2 id="代码提交-8"><a href="#代码提交-8" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] = scanner.nextInt();</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(arr[n-<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字母图形"><a href="#字母图形" class="headerlink" title="字母图形"></a>字母图形</h1><h2 id="资源限制-9"><a href="#资源限制-9" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h2><p>利用字母可以组成一些美丽的图形，下面给出了一个例子：</p><p>ABCDEFG</p><p>BABCDEF</p><p>CBABCDE</p><p>DCBABCD</p><p>EDCBABC</p><p>这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。</p><h2 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。</p><h2 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出n行，每个m个字符，为你的图形。</p><h2 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h2><p>5 7</p><h2 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h2><p>ABCDEFG<br>BABCDEF<br>CBABCDE<br>DCBABCD<br>EDCBABC</p><h2 id="数据规模与约定-3"><a href="#数据规模与约定-3" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>1 &lt;= n, m &lt;= 26。</p><h2 id="代码提交-9"><a href="#代码提交-9" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line"><span class="keyword">char</span>[][] result = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> min =<span class="number">26</span>;</span><br><span class="line"><span class="keyword">while</span> (--min&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">result[min][min] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> tmp1=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> tmp2=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = min+<span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">result[min][i]=++tmp1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j=min-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (; j &gt;=<span class="number">0</span> ; j--) &#123;</span><br><span class="line">result[min][j]=++tmp2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">System.out.print(result[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="01字串"><a href="#01字串" class="headerlink" title="01字串"></a>01字串</h1><h2 id="资源限制-10"><a href="#资源限制-10" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-10"><a href="#问题描述-10" class="headerlink" title="问题描述"></a>问题描述</h2><p>对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：</p><p>00000</p><p>00001</p><p>00010</p><p>00011</p><p>00100</p><p>请按从小到大的顺序输出这32种01串。</p><h2 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h2><p>本试题没有输入。</p><h2 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出32行，按从小到大的顺序每行一个长度为5的01串。</p><h2 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h2><p>00000<br>00001<br>00010<br>00011<br>&lt;以下部分省略&gt;</p><h2 id="代码提交-10"><a href="#代码提交-10" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">2</span>; l++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">2</span>; m++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span> + i + j + k + l + m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h1><h2 id="资源限制-11"><a href="#资源限制-11" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-11"><a href="#问题描述-11" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个年份，判断这一年是不是闰年。</p><p>当以下情况之一满足时，这一年是闰年：</p><ol><li><p>年份是4的倍数而不是100的倍数；</p></li><li><p>年份是400的倍数。</p></li></ol><p>其他的年份都不是闰年。</p><h2 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包含一个整数y，表示当前的年份。</p><h2 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行，如果给定的年份是闰年，则输出yes，否则输出no。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定的大小写，写错大小写将不得分。</p><h2 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h2><p>2013</p><h2 id="样例输出-9"><a href="#样例输出-9" class="headerlink" title="样例输出"></a>样例输出</h2><p>no</p><h2 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h2><p>2016</p><h2 id="样例输出-10"><a href="#样例输出-10" class="headerlink" title="样例输出"></a>样例输出</h2><p>yes</p><h2 id="数据规模与约定-4"><a href="#数据规模与约定-4" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>1990 &lt;= y &lt;= 2050。</p><h2 id="代码提交-11"><a href="#代码提交-11" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> year=scan.nextInt();</span><br><span class="line"><span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||(year%<span class="number">400</span>==<span class="number">0</span>))</span><br><span class="line">System.out.println(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Fibonacci数列"><a href="#Fibonacci数列" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h1><h2 id="资源限制-12"><a href="#资源限制-12" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-12"><a href="#问题描述-12" class="headerlink" title="问题描述"></a>问题描述</h2><p>Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</p><p>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</p><h2 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包含一个整数n。</p><h2 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行，包含一个整数，表示Fn除以10007的余数。</p><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</p><h2 id="样例输入-9"><a href="#样例输入-9" class="headerlink" title="样例输入"></a>样例输入</h2><p>10</p><h2 id="样例输出-11"><a href="#样例输出-11" class="headerlink" title="样例输出"></a>样例输出</h2><p>55</p><h2 id="样例输入-10"><a href="#样例输入-10" class="headerlink" title="样例输入"></a>样例输入</h2><p>22</p><h2 id="样例输出-12"><a href="#样例输出-12" class="headerlink" title="样例输出"></a>样例输出</h2><p>7704</p><h2 id="数据规模与约定-5"><a href="#数据规模与约定-5" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>1 &lt;= n &lt;= 1,000,000。</p><h2 id="代码提交-12"><a href="#代码提交-12" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] resule = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">2</span>];</span><br><span class="line">resule[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">resule[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">resule[i] = ((resule[i - <span class="number">1</span>] + resule[i - <span class="number">2</span>]) % <span class="number">10007</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(resule[n - <span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="圆的面积"><a href="#圆的面积" class="headerlink" title="圆的面积"></a>圆的面积</h1><h2 id="资源限制-13"><a href="#资源限制-13" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-13"><a href="#问题描述-13" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定圆的半径r，求圆的面积。</p><h2 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包含一个整数r，表示圆的半径。</p><h2 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。</p><h2 id="说明：在本题中，输入是一个整数，但是输出是一个实数。"><a href="#说明：在本题中，输入是一个整数，但是输出是一个实数。" class="headerlink" title="说明：在本题中，输入是一个整数，但是输出是一个实数。"></a>说明：在本题中，输入是一个整数，但是输出是一个实数。</h2><p>对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。</p><h2 id="样例输入-11"><a href="#样例输入-11" class="headerlink" title="样例输入"></a>样例输入</h2><p>4</p><h2 id="样例输出-13"><a href="#样例输出-13" class="headerlink" title="样例输出"></a>样例输出</h2><p>50.2654825</p><h2 id="数据规模与约定-6"><a href="#数据规模与约定-6" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>1 &lt;= r &lt;= 10000。</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。</p><h2 id="代码提交-13"><a href="#代码提交-13" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Area</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI*r*r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DecimalFormat df=<span class="keyword">new</span> DecimalFormat(<span class="string">&quot;0.0000000&quot;</span>);</span><br><span class="line">Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> r=scan.nextInt();</span><br><span class="line">System.out.println(df.format(Area(r)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="序列求和"><a href="#序列求和" class="headerlink" title="序列求和"></a>序列求和</h1><h2 id="资源限制-14"><a href="#资源限制-14" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s   内存限制：256.0MB</p><h2 id="问题描述-14"><a href="#问题描述-14" class="headerlink" title="问题描述"></a>问题描述</h2><p>求1+2+3+…+n的值。</p><h2 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包括一个整数n。</p><h2 id="输出格式-12"><a href="#输出格式-12" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行，包括一个整数，表示1+2+3+…+n的值。</p><h2 id="样例输入-12"><a href="#样例输入-12" class="headerlink" title="样例输入"></a>样例输入</h2><p>4</p><h2 id="样例输出-14"><a href="#样例输出-14" class="headerlink" title="样例输出"></a>样例输出</h2><p>10</p><h2 id="样例输入-13"><a href="#样例输入-13" class="headerlink" title="样例输入"></a>样例输入</h2><p>100</p><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><p>有一些试题会给出多组样例输入输出以帮助你更好的做题。<br>一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就是完全正确的，潜在的错误可能仍然导致你的得分较低。</p><h2 id="样例输出-15"><a href="#样例输出-15" class="headerlink" title="样例输出"></a>样例输出</h2><p>5050</p><h2 id="数据规模与约定-7"><a href="#数据规模与约定-7" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>1 &lt;= n &lt;= 1,000,000,000。</p><h2 id="代码提交-14"><a href="#代码提交-14" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Sum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span> + n) * n / <span class="number">2</span> + <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">long</span> n = scan.nextLong();</span><br><span class="line">System.out.println(Sum(n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 入门习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程(持续更新中)</title>
      <link href="/2021/12/25/Thread/"/>
      <url>/2021/12/25/Thread/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念-程序、进程、线程"><a href="#基本概念-程序、进程、线程" class="headerlink" title="基本概念: 程序、进程、线程"></a>基本概念: 程序、进程、线程</h1><ul><li><p>程序(program): 为完成特定任务、用某种语言编写的一组指令的集合。即指<strong>一段静态的代码</strong>，静态对象。</p></li><li><p>进程(process): 是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p>线程(thread):  线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</p></li><li><p>简而言之：<strong>一个程序运行后至少有一个进程，一个进程中可以包含多个线程。</strong></p></li></ul><p><img src="/img/%E8%BF%9B%E7%A8%8B.png" alt="进程"></p><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p><img src="https://gitee.com/lsqpic/BlogPicBed-1/raw/master/img/2021/01/16/20210123234436.jpg" alt="进程与线程"></p><h3 id="单核CPU与多核CPU的理解"><a href="#单核CPU与多核CPU的理解" class="headerlink" title="单核CPU与多核CPU的理解"></a>单核CPU与多核CPU的理解</h3><ul><li><p>单核CPU其实是一种假的多线程，因为在一个时间单元内只能执行一个线程的任务。举个不恰当的例子：我在打英雄联盟，同时要在QQ跟两个妹子聊天。游戏是全屏的，所以必须要切屏出去回消息。我就好比是一个单核CPU，在一个时间单元只能执行一个线程任务，所以只能一边打游戏一边切屏出去回复两个妹子(<del>就当是提升游戏难度了</del>)，如若游戏里死了(<del>不可能的</del>)或者妹子还没回复我，那我就可以把她们”挂起”(<del>晾着她，等她回我了，再搭理她</del>)。但是由于我切屏回复的速度非常快，所以妹子感觉不出来我在多线操作。</p></li><li><p>如果是多核CPU的话，就用Python写个糊弄学大师，把QQ和脚本挂我云服务器上，这样脚本帮我回复妹子，我可以专心打游戏，我与脚本各司其职。</p></li><li><p>一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</p></li></ul><h3 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h3><ul><li>并行：多核cpu运行。多线程时，真正的在同一时刻运行。</li><li>并发：单核cpu运行多线程时，时间片进行很快的切换，线程轮流执行cpu。(抢票/秒杀活动)</li></ul><h2 id="为什么要使用多线程"><a href="#为什么要使用多线程" class="headerlink" title="为什么要使用多线程"></a>为什么要使用多线程</h2><p>用多线程只有一个目的，那就是更好的利用CPU的资源，因为所有的多线程代码都可以用单线程来实现。说这个话其实只有一半对，因为反应”多角色”的程序代码，最起码每个角色要给他一个线程，否则连实际场景都无法模拟，当然也没法说能用单线程来实现：比如最常见的”生产者，消费者模型”(下文会详细说明)。</p><h1 id="线程的创建与使用"><a href="#线程的创建与使用" class="headerlink" title="线程的创建与使用"></a>线程的创建与使用</h1><h2 id="线程的创建与启动"><a href="#线程的创建与启动" class="headerlink" title="线程的创建与启动"></a>线程的创建与启动</h2><ul><li>Java语言的JVM允许程序运行多个线程，他通过java.lang.Thread类来体现。</li><li>Thread类的特性<ol><li>每个线程都是通过某个特定的Thread对象的run()方法来完成操作的，通常把run()方法的主体称为线程体</li><li>通过Thread对象的start()方法而不是run()方法来启动这个线程，而非直接调用run()</li></ol></li></ul><h2 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h2><ol><li>Thread()：创建新的Thread对象</li><li>Thread(Runnable target)：指定创建线程的目标对象，它实现了Runnable接口中的run方法</li><li>Thread(String threadname)：创建线程并指定线程实例名</li><li>Thread(Runnable target, String threadname)：创建新的Thread对象</li></ol><h2 id="创建多线程的方式一：继承Thread类"><a href="#创建多线程的方式一：继承Thread类" class="headerlink" title="创建多线程的方式一：继承Thread类"></a>创建多线程的方式一：继承Thread类</h2><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread的run()方法 —&gt; 将此线程的方法声明在run()中</li><li>创建Thread类的子对象</li><li>通过此对象调用start()<br>例子：创建一个线程，遍历100以内的所有偶数，创建匿名子类实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">//2.重写Thread的run()方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//3.创建Thread类的子对象</span></span><br><span class="line">MyThread mythread = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="comment">//此步骤是将创建的线程命名为&quot;线程1-&quot; 方便观察结果对比</span></span><br><span class="line">mythread.setName(<span class="string">&quot;线程1-&quot;</span>);</span><br><span class="line"><span class="comment">//4.通过此对象调用start()</span></span><br><span class="line">mythread.start();</span><br><span class="line"><span class="comment">//创建Thread类的匿名子类的方式</span></span><br><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"><span class="comment">//将main()命名为主线程-</span></span><br><span class="line">Thread.currentThread().setName(<span class="string">&quot;主线程-&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">部分运行结果：</span><br><span class="line">Thread-<span class="number">170</span></span><br><span class="line">Thread-<span class="number">180</span></span><br><span class="line">主线程-<span class="number">5</span></span><br><span class="line">线程<span class="number">1</span>-<span class="number">36</span></span><br><span class="line">线程<span class="number">1</span>-<span class="number">38</span></span><br><span class="line">主线程-<span class="number">7</span></span><br><span class="line">Thread-<span class="number">190</span></span><br><span class="line">Thread-<span class="number">1100</span></span><br><span class="line">···</span><br><span class="line"></span><br><span class="line">显而易见，三个线程的运行结果之间存在交叉(没有出现交叉的请多执行几遍)</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>例子：创建三个窗口卖票，总票数为100张 (存在线程安全问题，后面会解决)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Window w1 = <span class="keyword">new</span> Window();</span><br><span class="line">Window w2 = <span class="keyword">new</span> Window();</span><br><span class="line">Window w3 = <span class="keyword">new</span> Window();</span><br><span class="line">w1.setName(<span class="string">&quot;窗口1-&quot;</span>);</span><br><span class="line">w2.setName(<span class="string">&quot;窗口2-&quot;</span>);</span><br><span class="line">w3.setName(<span class="string">&quot;窗口3-&quot;</span>);</span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">w3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意这里的static 三个窗口共卖100张票</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖票号&quot;</span>+ticket--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">部分输出结果：</span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">4</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">2</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">3</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7a640e36cea308b9eeaabe6e715eb4bd.png" alt="理想状态"><br>若在输出语句之前加上sleep(10)，让线程进入if判断语句之后休眠10ms，则会导致下面的运行结果,出现重票和错票。<br>一个线程进入if判断语句之后休眠了，还没有完成自减的操作，此时另一个线程也进来了，一次判断导致了两次自减，所以就会出现了重票和错票的现象。<br>解决办法就是加个锁(同步监视器)，一个线程执行过程中，不让别的线程进来就好了，下文会提供解决办法。<br><img src="https://img-blog.csdnimg.cn/img_convert/3b3d209bdf2c3351f5f525a73eacea0a.png" alt="极端状态"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">2</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">2</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">0</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">1</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号-<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Thread类的有关方法"><a href="#Thread类的有关方法" class="headerlink" title="Thread类的有关方法"></a>Thread类的有关方法</h2><ol><li>start():启动当前线程，执行当前线程的run()</li><li>run():通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li><li>currentThread(): 静态方法，返回当前代码执行的线程</li><li>getName():获取当前线程的名字</li><li>setName():设置当前线程的名字</li><li>yield():释放当前CPU的执行权</li><li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到<strong>线程b完全执行完以后</strong>，线程a才结束阻塞状态。</li><li>stop():<strong>已过时</strong>。当执行此方法时，强制结束当前线程。</li><li>sleep(long millitime)：让当前线程”睡眠”指定时间的millitime(毫秒)。在指定的millitime毫秒时间内，当前线程是阻塞状态的。</li><li>isAlive()：返回boolean，判断线程是否还活着</li></ol><p>前五个方法已经在刚刚的代码中使用过了，这里着重介绍后五个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyThread01 myThread01 = <span class="keyword">new</span> MyThread01();</span><br><span class="line">myThread01.start();</span><br><span class="line">        <span class="comment">//输出线程存活状态</span></span><br><span class="line">System.out.println(myThread01.isAlive());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;张&quot;</span> + i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//每次输出之后休眠10ms</span></span><br><span class="line">Thread.currentThread().sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//输出张10之后，将myThread01线程执行完</span></span><br><span class="line">myThread01.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//输出线程存活状态</span></span><br><span class="line">System.out.println(myThread01.isAlive());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">//当i==2时，释放当前CPU的执行权，等待分配</span></span><br><span class="line">                <span class="comment">//也可以理解为抢球，谁抢到就谁执行</span></span><br><span class="line">MyThread01.yield();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">张<span class="number">0</span></span><br><span class="line">张<span class="number">1</span></span><br><span class="line">Thread-<span class="number">00</span></span><br><span class="line">Thread-<span class="number">01</span></span><br><span class="line">张<span class="number">2</span></span><br><span class="line">张<span class="number">3</span></span><br><span class="line">Thread-<span class="number">02</span></span><br><span class="line">张<span class="number">4</span></span><br><span class="line">Thread-<span class="number">03</span></span><br><span class="line">Thread-<span class="number">04</span></span><br><span class="line">张<span class="number">5</span></span><br><span class="line">张<span class="number">6</span></span><br><span class="line">Thread-<span class="number">05</span></span><br><span class="line">Thread-<span class="number">06</span></span><br><span class="line">张<span class="number">7</span></span><br><span class="line">张<span class="number">8</span></span><br><span class="line">Thread-<span class="number">07</span></span><br><span class="line">张<span class="number">9</span></span><br><span class="line">Thread-08</span><br><span class="line">张<span class="number">10</span></span><br><span class="line">Thread-09</span><br><span class="line">Thread-<span class="number">010</span></span><br><span class="line">Thread-<span class="number">011</span></span><br><span class="line">Thread-<span class="number">012</span></span><br><span class="line">Thread-<span class="number">013</span></span><br><span class="line">Thread-<span class="number">014</span></span><br><span class="line">Thread-<span class="number">015</span></span><br><span class="line">Thread-<span class="number">016</span></span><br><span class="line">Thread-<span class="number">017</span></span><br><span class="line">Thread-018</span><br><span class="line">Thread-019</span><br><span class="line">张<span class="number">11</span></span><br><span class="line">张<span class="number">12</span></span><br><span class="line">张<span class="number">13</span></span><br><span class="line">张<span class="number">14</span></span><br><span class="line">张<span class="number">15</span></span><br><span class="line">张<span class="number">16</span></span><br><span class="line">张<span class="number">17</span></span><br><span class="line">张<span class="number">18</span></span><br><span class="line">张<span class="number">19</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2><ul><li>调度策略<ul><li>时间片</li><li>抢占式：高优先级的线程抢占CPU<br><img src="https://img-blog.csdnimg.cn/img_convert/df274b909314af5c7603df80e60c64f9.png" alt="时间片"></li></ul></li><li>同优先级的线程采用先进先出的队列模式，使用时间片策略</li><li>对于高优先级，使用优先调度的抢占式策略</li></ul><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><ul><li>线程的优先级等级<ul><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5 —&gt;默认优先级</li></ul></li><li>涉及的方法<ul><li>getPriority() ：返回线程优先值</li><li>setPriority(intnewPriority) ：改变线程的优先级</li></ul></li><li>说明:高优先级的线程要抢占低优先级线程cpu的执行权。<ul><li>但是只是从概率上讲，高优先级的线程高概率的情况下被执行。</li><li>并不意味着只有当高优先级的线程执行完以后，低优先级的线程才会被执行。</li></ul></li></ul><h2 id="创建多线程的方式二：实现Runnable接口"><a href="#创建多线程的方式二：实现Runnable接口" class="headerlink" title="创建多线程的方式二：实现Runnable接口"></a>创建多线程的方式二：实现Runnable接口</h2><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法:run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><p>将上面的练习改写成用Runnable接口实现的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTicket</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">Window window = <span class="keyword">new</span> Window();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">Thread w1 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">Thread w2 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">Thread w3 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">w1.setName(<span class="string">&quot;窗口1-&quot;</span>);</span><br><span class="line">w2.setName(<span class="string">&quot;窗口2-&quot;</span>);</span><br><span class="line">w3.setName(<span class="string">&quot;窗口3-&quot;</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start()</span></span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">w3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里不需要加static</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法:run()</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票号&quot;</span> + ticket--);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">部分运行结果：</span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">2</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">3</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">3</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">0</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号-<span class="number">1</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="继承方式和实现方式的联系与区别"><a href="#继承方式和实现方式的联系与区别" class="headerlink" title="继承方式和实现方式的联系与区别"></a>继承方式和实现方式的联系与区别</h2><ul><li>比较上述两种创建线程的方式<ul><li>开发中：优先选择实现Runnable接口的方式</li><li>原因：没有类的单继承性的局限性，实现方式更适合来处理多个线程共享数据的情况。</li></ul></li><li>联系：Thread类也实现了Runnable接口 -&gt; public class Thread implements Runnable</li><li>相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ul><li>新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源</li><li>运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态，run()方法定义了线程的操作和功能</li><li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出CPU并临时中止自己的执行，进入阻塞状态</li><li>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/b29133ad93d3839d259de57bbfa1397a.png" alt="生命周期"></p><h2 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h2><blockquote><p>Java中的线程分为两类，一种是守护线程，一种是用户线程</p></blockquote><ul><li>它们在几乎每个方面都是相同的，唯一的区别是JVM何时离开</li><li>守护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成守护线程</li><li>Java垃圾回收就是一个典型的守护线程。</li><li>若JVM中都是守护线程，当前JVM将退出。</li></ul><h2 id="同步代码块处理实现Runnable接口的线程安全问题"><a href="#同步代码块处理实现Runnable接口的线程安全问题" class="headerlink" title="同步代码块处理实现Runnable接口的线程安全问题"></a>同步代码块处理实现Runnable接口的线程安全问题</h2><blockquote><p>例子:创建三个窗口卖票，总票数为100张.使用实现RunnabLe接口的方式</p></blockquote><ol><li>卖票过程中出现重票、错票 —&gt; 出现了线程的安全问题</li><li>问题出现的原因:当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票</li><li>如何解决:当一个线程在操作ticket的时候，其他线程不能参与进来。直到线程操作完ticket时，其他线程才可以操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</li><li>在java中，我们通过同步机制，来解决线程的安全问题。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一:同步代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line"><span class="comment">//需要被同步的代码</span></span><br><span class="line"><span class="comment">//同步是一种高开销的操作，因此应该尽量减少同步的内容。 </span></span><br><span class="line"><span class="comment">//通常没有必要同步整个方法，使用synchronized代码块同步关键代码即可。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTicket</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Window window = <span class="keyword">new</span> Window();</span><br><span class="line">Thread w1 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">Thread w2 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">Thread w3 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">w1.setName(<span class="string">&quot;窗口1-&quot;</span>);</span><br><span class="line">w2.setName(<span class="string">&quot;窗口2-&quot;</span>);</span><br><span class="line">w3.setName(<span class="string">&quot;窗口3-&quot;</span>);</span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">w3.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//Object object=new Object();</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//synchronized (object)&#123;</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票号&quot;</span> + ticket--);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">部分执行结果：</span><br><span class="line"></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>-卖票号<span class="number">1</span></span><br><span class="line"></span><br><span class="line">可以看到已经不存在重票和错票的情况了</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p></blockquote><ol><li>操作共享数据的代码，即为需要被同步的代码—&gt;不能包含代码多了，也不能包含代码少了。</li><li>共享数据:多个线程共同操作的变量。比如: ticket就是共享数据</li><li>同步监视器，俗称:锁。任何一个类的对象，都可以来充当锁。要求:多个线程必须要共用同一把锁。 </li><li>补充:在实现RunnabLe接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</li></ol><h2 id="同步代码块处理继承Thread类的线程安全问题"><a href="#同步代码块处理继承Thread类的线程安全问题" class="headerlink" title="同步代码块处理继承Thread类的线程安全问题"></a>同步代码块处理继承Thread类的线程安全问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Window w1 = <span class="keyword">new</span> Window();</span><br><span class="line">Window w2 = <span class="keyword">new</span> Window();</span><br><span class="line">Window w3 = <span class="keyword">new</span> Window();</span><br><span class="line">w1.setName(<span class="string">&quot;窗口1-&quot;</span>);</span><br><span class="line">w2.setName(<span class="string">&quot;窗口2-&quot;</span>);</span><br><span class="line">w3.setName(<span class="string">&quot;窗口3-&quot;</span>);</span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">w3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//声明一个静态的obj也可以当锁</span></span><br><span class="line"><span class="comment">//private static Object object = new Object();</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//synchronized (object) &#123;</span></span><br><span class="line"><span class="comment">//注意这里不能用this，此时的this指的是w1，w2，w3三个对象，并不是唯一的</span></span><br><span class="line"><span class="comment">//这里使用的是类锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (Window.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票号&quot;</span> + ticket--);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">部分执行结果：</span><br><span class="line"></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">7</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">6</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">5</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">4</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">3</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">2</span></span><br><span class="line">窗口<span class="number">2</span>-卖票号<span class="number">1</span></span><br><span class="line"></span><br><span class="line">可以看到已经不存在重票和错票的情况了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同步方法处理实现Runnable的线程安全问题"><a href="#同步方法处理实现Runnable的线程安全问题" class="headerlink" title="同步方法处理实现Runnable的线程安全问题"></a>同步方法处理实现Runnable的线程安全问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方式二:同步方法</span><br><span class="line">如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的</span><br><span class="line">同步的方式，解决了线程的安全问题。---好处</span><br><span class="line">操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。---局限性</span><br><span class="line">使用 <span class="keyword">synchronized</span>关键字，可以修饰普通方法、静态方法，以及语句块。由于java的每个对象都有一个内置锁，</span><br><span class="line">当用此关键字修饰方法时， 内置锁会保护整个方法。在调用该方法前，需要获得内置锁，否则就处于阻塞状态。</span><br><span class="line">需要注意的是调用静态方法时，锁住的不是对象，锁住的是类。</span><br><span class="line"><span class="comment">//修饰普通方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修饰静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTicket</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Window window = <span class="keyword">new</span> Window();</span><br><span class="line">Thread w1 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">Thread w2 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">Thread w3 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">w1.setName(<span class="string">&quot;窗口1-&quot;</span>);</span><br><span class="line">w2.setName(<span class="string">&quot;窗口2-&quot;</span>);</span><br><span class="line">w3.setName(<span class="string">&quot;窗口3-&quot;</span>);</span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">w3.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!show())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修饰普通方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票号&quot;</span> + ticket--);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">部分执行结果：</span><br><span class="line"></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">6</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">5</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">4</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">3</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">2</span></span><br><span class="line">窗口<span class="number">1</span>-卖票号<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同步方法处理继承Thread类的线程安全问题"><a href="#同步方法处理继承Thread类的线程安全问题" class="headerlink" title="同步方法处理继承Thread类的线程安全问题"></a>同步方法处理继承Thread类的线程安全问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Window w1 = <span class="keyword">new</span> Window();</span><br><span class="line">Window w2 = <span class="keyword">new</span> Window();</span><br><span class="line">Window w3 = <span class="keyword">new</span> Window();</span><br><span class="line">w1.setName(<span class="string">&quot;窗口1-&quot;</span>);</span><br><span class="line">w2.setName(<span class="string">&quot;窗口2-&quot;</span>);</span><br><span class="line">w3.setName(<span class="string">&quot;窗口3-&quot;</span>);</span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">w3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!show())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修饰静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">show</span><span class="params">()</span> </span>&#123;  <span class="comment">//同步监视器：Window4.class</span></span><br><span class="line"><span class="comment">//private boolean show() &#123;       同步监视器：t1,t2,t3。此种解决方式是错误的,仍会出现重票错票</span></span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票号&quot;</span> + ticket--);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><blockquote><p>银行有一个账户。<br>有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。<br>分析:</p></blockquote><ol><li>是否是多线程问题？ 是，两个储户线程</li><li>是否有共享数据？ 有，账户(或账户余额)</li><li>是否有线程安全问题？ 有</li><li>需要考虑如何解决线程安全问题？ 同步机制:有三种方式。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SaveMoney</span><span class="params">(<span class="keyword">double</span> cash)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cash &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">money += cash;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;存入&quot;</span> + cash + <span class="string">&quot;元，当前余额&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Account account;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.account = account;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">account.SaveMoney(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Account account = <span class="keyword">new</span> Account(<span class="number">0</span>);</span><br><span class="line">Customer c1 = <span class="keyword">new</span> Customer(account);</span><br><span class="line">Customer c2 = <span class="keyword">new</span> Customer(account);</span><br><span class="line">c1.setName(<span class="string">&quot;客户1-&quot;</span>);</span><br><span class="line">c2.setName(<span class="string">&quot;客户2-&quot;</span>);</span><br><span class="line">c1.start();</span><br><span class="line">c2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">客户<span class="number">1</span>-存入<span class="number">1000.0</span>元，当前余额<span class="number">1000.0</span>元</span><br><span class="line">客户<span class="number">1</span>-存入<span class="number">1000.0</span>元，当前余额<span class="number">2000.0</span>元</span><br><span class="line">客户<span class="number">1</span>-存入<span class="number">1000.0</span>元，当前余额<span class="number">3000.0</span>元</span><br><span class="line">客户<span class="number">2</span>-存入<span class="number">1000.0</span>元，当前余额<span class="number">4000.0</span>元</span><br><span class="line">客户<span class="number">2</span>-存入<span class="number">1000.0</span>元，当前余额<span class="number">5000.0</span>元</span><br><span class="line">客户<span class="number">2</span>-存入<span class="number">1000.0</span>元，当前余额<span class="number">6000.0</span>元</span><br></pre></td></tr></table></figure><h2 id="死锁的问题"><a href="#死锁的问题" class="headerlink" title="死锁的问题"></a>死锁的问题</h2><blockquote><p>演示线程的死锁</p></blockquote><ol><li>死锁的理解:不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁(<del>两个死傲娇互相暗恋，都在等对方先表白，形成死锁</del>)</li><li>说明:出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续，所以我们使用同步时，要避免出现死锁。</li><li>解决办法：专门的算法、原则(尽可能避免出现死锁)，尽量减少同步资源的定义，尽量避免嵌套同步。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        StringBuffer s2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，当第一个线程拿到s1锁的时候，休眠了0.1秒的时间内，第二个线程拿到了s2锁。当第一个线程醒了之后，需要拿s2锁，而第二个线程拿着s2锁，又需要拿s1锁，于是两个线程就僵持下去，形成死锁。(加sleep()方法只是增加发生的可能性，不加sleep()方法也有几率会发生死锁)</p></blockquote><h2 id="Lock锁的方式解决线程安全问题"><a href="#Lock锁的方式解决线程安全问题" class="headerlink" title="Lock锁的方式解决线程安全问题"></a>Lock锁的方式解决线程安全问题</h2><ul><li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</li><li>ReentrantLock类实现了Lock ，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</li><li>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</li></ul><blockquote><p>synchronized 与Lock的异同？</p></blockquote><ol><li>相同:二者都可以解决线程安全问题</li><li>不同: synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器，Lock需要手动的启动同步(Lock())，同时结束同步也需要手动的实现(unLock())</li><li>优先使用顺序: Lock &gt;&gt; 同步代码块 &gt;&gt; 同步方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTicket</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Window window = <span class="keyword">new</span> Window();</span><br><span class="line">Thread w1 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">Thread w2 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">Thread w3 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">w1.setName(<span class="string">&quot;窗口1-&quot;</span>);</span><br><span class="line">w2.setName(<span class="string">&quot;窗口2-&quot;</span>);</span><br><span class="line">w3.setName(<span class="string">&quot;窗口3-&quot;</span>);</span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">w3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line"><span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//2.调用锁定方法：lock()</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票号&quot;</span> + ticket--);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><p>线程通信的例子:使用两个线程打E1-100。线程l，线程2交替打印</p><blockquote><p>涉及到的三个方法:<br>wait():—旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。<br>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。<br>notifyALL()：—旦执行此方法，就会唤醒所有被wait的线程。<br>说明:</p></blockquote><ol><li>wait(),notify(),notifyALl()三个方法<strong>必须使用在同步代码块或同步方法中</strong>。</li><li>wait(),notify(),notifyAlL()三个方法的调用者<strong>必须是同步代码块或同步方法中的同步监视器</strong>。否则，会出现ILLegaLMonitorstateException异常</li><li>wait(),notify(),notifyAll()三个方法是定义在java.Lang.object类中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">t1.setName(<span class="string">&quot;线程一：&quot;</span>);</span><br><span class="line">t2.setName(<span class="string">&quot;线程二：&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="comment">//2.唤醒被wait的线程，从而达到两个线程交替运行的效果</span></span><br><span class="line">notify();</span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + num++);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.使得调用如下wait()方法的线程进入阻塞状态,并释放锁</span></span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="sleep-和wait-的异同"><a href="#sleep-和wait-的异同" class="headerlink" title="sleep()和wait()的异同"></a>sleep()和wait()的异同</h3><blockquote><p>相同点</p></blockquote><ul><li>一旦执行方法，都可以使得当前的线程进入阻塞状态。<blockquote><p>不同点</p></blockquote></li><li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</li></ul><h2 id="经典例题：生产者-消费者问题"><a href="#经典例题：生产者-消费者问题" class="headerlink" title="经典例题：生产者/消费者问题"></a>经典例题：生产者/消费者问题</h2><blockquote><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产;如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p></blockquote><blockquote><p>这里可能出现两个问题:</p></blockquote><ol><li>生产者比消费者快时，消费者会漏掉一些数据没有取到。</li><li>消费者比生产者快时，消费者会取相同的数据。</li></ol><blockquote><p>分析:</p></blockquote><ol><li>是否是多线程的问题？      是，生产者的线程，消费者的线程</li><li>是否有共享数据的问题？      是，店员、产品、产品数</li><li>如何解决线程的安全问题？    同步机制，有三种方法</li><li>是否涉及线程的通信？        是</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> productCount = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">InProduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (productCount &lt; <span class="number">20</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在生产第&quot;</span> + (++productCount) + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">notify();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SaleProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (productCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在购买第&quot;</span> + (productCount--) + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">notify();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">clerk.InProduction();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">clerk.SaleProduct();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line">Producer producer = <span class="keyword">new</span> Producer(clerk);</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer(clerk);</span><br><span class="line">producer.setName(<span class="string">&quot;生产者-&quot;</span>);</span><br><span class="line">customer.setName(<span class="string">&quot;消费者-&quot;</span>);</span><br><span class="line">producer.start();</span><br><span class="line">customer.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建多线程的方式三：实现Callable接口"><a href="#创建多线程的方式三：实现Callable接口" class="headerlink" title="创建多线程的方式三：实现Callable接口"></a>创建多线程的方式三：实现Callable接口</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建饥荒专用服务器</title>
      <link href="/2021/12/20/server/"/>
      <url>/2021/12/20/server/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>闲得无聊买了三年的腾讯云服务器，以后游戏挂机刷东西就可以在服务器上完成了<del>再也不用担心游戏本扰民了</del></p><p>用Python的pyautogui库可以完成许多重复性工作(可以模拟达到按键精灵的效果)</p><p>本文先简要描述一下搭建饥荒专用服务器的流程(steam版)</p><p>以下是本文所需的全部文件</p><p>提取码: 9527  <a class="btn-beautify button--animated pink large" href="https://pan.baidu.com/s/1XIaqVzuWrkGAa3wZKd1WyQ"   title="百度网盘下载链接"><i class="far fa-hand-point-right"></i><span>百度网盘下载链接</span></a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>不多说，先买好云服务器(我买的腾讯云)  <a class="btn-beautify button--animated blue large" href="https://cloud.tencent.com/act/new?from=15616"   title="戳这里"><i class="far fa-hand-point-right"></i><span>戳这里</span></a></p><p>然后修改密码</p><p><img src="/img/%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81.png" alt="修改密码"></p><p>复制公网IP，并通过win10的远程桌面链接，连接到云服务器上</p><p><img src="/img/%E5%85%AC%E7%BD%91IP.png" alt="公网IP"> <img src="/img/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.png" alt="远程连接"></p><p>然后将网盘下载好的内容复制到<strong>服务器</strong>的 文档 目录下</p><p><img src="/img/%E6%AD%A4%E7%94%B5%E8%84%91.png" alt="此电脑"></p><p>打开steamcmd文件夹，然后双击里面的.exe文件进行安装</p><p>打开脚本文件夹，以管理员身份运行里面的update文件</p><p>然后在<strong>自己电脑</strong>上新创建一个世界，到达选人物界面断开连接即可</p><p><img src="/img/%E6%96%AD%E5%BC%80.png" alt="断开连接"></p><p>将刚创建的存档<strong>复制到服务器</strong>的  C:\Users\Administrator\Documents\Klei\DoNotStarveTogether  目录下</p><p>并将存档名改为 “Cluster_1” 进入该存档 创建一个”cluster_token.txt”文本文件</p><p><img src="/img/%E4%BB%A4%E7%89%8C.png" alt="令牌"></p><p>从<strong>自己的电脑</strong>上复制mod文件  在 steam\steamapps\common\Don’t Starve Together\mods 目录下和 steam\steamapps\workshop\content\322330均是</p><p>将所有的mod名改成<strong>workshop-nums</strong>的形式(例：workshop-8516651315)  并复制所有mod</p><p><img src="/img/%E5%A4%8D%E5%88%B6%E5%B0%B1%E5%A5%BD.png" alt="steam mods"></p><p><img src="/img/%E4%BF%AE%E6%94%B9.png" alt="修改"></p><p>粘贴到云服务器的  C:\Users\Administrator\Documents\steamcmd\steamapps\common\Don’t Starve Together Dedicated Server\mods  目录下</p><p>实际上只需要复制你开服用的mod就行，但为了日后方便，还是将所有的mod都复制过来比较稳妥，这个过程可能耗时很长，请耐心等待</p><p>完成上述操作之后，将脚本文件中的start和startcave文件复制到<br>C:\Users\Administrator\Documents\steamcmd\steamapps\common\Don’t Starve Together Dedicated Server\bin 目录下并运行</p><p><img src="/img/%E5%AE%8C%E6%88%90%E5%9B%BE.png" alt="完成图"></p><p>运行完毕后，大功告成，在自己电脑上测试，看看能否搜到刚创建的服务器</p><p><img src="/img/%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90.png" alt="大功告成"></p>]]></content>
      
      
      <categories>
          
          <category> 腾讯云 </category>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 饥荒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客帝国代码雨</title>
      <link href="/2021/12/07/Rain/"/>
      <url>/2021/12/07/Rain/</url>
      
        <content type="html"><![CDATA[<h1 id="代码雨"><a href="#代码雨" class="headerlink" title="代码雨"></a>代码雨</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.MemoryImageSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JDialog;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.Timer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rain</span> <span class="keyword">extends</span> <span class="title">JDialog</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> Dimension screenSize;</span><br><span class="line">    <span class="keyword">private</span> JPanel graphicsPanel;</span><br><span class="line">    <span class="comment">//行高,列宽</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> gap = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//存放雨点顶部的位置信息(marginTop)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] posArr;</span><br><span class="line">    <span class="comment">//行数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lines;</span><br><span class="line">    <span class="comment">//列数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> columns;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initComponents();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initComponents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        graphicsPanel = <span class="keyword">new</span> GraphicsPanel();</span><br><span class="line">        add(graphicsPanel, BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">//设置光标不可见</span></span><br><span class="line">        Toolkit defaultToolkit = Toolkit.getDefaultToolkit();</span><br><span class="line">        Image image = defaultToolkit.createImage(<span class="keyword">new</span> MemoryImageSource(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        Cursor invisibleCursor = defaultToolkit.createCustomCursor(image, <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>), <span class="string">&quot;cursor&quot;</span>);</span><br><span class="line">        setCursor(invisibleCursor);</span><br><span class="line">        <span class="comment">//ESC键退出</span></span><br><span class="line">        KeyPressListener keyPressListener = <span class="keyword">new</span> KeyPressListener();</span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(keyPressListener);</span><br><span class="line">        <span class="comment">//this.setAlwaysOnTop(true);</span></span><br><span class="line">        <span class="comment">//去标题栏</span></span><br><span class="line">        <span class="keyword">this</span>.setUndecorated(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//全屏</span></span><br><span class="line">        <span class="keyword">this</span>.getGraphicsConfiguration().getDevice().setFullScreenWindow(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">        screenSize = Toolkit.getDefaultToolkit().getScreenSize();</span><br><span class="line">        lines = screenSize.height / gap;</span><br><span class="line">        columns = screenSize.width / gap;</span><br><span class="line"> </span><br><span class="line">        posArr = <span class="keyword">new</span> <span class="keyword">int</span>[columns + <span class="number">1</span>];</span><br><span class="line">        random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; posArr.length; i++) &#123;</span><br><span class="line">            posArr[i] = random.nextInt(lines);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//每秒10帧</span></span><br><span class="line">        <span class="keyword">new</span> Timer(<span class="number">100</span>, <span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 随机字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">getChr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>) (random.nextInt(<span class="number">94</span>) + <span class="number">33</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        graphicsPanel.repaint();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicsPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">            Graphics2D g2d = (Graphics2D) g;</span><br><span class="line">            g2d.setFont(getFont().deriveFont(Font.BOLD));</span><br><span class="line">            g2d.setColor(Color.BLACK);</span><br><span class="line">            g2d.fillRect(<span class="number">0</span>, <span class="number">0</span>, screenSize.width, screenSize.height);</span><br><span class="line">            <span class="comment">//当前列</span></span><br><span class="line">            <span class="keyword">int</span> currentColumn = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; screenSize.width; x += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> endPos = posArr[currentColumn];</span><br><span class="line">                g2d.setColor(Color.CYAN);</span><br><span class="line">                g2d.drawString(String.valueOf(getChr()), x, endPos * gap);</span><br><span class="line">                <span class="keyword">int</span> cg = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = endPos - <span class="number">15</span>; j &lt; endPos; j++) &#123;</span><br><span class="line">                    <span class="comment">//颜色渐变</span></span><br><span class="line">                    cg += <span class="number">20</span>;</span><br><span class="line">                    <span class="keyword">if</span> (cg &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                        cg = <span class="number">255</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    g2d.setColor(<span class="keyword">new</span> Color(<span class="number">0</span>, cg, <span class="number">0</span>));</span><br><span class="line">                    g2d.drawString(String.valueOf(getChr()), x, j * gap);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//每放完一帧，当前列上雨点的位置随机下移1~5行</span></span><br><span class="line">                posArr[currentColumn] += random.nextInt(<span class="number">5</span>);</span><br><span class="line">                <span class="comment">//当雨点位置超过屏幕高度时，重新产生一个随机位置</span></span><br><span class="line">                <span class="keyword">if</span> (posArr[currentColumn] * gap &gt; getHeight()) &#123;</span><br><span class="line">                    posArr[currentColumn] = random.nextInt(lines);</span><br><span class="line">                &#125;</span><br><span class="line">                currentColumn++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyPressListener</span> <span class="keyword">extends</span> <span class="title">KeyAdapter</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_ESCAPE) &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Rain();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 花里胡哨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末不挂科速成课</title>
      <link href="/2021/11/16/FinalExam/"/>
      <url>/2021/11/16/FinalExam/</url>
      
        <content type="html"><![CDATA[<h2 id="速成课"><a href="#速成课" class="headerlink" title="速成课"></a>速成课</h2><p>资料来源<a class="btn-beautify button--animated blue large" href="https://www.techfens.com/"   title="TechFen's Blog"><i class="far fa-hand-point-right"></i><span>TechFen's Blog</span></a></p><p>这里收录了常见的一些期末考试的科目，更多速成课详情<a class="btn-beautify button--animated pink large" href="https://pan.techfens.com/"   title="戳这里"><i class="far fa-hand-point-right"></i><span>戳这里</span></a><br><img src="/img/%E9%80%9F%E6%88%90%E8%AF%BE.png" alt="速成课"></p><a class="btn-beautify button--animated pink large" href="https://pan.techfens.com/A%20-%20%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80"   title="数学类"><i class="far fa-hand-point-right"></i><span>数学类</span></a><p><img src="/img/%E6%95%B0%E5%AD%A6%E7%B1%BB.png" alt="数学类"></p><a class="btn-beautify button--animated red large" href="https://pan.techfens.com/D%20-%20%E6%9C%BA%E6%A2%B0%E3%80%81%E5%8A%9B%E5%AD%A6%E7%B1%BB"   title="机械力学类"><i class="far fa-hand-point-right"></i><span>机械力学类</span></a><p><img src="/img/%E6%9C%BA%E6%A2%B0%E5%8A%9B%E5%AD%A6%E7%B1%BB.png" alt="机械力学类"></p><a class="btn-beautify button--animated purple large" href="https://pan.techfens.com/C%20-%20%E7%BB%8F%E6%B5%8E%E3%80%81%E7%AE%A1%E7%90%86%E7%B1%BB"   title="经管类"><i class="far fa-hand-point-right"></i><span>经管类</span></a><p><img src="/img/%E7%BB%8F%E7%AE%A1%E7%B1%BB.png" alt="经管类"></p><a class="btn-beautify button--animated orange large" href="https://pan.techfens.com/E%20-%20%E9%80%9A%E4%BF%A1%E3%80%81%E7%94%B5%E6%B0%94%E7%B1%BB"   title="通信电气类"><i class="far fa-hand-point-right"></i><span>通信电气类</span></a><p><img src="/img/%E9%80%9A%E4%BF%A1%E7%94%B5%E6%B0%94%E7%B1%BB.png" alt="通信电气类"></p><a class="btn-beautify button--animated green large" href="https://pan.techfens.com/F%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB"   title="计算机类"><i class="far fa-hand-point-right"></i><span>计算机类</span></a><p><img src="/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB.png" alt="计算机类"></p><a class="btn-beautify button--animated large" href="https://pan.techfens.com/G%20-%20%E5%8C%96%E5%B7%A5%E3%80%81%E5%8C%96%E5%AD%A6%E7%B1%BB"   title="化学类"><i class="far fa-hand-point-right"></i><span>化学类</span></a><p><img src="/img/%E5%8C%96%E5%AD%A6%E7%B1%BB.png" alt="化学类"></p>]]></content>
      
      
      <categories>
          
          <category> 期末不挂科 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法(持续更新中)</title>
      <link href="/2021/11/10/SortMenu/"/>
      <url>/2021/11/10/SortMenu/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>排序算法是《数据结构与算法》中最基本的算法之一。</p><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，</p><p>而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p><p>常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p><p>用一张图概括：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/sort.png" alt="排序算法稳定性图片"></p><h2 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h2><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</p><p>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；</p><p>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 </p><p>希尔排序 线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</p><h2 id="关于稳定性"><a href="#关于稳定性" class="headerlink" title="关于稳定性"></a>关于稳定性</h2><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><p>名词解释：</p><ul><li>n：数据规模</li><li>k：”桶”的个数</li><li>In-place：占用常数内存，不占用额外内存</li><li>Out-place：占用额外内存</li><li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li></ul><hr><hr><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，</p><p>因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，</p><p>它的工作原理是通过构建有序序列，对于未排序数据，</p><p>在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入(折半插入)。</p><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。</p><p>（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。</p><p>由于没有改变两个元素的相对顺序，所以插入排序是稳定的）</p><p><del>跟斗地主一样,左起第一张牌当成有序序列，第二张牌到最后一张当成是无序序列。</del></p><p><del>从头到尾依次扫描未排序的牌，将扫描到的每一张牌插入到有序序列的适当位置。</del></p><h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="插入排序"></p><h3 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//第一张牌有序，所以从第二张牌开始往前比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//把这张牌拿在手里</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="comment">//j=i-1是手牌的前一张，只要还没到最左边的牌，就一直比较下去</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="comment">//如果前面的牌比手牌大，那就把前面的牌往后移</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//j = j + 1;</span></span><br><span class="line"><span class="comment">//arr[j] = temp;</span></span><br><span class="line">arr[++j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序过程及效率"><a href="#排序过程及效率" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png" alt="直接插入排序"></p><hr><hr><h2 id="直接插入排序的优化——折半插入排序"><a href="#直接插入排序的优化——折半插入排序" class="headerlink" title="直接插入排序的优化——折半插入排序"></a>直接插入排序的优化——折半插入排序</h2><p>查找采用折半查找方法，称为二分插入排序或折半插入排序。</p><p>二分插入排序算法的原理和插入排序算法原理一样，都是把要插入的数作为手牌，</p><p>只不过优化了查找要插入位置的算法进行二分，与中间(m=(low+hgih)/2)的数值作比较，</p><p>小则high=m-1，反之low=m+1,一直到low&gt;high,high+1为要插入的位置。</p><p><del>学会这种方法，斗地主插牌就比别人快啦</del></p><h3 id="Java代码实现-1"><a href="#Java代码实现-1" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] binInsertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt;= temp)</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">high++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= high + <span class="number">1</span>; j--) &#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[high] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-1"><a href="#排序过程及效率-1" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png" alt="折半插入排序"></p><hr><hr><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，</p><p>待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。</p><h3 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>将n个元素分成d个组：</p><p>{R[0]  ,R[d],  R[2d], ···  ,R[kd]  }</p><p>{R[1]  ,R[1+d],  R[1+2d], ···  ,R[1+kd] }</p><p>···</p><p>{R[d-1]  ,R[2d-1],  R[3d-1], ···  ,R[(k+1)d-1]}</p><p>相距d个位置的元素分为一组，然后在组内完成排序</p><p>① d=arr.length/2</p><p>② 将排序序列分为d个组，在组内进行直接插入排序</p><p>③ 递减d=d/2，重复②，直到d=0</p><p>由于算法最后一趟对所有元素进行了直接插入排序，所以结果是一定正确的</p><p>由于不同组别可能存在两个或若干个相同的元素，在各自组内直接插入排序之后，</p><p>可能会导致相等元素在排序之后的相对位置发生改变，所以希尔排序是不稳定的。</p><h3 id="动图演示-1"><a href="#动图演示-1" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Sorting_shellsort_anim.gif" alt="希尔排序"></p><h3 id="Java代码实现-2"><a href="#Java代码实现-2" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = arr.length;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = length / <span class="number">2</span>; step &gt;= <span class="number">1</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; length; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i - step;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">                arr[j + step] = arr[j];</span><br><span class="line">                j -= step;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + step] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-2"><a href="#排序过程及效率-2" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.png" alt="希尔排序"></p><hr><hr><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，</p><p>一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p><p>走访数列的工作是重复地进行直到没有再需要交换，</p><p>也就是说该数列已经排序完成。</p><p>这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p><h3 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。</p><p>这步做完后，最后的元素会是最大的数。</p><p>针对所有的元素重复以上的步骤，除了最后一个。</p><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h3 id="动图演示-2"><a href="#动图演示-2" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif" alt="冒泡动图"></p><h3 id="Java代码演示"><a href="#Java代码演示" class="headerlink" title="Java代码演示"></a>Java代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                设定一个标记，若为true，则表示此次循环没有进行交换，</span></span><br><span class="line"><span class="comment">                也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line"><span class="comment">                例如已经顺序排好的数列。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">CreatStuScore.swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-3"><a href="#排序过程及效率-3" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png" alt="冒泡排序"></p><hr><hr><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。</p><p>所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h3 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕。</p><h3 id="动图演示-3"><a href="#动图演示-3" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="选择排序"></p><h3 id="Java代码演示-1"><a href="#Java代码演示-1" class="headerlink" title="Java代码演示"></a>Java代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line"><span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp=arr[min];</span><br><span class="line">arr[min]=arr[i];</span><br><span class="line">arr[i]=arr[min];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-4"><a href="#排序过程及效率-4" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png" alt="选择排序"></p><hr><hr><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。</p><p>该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><h3 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h3><ul><li><p>将序列中待排数字分为若干组，每个数字分为一组</p></li><li><p>将若干组两两合并，保证合并后的组是有序的</p></li><li><p>重复第二步操作直至剩下一组，排序完成</p></li></ul><p><img src="/img/%E5%BD%92%E5%B9%B6%E6%AD%A5%E9%AA%A41.png" alt="算法步骤图1"></p><p><img src="/img/%E5%BD%92%E5%B9%B6%E6%AD%A5%E9%AA%A42.png" alt="算法步骤图2"></p><h3 id="动图演示-4"><a href="#动图演示-4" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif" alt="归并排序"></p><h3 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line"><span class="keyword">int</span>[] temp = Arrays.copyOf(arr, arr.length);</span><br><span class="line"><span class="keyword">if</span> (temp.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (<span class="keyword">int</span>) Math.floor(temp.length / <span class="number">2</span>);</span><br><span class="line"><span class="comment">//分而治之的分</span></span><br><span class="line"><span class="keyword">int</span>[] left = Arrays.copyOfRange(temp, <span class="number">0</span>, mid);</span><br><span class="line"><span class="keyword">int</span>[] right = Arrays.copyOfRange(temp, mid, temp.length);</span><br><span class="line"><span class="comment">//递归调用，将左右子序列继续分为两组，直至每组只有一个元素</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="keyword">return</span> mergeZ(mergeSortZ(left), mergeSortZ(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeZ(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//比较两个子序列中的第一个元素，将较小元素加入到结果序列中</span></span><br><span class="line"><span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//此步操作相当于剔除left序列中的第一个元素，从而诞生新的第一个元素</span></span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一方序列的元素全部加入到结果序列中后，将剩余子序列的元素全部加入到结果序列中</span></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-5"><a href="#排序过程及效率-5" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png" alt="归并排序"></p><hr><hr><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。</p><p>在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，</p><p>快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）</p><p>可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，</p><p>就是快，而且效率高！它是处理大数据最快的排序算法之一了。</p><h3 id="算法步骤-5"><a href="#算法步骤-5" class="headerlink" title="算法步骤"></a>算法步骤</h3><ul><li>选定Pivot中心轴</li><li>将大于Pivot的数字放在Pivot的右边</li><li>将小于Pivot的数字放在Pivot的左边</li><li>分别对左右子序列重复前三步操作</li></ul><h3 id="动图演示-5"><a href="#动图演示-5" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="快速排序"></p><h3 id="Java代码实现-3"><a href="#Java代码实现-3" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSortZ(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R) &#123;</span><br><span class="line"><span class="keyword">if</span> (L &gt;= R)</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"><span class="keyword">int</span> left = L, right = R;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本思想</span></span><br><span class="line"><span class="comment">1.选定Pivot中心轴</span></span><br><span class="line"><span class="comment">2.将大于Pivot的数字放在Pivot的右边</span></span><br><span class="line"><span class="comment">3.将小于Pivot的数字放在Pivot的左边</span></span><br><span class="line"><span class="comment">4.分别对左右子序列重复前三部操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> pivot = arr[left];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">//右下标对应的元素若大于pivot，则不进行操作，右下标自减</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= pivot) &#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表右下标遇到了比pivot小的元素，将该元素放到左边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[left] = arr[right];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴</span></span><br><span class="line"><span class="comment">//左下标对应的元素若小于pivot，则不进行操作，左下标自增</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= pivot) &#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表左下标遇到了比pivot大的元素，将该元素放到右边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[right] = arr[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴 将pivot放在左右下标交汇点</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">arr[left] = pivot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">//递归调用，分别对左右子序列重复进行上述操作</span></span><br><span class="line">quickSortZ(arr, L, right - <span class="number">1</span>);</span><br><span class="line">quickSortZ(arr, right + <span class="number">1</span>, R);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-6"><a href="#排序过程及效率-6" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png" alt="快速排序"></p><hr><hr><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</p><p>堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><p>堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</p><p>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</p><p>堆排序的平均时间复杂度为 Ο(nlogn)。</p><p>本文采用的大顶堆。</p><h3 id="算法步骤-6"><a href="#算法步骤-6" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol><li><p>创建一个堆 H[0 ~ arr.length-1]；</p></li><li><p>把堆首（最大值）和堆尾互换；</p></li><li><p>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</p></li><li><p>重复步骤 2，直到堆的尺寸为 1。</p></li></ol><h3 id="动图演示-6"><a href="#动图演示-6" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif" alt="堆排序动画"></p><h3 id="Java代码实现-4"><a href="#Java代码实现-4" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSortZ(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对传进来的数组拷贝</span></span><br><span class="line"><span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"><span class="comment">//获取传进来的数组的长度</span></span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="comment">//以该数组来建一个堆</span></span><br><span class="line">buildMaxHeapZ(arr, len);</span><br><span class="line"><span class="comment">//将堆尾元素和堆首元素交换，交换到堆尾的元素已经排好序了，所以数组长度/堆长度减一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">swap(arr, <span class="number">0</span>, i);</span><br><span class="line">len--;</span><br><span class="line">heapifyZ(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立大顶堆  因为下标是从0开始 所以其实这里的len/2是最后一个非叶节点或非叶节点的下一个 但是不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeapZ</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapifyZ(arr, i, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 完成将以i对应的非叶节点的数，调整成大顶堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待调整数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i   第一个非叶节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 调整长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapifyZ</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//根节点下标从0开始 双亲节点下标是i 子节点下标是2i+1和2i+2</span></span><br><span class="line"><span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> largest = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子的值比爹大  那就左孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">largest = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有孩子的值比爹大  那就有孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">largest = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大值发生了变化，则可能会产生新的最大值，进行递归调用</span></span><br><span class="line"><span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line"><span class="comment">//将最大值对应的下标作为双亲结点</span></span><br><span class="line">swap(arr, i, largest);</span><br><span class="line"><span class="comment">//递归调用</span></span><br><span class="line">heapifyZ(arr, largest, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序过程及效率-7"><a href="#排序过程及效率-7" class="headerlink" title="排序过程及效率"></a>排序过程及效率</h3><p><img src="/img/%E5%A0%86%E6%8E%92%E5%BA%8F.png" alt="堆排序过程及效率"></p><hr><hr><h2 id="Java完整代码–CreatStuScore类"><a href="#Java完整代码–CreatStuScore类" class="headerlink" title="Java完整代码–CreatStuScore类"></a>Java完整代码–CreatStuScore类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatStuScore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] args;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] scores(<span class="keyword">int</span> count) &#123;</span><br><span class="line">args=<span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; args.length) &#123;</span><br><span class="line">args[i++] = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java完整代码–FinalTest类"><a href="#Java完整代码–FinalTest类" class="headerlink" title="Java完整代码–FinalTest类"></a>Java完整代码–FinalTest类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;直接插入排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.insertSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n直接插入排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.insertSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，直接插入排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BubbleTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;冒泡排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.bubbleSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n冒泡排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.bubbleSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，冒泡插入排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BinInsertSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;折半插入排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.binInsertSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n折半插入排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.binInsertSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，折半插入排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;希尔排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.shellSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n希尔排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.shellSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，希尔排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;选择排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.selectSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n选择排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.selectSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，选择排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;快速排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">Sort.quickSort(arrays, <span class="number">0</span>, arrays.length - <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\n快速排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.quickSortZ(arrays, <span class="number">0</span>, arrays.length - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，快速排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">16</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;归并排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">arrays = Sort.mergeSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n归并排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.mergeSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，归并排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//排序过程</span></span><br><span class="line"><span class="keyword">int</span>[] arrays = CreatStuScore.scores(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;堆排序前:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line">arrays = Sort.heapSort(arrays);</span><br><span class="line">System.out.println(<span class="string">&quot;\n堆排序后:&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arrays));</span><br><span class="line"><span class="comment">//性能测试</span></span><br><span class="line">arrays = CreatStuScore.scores(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Sort.heapSortZ(arrays);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = end - start;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;对&quot;</span> + arrays.length + <span class="string">&quot;个随机数，堆排序耗时&quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><h2 id="Java完整代码–Sort类"><a href="#Java完整代码–Sort类" class="headerlink" title="Java完整代码–Sort类"></a>Java完整代码–Sort类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//第一张牌有序，所以从第二张牌开始往前比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//把这张牌拿在手里</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="comment">//从该牌的左起第一张开始比较，手牌小于左边的牌，则将左边的牌后移</span></span><br><span class="line"><span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//折半插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] binInsertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt;= temp)</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">high++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= high + <span class="number">1</span>; j--) &#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[high] = temp;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> step = length / <span class="number">2</span>; step &gt;= <span class="number">1</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; length; i++) &#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> j = i - step;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + step] = arr[j];</span><br><span class="line">j -= step;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + step] = temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                设定一个标记，若为true，则表示此次循环没有进行交换，</span></span><br><span class="line"><span class="comment">                也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line"><span class="comment">                例如已经顺序排好的数列。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> minPos = i;</span><br><span class="line"><span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[minPos]) &#123;</span><br><span class="line"><span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">minPos = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != minPos) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[minPos];</span><br><span class="line">arr[minPos] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R) &#123;</span><br><span class="line"><span class="keyword">if</span> (L &gt;= R)</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"><span class="keyword">int</span> left = L, right = R;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本思想</span></span><br><span class="line"><span class="comment">1.选定Pivot中心轴</span></span><br><span class="line"><span class="comment">2.将大于Pivot的数字放在Pivot的右边</span></span><br><span class="line"><span class="comment">3.将小于Pivot的数字放在Pivot的左边</span></span><br><span class="line"><span class="comment">4.分别对左右子序列重复前三部操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> pivot = arr[left];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">//右下标对应的元素若大于pivot，则不进行操作，右下标自减</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= pivot) &#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表右下标遇到了比pivot小的元素，将该元素放到左边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[left] = arr[right];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴</span></span><br><span class="line"><span class="comment">//左下标对应的元素若小于pivot，则不进行操作，左下标自增</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= pivot) &#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表左下标遇到了比pivot大的元素，将该元素放到右边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[right] = arr[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴 将pivot放在左右下标交汇点</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">arr[left] = pivot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"><span class="comment">//递归调用，分别对左右子序列重复进行上述操作</span></span><br><span class="line">quickSort(arr, L, right - <span class="number">1</span>);</span><br><span class="line">quickSort(arr, right + <span class="number">1</span>, R);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line"><span class="keyword">int</span>[] temp = Arrays.copyOf(arr, arr.length);</span><br><span class="line"><span class="keyword">if</span> (temp.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (<span class="keyword">int</span>) Math.floor(temp.length / <span class="number">2</span>);</span><br><span class="line"><span class="comment">//分而治之的分</span></span><br><span class="line"><span class="keyword">int</span>[] left = Arrays.copyOfRange(temp, <span class="number">0</span>, mid);</span><br><span class="line"><span class="keyword">int</span>[] right = Arrays.copyOfRange(temp, mid, temp.length);</span><br><span class="line"><span class="comment">//递归调用，将左右子序列继续分为两组，直至每组只有一个元素</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(temp));</span></span><br><span class="line"><span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//比较两个子序列中的第一个元素，将较小元素加入到结果序列中</span></span><br><span class="line"><span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//此步操作相当于剔除left序列中的第一个元素，从而诞生新的第一个元素</span></span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一方序列的元素全部加入到结果序列中后，将剩余子序列的元素全部加入到结果序列中</span></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(result));</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对传进来的数组拷贝</span></span><br><span class="line"><span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"><span class="comment">//获取传进来的数组的长度</span></span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="comment">//以该数组来建一个堆</span></span><br><span class="line">buildMaxHeap(arr, len);</span><br><span class="line"><span class="comment">//将堆尾元素和堆首元素交换，交换到堆尾的元素已经排好序了，所以数组长度/堆长度减一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">swap(arr, <span class="number">0</span>, i);</span><br><span class="line">len--;</span><br><span class="line">heapify(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立大顶堆  因为下标是从0开始 所以其实这里的len/2是最后一个非叶节点或非叶节点的下一个 但是不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapify(arr, i, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 完成将以i对应的非叶节点的数，调整成大顶堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待调整数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i   第一个非叶节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 调整长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//根节点下标从0开始 双亲节点下标是i 子节点下标是2i+1和2i+2</span></span><br><span class="line"><span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> largest = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子的值比爹大  那就左孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">largest = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有孩子的值比爹大  那就有孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">largest = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大值发生了变化，则可能会产生新的最大值，进行递归调用</span></span><br><span class="line"><span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line"><span class="comment">//将最大值对应的下标作为双亲结点</span></span><br><span class="line">swap(arr, i, largest);</span><br><span class="line"><span class="comment">//递归调用</span></span><br><span class="line">heapify(arr, largest, len);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//******************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//第一张牌有序，所以从第二张牌开始往前比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//把这张牌拿在手里</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">j=i-1就是从这张牌的前一张开始比较，</span></span><br><span class="line"><span class="comment">只要还没到最左边的牌，就一直比较下去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="comment">//前面的牌比手牌大，那就把前面的牌往后移</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[++j] = temp;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//折半插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] binInsertSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt;= temp)</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">high++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= high + <span class="number">1</span>; j--) &#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[high] = temp;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> step = length / <span class="number">2</span>; step &gt;= <span class="number">1</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; length; i++) &#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">int</span> j = i - step;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + step] = arr[j];</span><br><span class="line">j -= step;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + step] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                设定一个标记，若为true，则表示此次循环没有进行交换，</span></span><br><span class="line"><span class="comment">                也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line"><span class="comment">                例如已经顺序排好的数列。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line"><span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = arr[min];</span><br><span class="line">arr[min] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSortZ(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R) &#123;</span><br><span class="line"><span class="keyword">if</span> (L &gt;= R)</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"><span class="keyword">int</span> left = L, right = R;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本思想</span></span><br><span class="line"><span class="comment">1.选定Pivot中心轴</span></span><br><span class="line"><span class="comment">2.将大于Pivot的数字放在Pivot的右边</span></span><br><span class="line"><span class="comment">3.将小于Pivot的数字放在Pivot的左边</span></span><br><span class="line"><span class="comment">4.分别对左右子序列重复前三部操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> pivot = arr[left];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">//右下标对应的元素若大于pivot，则不进行操作，右下标自减</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= pivot) &#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表右下标遇到了比pivot小的元素，将该元素放到左边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[left] = arr[right];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴</span></span><br><span class="line"><span class="comment">//左下标对应的元素若小于pivot，则不进行操作，左下标自增</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= pivot) &#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出上面的while循环，代表左下标遇到了比pivot大的元素，将该元素放到右边</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">arr[right] = arr[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右下标 双向奔赴 将pivot放在左右下标交汇点</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">arr[left] = pivot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">//递归调用，分别对左右子序列重复进行上述操作</span></span><br><span class="line">quickSortZ(arr, L, right - <span class="number">1</span>);</span><br><span class="line">quickSortZ(arr, right + <span class="number">1</span>, R);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSortZ(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line"><span class="keyword">int</span>[] temp = Arrays.copyOf(arr, arr.length);</span><br><span class="line"><span class="keyword">if</span> (temp.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (<span class="keyword">int</span>) Math.floor(temp.length / <span class="number">2</span>);</span><br><span class="line"><span class="comment">//分而治之的分</span></span><br><span class="line"><span class="keyword">int</span>[] left = Arrays.copyOfRange(temp, <span class="number">0</span>, mid);</span><br><span class="line"><span class="keyword">int</span>[] right = Arrays.copyOfRange(temp, mid, temp.length);</span><br><span class="line"><span class="comment">//递归调用，将左右子序列继续分为两组，直至每组只有一个元素</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="keyword">return</span> mergeZ(mergeSortZ(left), mergeSortZ(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeZ(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//比较两个子序列中的第一个元素，将较小元素加入到结果序列中</span></span><br><span class="line"><span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//此步操作相当于剔除left序列中的第一个元素，从而诞生新的第一个元素</span></span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一方序列的元素全部加入到结果序列中后，将剩余子序列的元素全部加入到结果序列中</span></span><br><span class="line"><span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = left[<span class="number">0</span>];</span><br><span class="line">left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result[i++] = right[<span class="number">0</span>];</span><br><span class="line">right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSortZ(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对传进来的数组拷贝</span></span><br><span class="line"><span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"><span class="comment">//获取传进来的数组的长度</span></span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="comment">//以该数组来建一个堆</span></span><br><span class="line">buildMaxHeapZ(arr, len);</span><br><span class="line"><span class="comment">//将堆尾元素和堆首元素交换，交换到堆尾的元素已经排好序了，所以数组长度/堆长度减一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">swap(arr, <span class="number">0</span>, i);</span><br><span class="line">len--;</span><br><span class="line">heapifyZ(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立大顶堆  因为下标是从0开始 所以其实这里的len/2是最后一个非叶节点或非叶节点的下一个 但是不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeapZ</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapifyZ(arr, i, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 完成将以i对应的非叶节点的数，调整成大顶堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待调整数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i   第一个非叶节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 调整长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapifyZ</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//根节点下标从0开始 双亲节点下标是i 子节点下标是2i+1和2i+2</span></span><br><span class="line"><span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> largest = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子的值比爹大  那就左孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">largest = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有孩子的值比爹大  那就有孩子当爹</span></span><br><span class="line"><span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">largest = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大值发生了变化，则可能会产生新的最大值，进行递归调用</span></span><br><span class="line"><span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line"><span class="comment">//将最大值对应的下标作为双亲结点</span></span><br><span class="line">swap(arr, i, largest);</span><br><span class="line"><span class="comment">//递归调用</span></span><br><span class="line">heapifyZ(arr, largest, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown</title>
      <link href="/2021/11/10/MarkDown/"/>
      <url>/2021/11/10/MarkDown/</url>
      
        <content type="html"><![CDATA[<h1 id="学了五分钟的MarkDown语法"><a href="#学了五分钟的MarkDown语法" class="headerlink" title="学了五分钟的MarkDown语法"></a>学了五分钟的MarkDown语法</h1><h1 id="以后可能会继续更新"><a href="#以后可能会继续更新" class="headerlink" title="以后可能会继续更新"></a>以后可能会继续更新</h1><p>[在线编译器]<a href="https://dillinger.io/">https://dillinger.io/</a></p><h2 id="1-标题语法"><a href="#1-标题语法" class="headerlink" title="1.标题语法"></a>1.标题语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标题语法</span></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试环节"><a href="#测试环节" class="headerlink" title="测试环节"></a>测试环节</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加粗</span></span><br><span class="line">**我被加粗了**</span><br><span class="line"><span class="comment">// 代码高亮</span></span><br><span class="line">==HIGH LIGHT==</span><br><span class="line"><span class="comment">// 删除线</span></span><br><span class="line">~~我被删除啦~~</span><br><span class="line"><span class="comment">// 斜体</span></span><br><span class="line">*我是斜体字*</span><br></pre></td></tr></table></figure><h3 id="测试环节-1"><a href="#测试环节-1" class="headerlink" title="测试环节"></a>测试环节</h3><p><strong>我被加粗了</strong></p><p>==HIGH LIGHT==</p><p><del>我被删除啦</del></p><p><em>我是斜体字</em></p><h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用语法</span></span><br><span class="line">&gt;作者: Kyle_CyaN</span><br><span class="line">&gt;&gt;作者: Kyle_CyaN</span><br><span class="line">&gt;&gt;&gt;作者: Kyle_CyaN</span><br><span class="line">&gt;&gt;&gt;&gt;作者: Kyle_CyaN</span><br></pre></td></tr></table></figure><h3 id="测试环节-2"><a href="#测试环节-2" class="headerlink" title="测试环节"></a>测试环节</h3><blockquote><p>作者: Kyle_CyaN</p><blockquote><p>作者: Kyle_CyaN</p><blockquote><p>作者: Kyle_CyaN</p><blockquote><p>作者: Kyle_CyaN</p></blockquote></blockquote></blockquote></blockquote><h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分割线1</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">// 分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure><h3 id="测试环节-3"><a href="#测试环节-3" class="headerlink" title="测试环节"></a>测试环节</h3><hr><hr><h2 id="5-图片插入"><a href="#5-图片插入" class="headerlink" title="5.图片插入"></a>5.图片插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在线图片或本地图片</span></span><br><span class="line">![我的图片](photo/me.png)</span><br></pre></td></tr></table></figure><h3 id="测试环节-4"><a href="#测试环节-4" class="headerlink" title="测试环节"></a>测试环节</h3><p><img src="https://img2.baidu.com/it/u=1519358925,3330107491&fm=26&fmt=auto" alt="我的图片"></p><h2 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6.超链接"></a>6.超链接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超链接语法</span></span><br><span class="line">[这里是BILIBILI](https:<span class="comment">//www.bilibili.com/)</span></span><br></pre></td></tr></table></figure><h3 id="测试环节-5"><a href="#测试环节-5" class="headerlink" title="测试环节"></a>测试环节</h3><p><a href="https://www.bilibili.com/">哔哩哔哩</a></p><h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"><span class="comment">// 有序列表</span></span><br><span class="line"><span class="number">1.</span>目录<span class="number">4</span></span><br><span class="line"><span class="number">2.</span>目录<span class="number">5</span></span><br><span class="line"><span class="number">3.</span>目录<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="测试环节-6"><a href="#测试环节-6" class="headerlink" title="测试环节"></a>测试环节</h3><ul><li>目录1</li><li>目录2</li><li>目录3</li></ul><p>1.目录4<br>2.目录5<br>3.目录6</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>做表格当然是用工具啦，毕竟手敲那么累<br><a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables Generator</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/10/hello-world/"/>
      <url>/2021/11/10/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>这是我第一次使用<a href="https://hexo.io/">Hexo</a>框架搭建博客!<br>采用的主题是<a href="https://github.com/jerryc127/hexo-theme-butterfly">ButterFly</a><br>花了我一个晚上才搭建好，可以说是把能踩的坑全都踩了一遍。<br>以后会在这个小破站不定期更新一些学到的新东西。<br>如果想联系我的话，我的邮箱是<a href="mailto:&#67;&#x79;&#x64;&#101;&#114;&#x70;&#117;&#x6e;&#107;&#50;&#x30;&#55;&#x37;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#67;&#x79;&#x64;&#101;&#114;&#x70;&#117;&#x6e;&#107;&#50;&#x30;&#55;&#x37;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a>。</p><h1 id="这里是我的QQ号"><a href="#这里是我的QQ号" class="headerlink" title="这里是我的QQ号"></a>这里是我的QQ号</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowQQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String Ciphertext = <span class="string">&quot;1235689&quot;</span>;</span><br><span class="line">String QQ = <span class="string">&quot;&quot;</span> +</span><br><span class="line">Ciphertext.charAt(<span class="number">0</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">3</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">5</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">4</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">2</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">5</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">3</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">1</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">6</span>) +</span><br><span class="line">Ciphertext.charAt(<span class="number">4</span>);</span><br><span class="line">System.out.println(QQ);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
