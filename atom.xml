<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kyle&#39;s Blog</title>
  
  
  <link href="https://cyborg2077.github.io/atom.xml" rel="self"/>
  
  <link href="https://cyborg2077.github.io/"/>
  <updated>2024-11-24T11:19:48.293Z</updated>
  <id>https://cyborg2077.github.io/</id>
  
  <author>
    <name>Kyle Violet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何DIY一个QQ智能体</title>
    <link href="https://cyborg2077.github.io/2024/11/16/QQAgentDIY/"/>
    <id>https://cyborg2077.github.io/2024/11/16/QQAgentDIY/</id>
    <published>2024-11-16T12:42:30.000Z</published>
    <updated>2024-11-24T11:19:48.293Z</updated>
    
    <content type="html"><![CDATA[<h1>起因</h1><ul><li>故事的起因是这样的，笨蛋楠楠不好好学习，每天到家就躺床上玩手机。需要我每天督促她。于是乎就想看一下QQ机器人相关技术，然后做个定时任务就好了，毕竟懒才是第一生产力，如果让我每天手动发的话，长此以往会累死的。</li></ul><h1>初步调研</h1><h2 id="go-cqhttp">go-cqhttp</h2><div class="tag link"><a class="link-card" title="go-cqhttp" href="https://github.com/Mrs4s/go-cqhttp"><div class="left"><img src="https://github.githubassets.com/favicons/favicon.png"/></div><div class="right"><p class="text">go-cqhttp</p><p class="url">https://github.com/Mrs4s/go-cqhttp</p></div></a></div><blockquote><p>Mrs4s commented on Oct 10, 2023<br>由于QQ官方针对协议库的围追堵截 持续👊🐔 , 不断更新加密方案, 我们已无力继续维护此项目.<br>在未来 sign-server 方案彻底被官方封死之后 go-cqhttp 将无法继续使用.<br>同时NTQQ的出现让我们可以使用官方 完美 实现的协议实现来继续开发Bot, 不再担心由于协议实现不完美而导致被识别.<br>我们建议所有QQBot项目开始做好迁移至无头NTQQ或类似基于官方客户端技术的准备以应对未来的彻底封锁,<br>如果你的 go-cqhttp 还能继续使用, 不建议立即迁移, 但请开始阅读相关文档并做好迁移准备</p><p>推荐项目:</p><del>如果你想在电脑/服务器上部署bot -> https://chronocat.vercel.app/blog/0050</del><del>如果你想在Android 手机/模拟器上部署bot -> https://github.com/linxinrao/Shamrock</del><del>以上项目均为调用官方协议实现</del><p>以上项目均被请喝茶了，只能说有缘再见了.</p><p>相关问题可以在这个issue下讨论</p><p>协议库的时代已经过去, 接下来是Hook官方客户端的时代了, 感谢大家三年来的支持</p><del>其实go-cqhttp项目最初只是想做一个能在路由器上跑的酷Q</del><p>——————————————————————<br>什么是无头NTQQ?</p><p>众所周知, QQ官方最新推出的 NTQQ 客户端使用了 electron 技术, 该技术可以非常方便的跨平台同时使用前端已有的技术栈进行客户端开发.<br>NTQQ 客户端项目分为前后端两个部分, 前端是使用 Web 技术开发的 UI 界面供用户交互，后端使用 nodejs addons 技术包装了一个库来处理客户端逻辑和与服务端通信 (wrapper.node).<br>这个库的作用和 go-cqhttp 非常相似, 所以我们完全可以将前端删除只与这个库交互, 并引出 API 来为我们的Bot服务.<br>从服务端视角来说我们的 Bot 和正常客户端一样, 因为都是通过 wrapper.node 与服务端通信. 并且由于是官方根据内部文档开发的模块, 我们可以说这是一个 完美 的 go-cqhttp.</p><p>优点: 无头模式下相对低的占用.<br>缺点: 可能会受未来QQ更新的影响.</p><p>Shamrock项目是什么原理?</p><p>Shamrock 项目使用 xposed 的 hook 技术来实现远程操作 AndroidQQ 客户端.<br>优点: 不容易受未来更新封堵的影响.<br>缺点: 需要运行一个完整 AndroidOS 环境.</p><p>如果你的服务器资源足够充足, 我个人建议观望并跟进 Shamrock 项目. xposed 是久经考验且生态完善的技术.</p></blockquote><h2 id="mirai">mirai</h2><div class="tag link"><a class="link-card" title="mirai" href="https://github.com/mamoe/mirai"><div class="left"><img src="https://github.githubassets.com/favicons/favicon.png"/></div><div class="right"><p class="text">mirai</p><p class="url">https://github.com/mamoe/mirai</p></div></a></div><ul><li>mirai 是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库。</li><li>乍一看好像还没凉，遂尝试了一番，经过磕磕绊绊之后，虽说可以收发消息，但是相当不稳定，而且还有封号的风险<br><img src="https://s21.ax1x.com/2024/11/16/pA2XQoj.png" alt=""></li><li>一看论坛，也是风中残烛了，遂放弃。</li></ul><h2 id="R-I-P">R.I.P</h2><ul><li>新时代已经没有能承载他们的船了</li></ul><h1>LLOneBot</h1><div class="tag link"><a class="link-card" title="LLOneBot" href="https://github.com/LLOneBot/LLOneBot"><div class="left"><img src="https://github.githubassets.com/favicons/favicon.png"/></div><div class="right"><p class="text">LLOneBot</p><p class="url">https://github.com/LLOneBot/LLOneBot</p></div></a></div><ul><li>由于在go-cqhttp中，作者提到了QQ最新退出的NTQQ客户端，而我很久之前就已经装过LiteLoaderQQNT这个插件了。那么肯定有基于这个新客户端开发的机器人技术吧，然后就找到了这个项目，真是相见恨晚啊，前面两个旧时代的残党我花了一个晚上捋清了来龙去脉，浪费了宝贵的8小时打游戏时间，下次我要更快更强。</li><li>装好插件配置好后，我们仅仅需要修改这几个地方</li></ul><p><img src="https://s21.ax1x.com/2024/11/17/pARPvAf.png" alt=""></p><h2 id="收发消息">收发消息</h2><ul><li>这个是LLOneBot给出的收发消息的示例</li></ul><div class="tabs" id="发送消息"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#发送消息-1">发送消息</button></li><li class="tab"><button type="button" data-href="#发送消息-2">接受消息</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="发送消息-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>(<span class="params">request: Request</span>):</span><br><span class="line">    data = <span class="keyword">await</span> request.json()  <span class="comment"># 获取事件数据</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(app, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><ul><li>运行这个 Python 代码后，会在本地 8080 端口启动一个 HTTP 服务</li><li>当有事件发生时，LLOneBot 会向 <a href="http://localhost:8080/">http://localhost:8080/</a> 发送 POST JSON 请求，具体事件数据可以查看 事件</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="发送消息-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.post(<span class="string">&#x27;http://localhost:3000/send_private_msg&#x27;</span>, json=&#123;</span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span>: <span class="number">123456</span>,</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span>: [&#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>其中 send_private_msg 是 OneBot V11 的 发送私聊消息 API，具体 API 可以查看 API 文档</li><li>user_id 是 QQ 号，message 是消息内容</li><li>这里以文本消息格式为例，type 表示消息类型，type: text 表示文本消息，data 是消息内容，text 表示文本内容</li><li>更多的消息内容的格式可以查看 消息类型</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>有了最最基础的收发消息的能力了，剩下的就好说了，接收楠楠的消息，判断其意图，如果是已经下班到家，那么向延迟队列中插入一条提醒学习的任务，2小时后触发即可。对于意图判断，可以接入大模型来实现，同时大模型也会给出更温馨的回答（岂可修，那楠楠到底是会更喜欢AI一点还是更喜欢我一点）。</li></ul><h2 id="接入大模型">接入大模型</h2><ul><li>既然已经可以收发消息了，那么剩下的就是接入大模型API，温馨提醒一下楠楠该学习啦。</li></ul><div class="tabs" id="代码实现"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码实现-1">main.py</button></li><li class="tab"><button type="button" data-href="#代码实现-2">models.py</button></li><li class="tab"><button type="button" data-href="#代码实现-3">logging_config.py</button></li><li class="tab"><button type="button" data-href="#代码实现-4">config.yaml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码实现-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> logging_config <span class="keyword">import</span> setup_logging</span><br><span class="line"></span><br><span class="line">setup_logging()</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_config</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;config.yaml&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">return</span> yaml.safe_load(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_llm</span>(<span class="params">api_key</span>):</span><br><span class="line">    client = OpenAI(</span><br><span class="line">        api_key=api_key,</span><br><span class="line">        base_url=<span class="string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">config = load_config()</span><br><span class="line">llm = init_llm(api_key=config[<span class="string">&#x27;openai&#x27;</span>][<span class="string">&#x27;api_key&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>(<span class="params">request: Request</span>):</span><br><span class="line">    data = <span class="keyword">await</span> request.json()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg_obj = Msg.parse_obj(data)</span><br><span class="line">        qq = msg_obj.user_id</span><br><span class="line">        logger.info(<span class="string">f&quot;QQ:<span class="subst">&#123;qq&#125;</span>，Nickname -- <span class="subst">&#123;msg_obj.sender.nickname&#125;</span>：<span class="subst">&#123;msg_obj.raw_message&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> qq == config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;qq&#x27;</span>]:</span><br><span class="line">            logger.info(<span class="string">&quot;Received a message from girl friend&quot;</span>)</span><br><span class="line">            answer = llm_answer(msg_obj.raw_message, llm, config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;system_prompt&#x27;</span>])</span><br><span class="line">            send_message(qq, answer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        logger.error(<span class="string">f&quot;data parse error:<span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">llm_answer</span>(<span class="params">question, client, prompt</span>):</span><br><span class="line">    completion = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;qwen-max&quot;</span>,</span><br><span class="line">        messages=[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;content&#x27;</span>: prompt</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;楠楠对你说：&#x27;</span> + question&#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    content = completion.choices[<span class="number">0</span>].message.content</span><br><span class="line">    logging.info(<span class="string">f&#x27;LLM Response:<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">qq, message</span>):</span><br><span class="line">    url = config[<span class="string">&#x27;send_msg_url&#x27;</span>]</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: qq,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;text&quot;</span>: message</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=json.dumps(data))</span><br><span class="line">    logger.info(<span class="string">f&quot;send message to <span class="subst">&#123;qq&#125;</span> result:<span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(app, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码实现-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sender</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    user_id: <span class="built_in">int</span></span><br><span class="line">    nickname: <span class="built_in">str</span></span><br><span class="line">    card: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageContent</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">str</span></span><br><span class="line">    data: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Msg</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    self_id: <span class="built_in">int</span></span><br><span class="line">    user_id: <span class="built_in">int</span></span><br><span class="line">    time: <span class="built_in">int</span></span><br><span class="line">    message_id: <span class="built_in">int</span></span><br><span class="line">    real_id: <span class="built_in">int</span></span><br><span class="line">    message_seq: <span class="built_in">int</span></span><br><span class="line">    message_type: <span class="built_in">str</span></span><br><span class="line">    sender: Sender</span><br><span class="line">    raw_message: <span class="built_in">str</span></span><br><span class="line">    font: <span class="built_in">int</span></span><br><span class="line">    sub_type: <span class="built_in">str</span></span><br><span class="line">    message: <span class="type">List</span>[MessageContent]</span><br><span class="line">    message_format: <span class="built_in">str</span></span><br><span class="line">    post_type: <span class="built_in">str</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码实现-3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_logging</span>():</span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;</span>,</span><br><span class="line">        datefmt=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,</span><br><span class="line">        handlers=[</span><br><span class="line">            logging.FileHandler(<span class="string">&quot;app.log&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>),</span><br><span class="line">            logging.StreamHandler(),</span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码实现-4"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">send_msg_url:</span> <span class="string">http://localhost:3000/send_private_msg</span>        <span class="comment"># 发送消息的接口</span></span><br><span class="line"><span class="attr">openai:</span></span><br><span class="line">  <span class="attr">api_key:</span> <span class="string">YOUR_API_KEY</span>                                     <span class="comment"># 我这里接入的是阿里系的通义千问，提供对应的API_KEY即可</span></span><br><span class="line"></span><br><span class="line"><span class="attr">girl_friend:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">楠楠</span>                                                <span class="comment"># 设置称呼，可以让AI以这个称呼她</span></span><br><span class="line">  <span class="attr">qq:</span> <span class="string">XXX</span>                                                   <span class="comment"># 设置QQ号</span></span><br><span class="line">  <span class="attr">system_prompt:</span> <span class="string">YOUR_SYSTEM_PROMPT</span>                         <span class="comment"># 为智能体初始化的prompt</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="初步效果">初步效果</h3><p><img src="https://s21.ax1x.com/2024/11/17/pARuo6K.png" alt=""></p><h2 id="延迟队列与-Function-Call-实现定时提醒">延迟队列与 Function Call 实现定时提醒</h2><ul><li>目标：期望的效果是，对它说一句话，例如“半小时后提醒我去洗澡”，希望能理解语义，并且在对应的时间后向目标发送消息。</li><li>那么在xx时间后向特定目标发送这个消息，可以用延迟队列来实现，等下我手写一个延迟队列出来就好了。</li><li>难点主要是在于，如何让大模型理解我的语意，来调用添加延迟队列任务的方法，这个可以用function call来实现。</li></ul><h3 id="手写一个延迟队列">手写一个延迟队列</h3><ol><li><p>延迟队列的概念</p><ul><li>延迟队列是一种特殊的队列，它将任务按指定的延迟时间存储，任务在指定时间到达后才会被执行。例如，你可以设置一个任务，让它在一分钟后执行，而在这段时间内，它会处于等待状态。延迟队列常用于需要定时执行的任务，比如定时提醒、定时清理等。</li></ul></li><li><p>底层数据结构</p><ul><li>在实现延迟队列时，关键是如何高效地管理和调度任务。可以使用多种数据结构，常见的有：<ul><li>栈：不适合延迟队列，栈是后进先出，难以实现按时间顺序执行。</li><li>队列：队列适合按顺序执行任务，但如果任务的执行时间不同，队列无法高效地处理优先级。</li><li>堆：最合适的选择。堆，特别是最小堆，可以保证延迟时间最短的任务排在队列的最前面。</li></ul></li></ul></li><li><p>为什么选择堆？</p><ul><li>堆是一个完全二叉树，具有以下优点：<ol><li>最小堆：每个父节点的值都不大于其子节点的值。最小堆根节点存储的是当前队列中延迟时间最短的任务。</li><li>操作效率：插入和删除操作时间复杂度为O(log n)，因此堆非常适合用来高效地管理延迟队列。</li></ol></li></ul></li><li><p>如何实现？</p><ul><li>每个任务都会被分配一个延迟时间（即任务的执行时间）。</li><li>使用最小堆来存储这些任务，任务按延迟时间从小到大排列。</li><li>任务的执行顺序是从堆顶开始的，即最短延迟时间的任务最先执行。</li><li>示例：假设有三个任务，它们的延迟时间分别是 10 分钟、1 分钟和5 分钟。最小堆会保证 1 分钟的任务在最前面，接着是 5 分钟的任务，最后是 10 分钟的任务。</li></ul></li><li><p>工作原理</p><ul><li>任务加入队列：<ul><li>每次添加任务时，我们将任务与其延迟时间一同插入堆中。堆会自动将任务按延迟时间排序，使得最短延迟的任务始终位于堆顶。</li></ul></li><li>任务执行：<ul><li>使用一个循环持续监听堆顶任务的延迟时间。</li><li>每次循环检查堆顶任务的延迟时间是否到期（即当前时间是否超过任务的执行时间）。</li><li>如果任务未到期，程序就会休眠一段时间，再次检查。如果任务已经到期，则从堆中取出任务并执行。</li></ul></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DelayQueue</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.queue = []</span><br><span class="line">        self.lock = threading.Lock()</span><br><span class="line">        self.condition = threading.Condition(self.lock)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_delay_task</span>(<span class="params">self, delay_msg, delay_time</span>):</span><br><span class="line">        execute_time = time.time() + delay_time</span><br><span class="line">        <span class="keyword">with</span> self.condition:</span><br><span class="line">            heapq.heappush(self.queue, (execute_time, delay_msg))</span><br><span class="line">            self.condition.notify()</span><br><span class="line">        logger.info(<span class="string">f&#x27;添加延迟队列任务: <span class="subst">&#123;delay_msg&#125;</span>, 将于 <span class="subst">&#123;delay_time&#125;</span> 秒后执行.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_task</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> self.condition:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">if</span> self.queue:</span><br><span class="line">                    execute_time, task = self.queue[<span class="number">0</span>]</span><br><span class="line">                    current_time = time.time()</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> current_time &gt;= execute_time:</span><br><span class="line">                        heapq.heappop(self.queue)</span><br><span class="line">                        <span class="keyword">return</span> task</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        self.condition.wait(timeout=execute_time - current_time)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.condition.wait()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_worker</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">worker</span>():</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    task = self.get_task()</span><br><span class="line">                    logger.info(</span><br><span class="line">                        <span class="string">f&#x27;Executing task: <span class="subst">&#123;task&#125;</span> at <span class="subst">&#123;time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())&#125;</span>&#x27;</span>)</span><br><span class="line">                    answer = llm_answer_delay_msg(task, [], llm, config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;system_prompt&#x27;</span>])</span><br><span class="line">                    send_message(config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;qq&#x27;</span>], answer, config[<span class="string">&#x27;send_msg_url&#x27;</span>])</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logger.error(<span class="string">f&quot;Worker encountered an error: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        threading.Thread(target=worker, daemon=<span class="literal">True</span>, name=<span class="string">&quot;DelayQueueWorker&quot;</span>).start()</span><br></pre></td></tr></table></figure><h3 id="Function-Call">Function Call</h3><ul><li><code>Function Call</code> 是一种机制，通过大语言模型来决定是否触发某些预定义的功能。与传统的 <code>API</code> 调用不同，<code>Function Call</code> 允许模型根据上下文和用户输入动态判断是否需要执行某些操作。</li><li>在本次应用中，<code>Function Call</code> 主要用于根据用户的自然语言输入，决定是否需要将任务添加到延迟队列中，并指定延迟的时间。</li></ul><div class="tabs" id="function-call"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#function-call-1">function_definitions</button></li><li class="tab"><button type="button" data-href="#function-call-2">routers</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="function-call-1"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function_definitions = <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;add_delay_task&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;将任务添加到延迟队列。&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;delay_msg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;延迟任务的消息内容&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delay_time&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;延迟时间，单位是秒&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;delay_msg&quot;</span><span class="punctuation">,</span> <span class="string">&quot;delay_time&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li>在这个示例中，我们定义了一个名为 add_delay_task 的函数，表示将任务添加到延迟队列。该函数有两个参数：<ul><li>delay_msg：任务的消息内容，类型为字符串。</li><li>delay_time：延迟的时间，单位为秒，类型为整数。</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="function-call-2"><ol><li><p>调用大语言模型进行消息处理</p><ul><li>我们将利用大语言模型来处理用户的输入消息，并判断是否需要调用 <code>add_delay_task</code> 函数。模型根据自然语言的上下文来决定是否调用延迟任务功能。</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">response = LLM_CLIENT.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;qwen-plus&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一位智能助手，帮助解析自然语言任务并添加到延迟队列，仅仅当明确出现时间并且需要判断是否有需要提醒的意愿时，才需要调用。例如：‘十分钟后提醒我去洗澡’。&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;女朋友说：<span class="subst">&#123;msg&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    functions=function_definitions,</span><br><span class="line">    function_call=<span class="string">&quot;auto&quot;</span>  <span class="comment"># 让模型决定是否调用功能</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>其中<code>function_call=&quot;auto&quot;</code> 让模型自动判断是否需要调用功能，而不需要我们手动指定。</li></ul></li><li><p>处理模型响应结果</p><ul><li>当模型处理完用户消息后，它会返回一个 <code>response</code> 对象，其中包含了模型的回复以及是否需要调用某个函数。如果模型决定调用 <code>add_delay_task</code> 函数，它会在 <code>response</code> 中返回 <code>function_call</code>，包含了要调用的函数名和相应的参数。</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> response.choices[<span class="number">0</span>].message.function_call:</span><br><span class="line">    func_name = response.choices[<span class="number">0</span>].message.function_call.name</span><br><span class="line">    arguments = json.loads(response.choices[<span class="number">0</span>].message.function_call.arguments)</span><br></pre></td></tr></table></figure></li><li><p>解析并调用函数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> func_name == <span class="string">&quot;add_delay_task&quot;</span>:</span><br><span class="line">    delay_queue.add_delay_task(**arguments)</span><br></pre></td></tr></table></figure></li><li><p>整体示例</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>(<span class="params">request: Request</span>):</span><br><span class="line">    data = <span class="keyword">await</span> request.json()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg_obj = Msg.parse_obj(data)</span><br><span class="line">        qq = msg_obj.user_id</span><br><span class="line">        logger.info(<span class="string">f&quot;QQ:<span class="subst">&#123;qq&#125;</span>，Nickname -- <span class="subst">&#123;msg_obj.sender.nickname&#125;</span>：<span class="subst">&#123;msg_obj.raw_message&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> qq <span class="keyword">not</span> <span class="keyword">in</span> message_queue_cache:</span><br><span class="line">            message_queue_cache[qq] = deque(maxlen=MAX_QUEUE_SIZE)</span><br><span class="line">        <span class="keyword">if</span> qq == config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;qq&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> qq <span class="keyword">not</span> <span class="keyword">in</span> message_queue_cache:</span><br><span class="line">                message_queue_cache[qq] = deque(maxlen=MAX_QUEUE_SIZE)</span><br><span class="line">            msg = msg_obj.raw_message</span><br><span class="line">            message_queue_cache[qq].append(&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;message&quot;</span>: msg&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用大模型解析消息</span></span><br><span class="line">            response = LLM_CLIENT.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;qwen-plus&quot;</span>,</span><br><span class="line">                messages=[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一位智能助手，帮助解析自然语言任务并添加到延迟队列，仅仅当明确出现时间并且需要判断是否有需要提醒的意愿时，才需要调用。例如：‘十分钟后提醒我去洗澡’。&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;女朋友说：<span class="subst">&#123;msg&#125;</span>&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                functions=function_definitions,</span><br><span class="line">                function_call=<span class="string">&quot;auto&quot;</span>  <span class="comment"># 让模型决定是否调用功能</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果模型调用了 Function</span></span><br><span class="line">            <span class="keyword">if</span> response.choices[<span class="number">0</span>].message.function_call:</span><br><span class="line">                func_name = response.choices[<span class="number">0</span>].message.function_call.name</span><br><span class="line">                arguments = json.loads(response.choices[<span class="number">0</span>].message.function_call.arguments)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> func_name == <span class="string">&quot;add_delay_task&quot;</span>:</span><br><span class="line">                    <span class="comment"># 执行了 add_delay_task 方法</span></span><br><span class="line">                    delay_queue.add_delay_task(**arguments)</span><br><span class="line">                    <span class="comment"># 生成一个立即回复</span></span><br><span class="line">                    answer = llm_received_delay_msg(msg, <span class="built_in">list</span>(message_queue_cache[qq]), llm,</span><br><span class="line">                                        config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;system_prompt&#x27;</span>],</span><br><span class="line">                                        config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">                    message_queue_cache[qq].append(&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;llm&quot;</span>, <span class="string">&quot;message&quot;</span>: answer&#125;)</span><br><span class="line">                    send_message(qq, answer, config[<span class="string">&#x27;send_msg_url&#x27;</span>])</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 没有调用Function，生成普通回复</span></span><br><span class="line">            answer = llm_answer(msg, <span class="built_in">list</span>(message_queue_cache[qq]), llm,</span><br><span class="line">                                config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;system_prompt&#x27;</span>],</span><br><span class="line">                                config[<span class="string">&#x27;girl_friend&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">            message_queue_cache[qq].append(&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;llm&quot;</span>, <span class="string">&quot;message&quot;</span>: answer&#125;)</span><br><span class="line">            send_message(qq, answer, config[<span class="string">&#x27;send_msg_url&#x27;</span>])</span><br><span class="line">            logger.info(<span class="string">f&quot;Queue for <span class="subst">&#123;qq&#125;</span>: cache message:<span class="subst">&#123;<span class="built_in">list</span>(message_queue_cache[qq])&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;data parse error:<span class="subst">&#123;data&#125;</span>, error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        logger.error(<span class="string">f&quot;Stack trace: <span class="subst">&#123;traceback.format_exc()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>结语</h1><ul><li>既然都看到这里了，不妨给这个项目点个Star吧，多谢！</li></ul><div class="tag link"><a class="link-card" title="NanBot" href="https://github.com/Cyborg2077/NanBot"><div class="left"><img src="https://github.githubassets.com/favicons/favicon.png"/></div><div class="right"><p class="text">NanBot</p><p class="url">https://github.com/Cyborg2077/NanBot</p></div></a></div>]]></content>
    
    
    <summary type="html">初衷其实是给楠楠做个每日提醒机器人的，结果越走越偏...</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="LLM" scheme="https://cyborg2077.github.io/tags/LLM/"/>
    
  </entry>
  
  <entry>
    <title>反编译jar包破解ASPOSE</title>
    <link href="https://cyborg2077.github.io/2024/10/10/CrackAsposeHTML/"/>
    <id>https://cyborg2077.github.io/2024/10/10/CrackAsposeHTML/</id>
    <published>2024-10-10T11:48:09.000Z</published>
    <updated>2024-10-13T06:35:59.626Z</updated>
    
    <content type="html"><![CDATA[<h1>准备工作</h1><ol><li>下载原始jar包：<a href="https://releases.aspose.com/html/java/22-8/">aspose-html-22.8-jdk11.jar</a></li><li>准备反编译工具，这里推荐使用<a href="https://github.com/java-decompiler/jd-gui/tags">jd-gui</a>或者<a href="https://github.com/skylot/jadx/tags">jadx</a>。</li></ol><h1>破解思路</h1><ul><li>Aspose 系列产品主要依赖许可证文件（license.xml）的注册来工作。首先，让我们看看 Aspose 是如何注册许可证的：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">InputStream is;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    is = Files.newInputStream(Paths.get(<span class="string">&quot;C:\\xxx\\license.xml&quot;</span>));</span><br><span class="line">    <span class="type">License</span> <span class="variable">license</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">License</span>();</span><br><span class="line">    license.setLicense(is);</span><br><span class="line">    is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>license.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">License</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Products</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Product</span>&gt;</span>Aspose.Total for Java<span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Product</span>&gt;</span>Aspose.Words for Java<span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Products</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditionType</span>&gt;</span>Enterprise<span class="tag">&lt;/<span class="name">EditionType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SubscriptionExpiry</span>&gt;</span>20991231<span class="tag">&lt;/<span class="name">SubscriptionExpiry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LicenseExpiry</span>&gt;</span>20991231<span class="tag">&lt;/<span class="name">LicenseExpiry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SerialNumber</span>&gt;</span>8bfe198c-7f0c-4ef8-8ff0-acc3237bf0d7<span class="tag">&lt;/<span class="name">SerialNumber</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Signature</span>&gt;</span></span><br><span class="line">        sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Signature</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">License</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>破解的思路很简单，就是查看 <code>setLicense</code> 方法中实际做了哪些操作，然后对源码进行修改。我们使用 <code>JD-GUI</code> 反编译 jar 包，找到 <code>License</code> 类，位于 <code>com.aspose.html</code> 包下。<br><img src="https://s21.ax1x.com/2024/10/10/pAJoM1s.png" alt=""></p></li><li><p>我们可以看到有两个 <code>setLicense</code> 方法，而代码中调用的是第二种形式。<br><img src="https://s21.ax1x.com/2024/10/10/pAJo3n0.png" alt=""></p></li><li><p>这里使用了传入的文件流，我们可以重点查看z16调用的m1方法：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z16.m1(byteArrayInputStream);</span><br></pre></td></tr></table></figure><ul><li><p>我们进入 z16 类，逐步查看里面的实现，找到一个可疑的方法。<br><img src="https://s21.ax1x.com/2024/10/13/pAYXhZ9.png" alt=""></p></li><li><p>在这段代码中，m1 方法的主要功能是验证许可文件的签名，以确保文件的合法性和未被篡改。</p><ol><li>获取许可类型：</li></ol><ul><li>通过 switch 语句，根据许可的类型（如 “Professional” 或 “Enterprise”）进行区分，以确定许可文件的类型。</li></ul><ol start="2"><li>处理节点数据：</li></ol><ul><li>将传入的 XML Node 数据转化为字符串并以 UTF-16LE 编码转换为字节数组 (arrayOfByte1)。</li><li>从第二个节点 paramNode2 中提取 Base64 编码的签名，并将其解码为字节数组 (arrayOfByte2)。</li></ul><ol start="3"><li>选择签名算法：</li></ol><ul><li>根据许可文件的安全要求，选择使用 SHA1withRSA 或 SHA256withRSA 作为签名算法。如果系统启用了 FIPS 安全模式，则需要使用 FIPS 认证的提供程序 (m186)。</li></ul><ol start="4"><li>公钥选择：</li></ol><ul><li>arrayOfString1 和 arrayOfString2 数组中存储了多个可能的公钥或公钥片段，通过索引选择合适的公钥。</li><li>使用 m5 方法从字符串中生成公钥 (PublicKey)。</li></ul><ol start="5"><li>签名验证：</li></ol><ul><li>使用 initVerify 方法初始化公钥验证。</li><li>调用 update 方法传入已编码的数据字节数组 (arrayOfByte1)，然后使用 verify 方法验证 Base64 解码后的签名 (arrayOfByte2) 是否匹配。</li></ul><ol start="6"><li>返回结果：</li></ol><ul><li>验证成功后返回许可状态 paramz3，如果验证失败，则抛出异常并返回失败状态 (z3.m205)。</li></ul></li><li><p>那么破解的思路非常简单：直接让这个方法返回 paramz3 就行了。</p></li></ul><h1>修改字节码文件</h1><ul><li>接下来，我们使用 <code>Javassist</code> 修改字节码文件。首先添加依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.28.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们只需要需要修改 <code>z16</code> 类中的 <code>m1(Node node, Node node2, z3 z3Var)</code> 方法，让它直接返回 paramz3。修改的代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">jarPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\html\\aspose-html-22.8-jdk11.jar&quot;</span>;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    classPool.insertClassPath(jarPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// z16类里的m1方法，同时三个参数类型分别是Node, Node, z3，这个z3我找了一下，是z16里的一个枚举类</span></span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;com.aspose.html.z16&quot;</span>);</span><br><span class="line">    CtClass[] paramTypes = <span class="keyword">new</span> <span class="title class_">CtClass</span>[<span class="number">3</span>];</span><br><span class="line">    paramTypes[<span class="number">0</span>] = classPool.get(<span class="string">&quot;org.w3c.dom.Node&quot;</span>);</span><br><span class="line">    paramTypes[<span class="number">1</span>] = classPool.get(<span class="string">&quot;org.w3c.dom.Node&quot;</span>);</span><br><span class="line">    paramTypes[<span class="number">2</span>] = classPool.get(<span class="string">&quot;com.aspose.html.z16f$z3&quot;</span>);</span><br><span class="line">    <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;m1&quot;</span>, paramTypes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改方法体，使其直接返回第三个参数</span></span><br><span class="line">    ctMethod.setBody(<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    return $3;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ctClass.writeFile(<span class="string">&quot;D:\\html\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Modification completed successfully.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译执行之后会生成一个.class文件，我们把这个.class文件替换到原来的jar包中，并且删除jar包中原本的.RSA和.SF文件，使用mvn install安装一下这个jar包就可以调用了。</li></ul><h1>注意事项</h1><ul><li>ASPOSE.SLIDE、ASPOSE.WORDS等其他产品，破解思路基本都是一样的，都是看setLicense方法的实现，然后修改源码。</li><li>破解版的 jar 包可能存在后台向外部服务器发送数据的风险，因此本文仅限于学习研究，不涉及商业用途。请勿将其用于非法活动。<br><img src="https://s21.ax1x.com/2024/10/13/pAYXJ8f.png" alt=""></li></ul><h1>怎么偷偷用？</h1><ul><li>且听下回分解，这周就休一天，歇了</li></ul>]]></content>
    
    
    <summary type="html">破解版本为aspose-html-22.8-jdk11.jar</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="逆向" scheme="https://cyborg2077.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>基于模板模式简化代码开发</title>
    <link href="https://cyborg2077.github.io/2024/10/06/SimplifyCodeByTemplateMode/"/>
    <id>https://cyborg2077.github.io/2024/10/06/SimplifyCodeByTemplateMode/</id>
    <published>2024-10-06T05:03:58.000Z</published>
    <updated>2024-10-06T06:08:01.749Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>在软件开发中，往往会遇到多个功能模块存在重复的流程或逻辑，但它们的业务细节又有所不同。为避免代码冗余，提升代码的复用性和可维护性，设计模式等方法提供了很好的解决方案。通过识别和提取通用逻辑，开发者可以将相似的代码抽象为更加灵活和扩展性强的结构，适用于不同场景的需求。</li><li>本文将展示如何从重复的业务代码中提取共性，逐步优化并提升代码的可维护性与灵活性，最终形成一个更加通用、扩展性强的解决方案。</li><li>不必关心我这里的业务逻辑，仅仅关心模板的提取。</li></ul><h1>原始代码</h1><ul><li>在实际项目中，我遇到的场景是不同的功能模块具有相似的处理流程。例如，在生成各种文档时，每种文档的生成逻辑各自独立，但处理文件输出和响应的部分却高度重复。如下所示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/generateReferenceReview&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateReferenceReview</span><span class="params">(String json, String orderId, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 这部分内容是文档的生成逻辑</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">diskPath</span> <span class="operator">=</span> orderConsumerService.generateReferenceReview(JSONObject.parseObject(json));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这部分内容是重复的</span></span><br><span class="line">    CommonUtil.setContentType(response, diskPath);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> +</span><br><span class="line">            java.net.URLEncoder.encode(FilenameUtils.getName(diskPath), <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    FileUtils.copyFile(<span class="keyword">new</span> <span class="title class_">File</span>(diskPath), outputStream);</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/generatePPT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generatePPT</span><span class="params">(String json, String orderId, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">diskPath</span> <span class="operator">=</span> orderConsumerService.generatePPT(JSONObject.parseObject(json), orderId);</span><br><span class="line">    </span><br><span class="line">    CommonUtil.setContentType(response, diskPath);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> +</span><br><span class="line">            java.net.URLEncoder.encode(FilenameUtils.getName(diskPath), <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    FileUtils.copyFile(<span class="keyword">new</span> <span class="title class_">File</span>(diskPath), outputStream);</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在这段代码中，尽管 <code>generateReferenceReview</code> 和 <code>generatePPT</code> 方法在业务逻辑上不同，但文件的处理和响应逻辑是完全一致的。显然，这种重复的代码增加了维护成本，也违背了 DRY（Don’t Repeat Yourself）原则。因此，首先我们可以通过提取公共代码来减少冗余。</li></ul><h1>优化代码</h1><ul><li>通过将重复的响应逻辑抽象为一个通用方法，可以减少代码冗余，提升可读性：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/generateReferenceReview&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateReferenceReview</span><span class="params">(String json, String orderId, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">diskPath</span> <span class="operator">=</span> orderConsumerService.generateReferenceReview(JSONObject.parseObject(json));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 但是这里还是重复的，只不过变成了一行调用，治标不治本</span></span><br><span class="line">    handleFileResponse(response, diskPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/generatePPT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generatePPT</span><span class="params">(String json, String orderId, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">diskPath</span> <span class="operator">=</span> orderConsumerService.generatePPT(JSONObject.parseObject(json), orderId);</span><br><span class="line">    handleFileResponse(response, diskPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleFileResponse</span><span class="params">(HttpServletResponse response, String diskPath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    CommonUtil.setContentType(response, diskPath);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> +</span><br><span class="line">            java.net.URLEncoder.encode(FilenameUtils.getName(diskPath), <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    FileUtils.copyFile(<span class="keyword">new</span> <span class="title class_">File</span>(diskPath), outputStream);</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>使用模板模式简化</h1><ul><li>为了提升代码复用性和扩展性，可以使用模板方法模式，将业务逻辑和通用的流程处理分离开来。我们定义一个执行器类 <code>DocGenerateExecutor</code> 来封装通用的流程，业务逻辑则通过函数式接口传递给执行器。这样可以在不同场景下复用相同的流程，且保证扩展性。</li></ul><div class="tabs" id="封装模板模式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#封装模板模式-1">DocGenerateExecutor</button></li><li class="tab"><button type="button" data-href="#封装模板模式-2">DocController</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="封装模板模式-1"><ul><li>通过模板方法模式，将业务逻辑与通用的流程代码解耦。首先，定义一个通用的任务执行器 <code>DocGenerateExecutor</code> 类，它负责执行具体业务逻辑并处理通用的后续逻辑：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DocGenerateExecutor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DocGenerateFun</span> &#123;</span><br><span class="line">        String <span class="title function_">executor</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateDoc</span><span class="params">(DocGenerateFun fun, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">diskPath</span> <span class="operator">=</span> fun.executor();</span><br><span class="line">        CommonUtil.setContentType(response, diskPath);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> +</span><br><span class="line">                java.net.URLEncoder.encode(FilenameUtils.getName(diskPath), <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        FileUtils.copyFile(<span class="keyword">new</span> <span class="title class_">File</span>(diskPath), outputStream);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="封装模板模式-2"><ul><li>业务逻辑则通过 <code>DocGenerateFun</code> 接口传递给 <code>DocGenerateExecutor</code>，不同的任务只需实现其业务逻辑，无需关心通用流程：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/doc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DocController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DocGenerateExecutor docGenerateExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/generateOpenReport&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateOpenReport</span><span class="params">(String json, String orderId, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">OpenReport</span> <span class="variable">openReport</span> <span class="operator">=</span> openReportMapper.selectOne(Wrappers.lambdaQuery(OpenReport.class).eq(OpenReport::getOrderId, orderId));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 现在只需要一行处理了</span></span><br><span class="line">        docGenerateExecutor.generateDoc(() -&gt; orderConsumerService.generateOpenReport(JSONObject.parseObject(json), openReport.getEdu(), orderId), response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/generateOpenReportPPT&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateOpenReportPPT</span><span class="params">(String json, String orderId, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        docGenerateExecutor.generateDoc(() -&gt; orderConsumerService.generateOpenReportPPT(JSONObject.parseObject(json), orderId), response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>在此优化中，<code>DocGenerateExecutor</code> 提供了一个统一的模板方法 <code>generateDoc</code> 来处理所有类似的流程，业务逻辑只需专注于各自的实现。这不仅减少了重复代码，还使得框架更加灵活、可扩展。</li></ul><h1>总结</h1><ul><li>通过本文的示例，我们展示了如何从重复代码中提取共性，使用模板方法模式将通用逻辑与业务逻辑解耦，提升代码的复用性与可维护性。采用这种设计思路，能够显著减少代码的冗余，提升系统的扩展性和灵活性。</li></ul>]]></content>
    
    
    <summary type="html">懒是第一生产力</summary>
    
    
    
    <category term="设计模式" scheme="https://cyborg2077.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/tags/%E9%9A%8F%E5%86%99/"/>
    
    <category term="设计模式" scheme="https://cyborg2077.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于图的任务调度算法</title>
    <link href="https://cyborg2077.github.io/2024/08/17/GraphBasedTaskScheduling/"/>
    <id>https://cyborg2077.github.io/2024/08/17/GraphBasedTaskScheduling/</id>
    <published>2024-08-17T05:04:48.000Z</published>
    <updated>2024-10-06T06:24:54.294Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>本文的灵感来源于</li></ul><div class="tag link"><a class="link-card" title="4.4 计算图的调度 —— 机器学习系统" href="https://openmlsys.github.io/chapter_computational_graph/schedule_of_computational_graph.html"><div class="left"><img src="https://openmlsys.github.io/_static/favicon.png"/></div><div class="right"><p class="text">4.4 计算图的调度 —— 机器学习系统</p><p class="url">https://openmlsys.github.io/chapter_computational_graph/schedule_of_computational_graph.html</p></div></a></div><ul><li>基于该文中的任务调度思想，我设计并实现了一套基于图结构的任务调度器，主要应用于复杂系统中的任务管理与执行。</li><li>下文将详细介绍该调度器的设计理念、核心实现以及如何将任务依赖关系存储到数据库中，以提升系统的稳定性和可维护性。</li></ul><h1>任务调度策略简介</h1><ul><li>在传统的任务执行环境中，任务通常按序执行，依赖关系较为简单，因此可以采用线性执行的方式。但在复杂系统中，任务之间往往存在多层次的依赖关系，形成复杂的依赖链。如果没有合理的任务调度策略，系统容易出现瓶颈，资源也难以得到充分利用。因此，设计一个能够有效管理任务依赖关系的调度器至关重要，这不仅可以避免资源浪费，还能保证所有任务按计划顺利完成。</li><li>本文实现的任务调度逻辑基于有向无环图（DAG），将每个任务抽象为图中的节点，节点之间的边表示任务之间的依赖关系。通过这种方式，可以很好地建模复杂的任务依赖结构，提供了处理复杂调度场景的解决方案。</li></ul><h1>调度器的设计与实现</h1><h2 id="线程池与异步执行">线程池与异步执行</h2><ul><li>为了提升任务调度器的执行效率，采用了Java的线程池和异步操作来实现并发任务的执行<ul><li><code>线程池</code>：调度器通过<code>ExecutorService</code>创建了一个线程池，线程池的大小根据系统的处理器核心数量动态调整（根据自身业务需求调整）。确保任务能并行执行，从而最大限度利用系统资源，提升任务处理效率。</li><li><code>异步操作</code>：调度过程中，任务被提交到线程池中异步执行，使用Future对象管理每个任务的执行结果。当任务完成时，会自动更新依赖其的子任务状态，并将准备就绪的子任务加入队列，等待进一步处理。</li></ul></li><li>以下是任务调度器的核心实现代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTaskScheduler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是根据我自身业务需求，自定义的任务执行器</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyTaskExecutor myTaskExecutor;</span><br><span class="line">    <span class="comment">// 图结构，key是任务ID，value是其下属子任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;String&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 节点入度map，key是任务ID，value是节点的度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; inDegree = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 任务函数map，key是任务ID，value是该任务的执行函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, TaskFunction&gt; taskFunctions = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数式接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TaskFunction</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(MyTaskExecutor myTaskExecutor)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加任务，需指定任务ID和任务执行函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTask</span><span class="params">(String taskId, TaskFunction taskFunction)</span> &#123;</span><br><span class="line">        <span class="comment">// 向图结构中加入任务节点</span></span><br><span class="line">        graph.putIfAbsent(taskId, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="comment">// 初始度为0，即没有依赖</span></span><br><span class="line">        inDegree.putIfAbsent(taskId, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 存储该任务的执行函数</span></span><br><span class="line">        taskFunctions.put(taskId, taskFunction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加依赖，taskId 任务依赖于 dependencyTaskId 任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDependency</span><span class="params">(String taskId, String dependencyTaskId)</span> &#123;</span><br><span class="line">        graph.putIfAbsent(dependencyTaskId, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        graph.get(dependencyTaskId).add(taskId);</span><br><span class="line">        <span class="comment">// 增加子任务的入度</span></span><br><span class="line">        inDegree.put(taskId, inDegree.getOrDefault(taskId, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTask</span><span class="params">(String taskId)</span> &#123;</span><br><span class="line">        graph.remove(taskId);</span><br><span class="line">        inDegree.remove(taskId);</span><br><span class="line">        taskFunctions.remove(taskId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// BFS遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeTasksInOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向队列中添加所有度为0的任务，这些任务无需依赖，可直接执行</span></span><br><span class="line">        <span class="keyword">for</span> (String task : inDegree.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inDegree.get(task) == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.add(task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开个线程池，这里按需调整你的线程池大小</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理队列中的任务</span></span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                List&lt;Future&lt;String&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                    <span class="comment">// 取出任务</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">task</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                    Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 异步执行</span></span><br><span class="line">                        <span class="type">TaskFunction</span> <span class="variable">taskFunction</span> <span class="operator">=</span> taskFunctions.get(task);</span><br><span class="line">                        <span class="keyword">if</span> (taskFunction != <span class="literal">null</span>) &#123;</span><br><span class="line">                            taskFunction.execute(myTaskExecutor);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> task;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    futures.add(future);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 等待所有任务结束并处理依赖关系</span></span><br><span class="line">                <span class="keyword">for</span> (Future&lt;String&gt; future : futures) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 遍历所有已完成的任务</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">completedTask</span> <span class="operator">=</span> future.get();</span><br><span class="line">                        <span class="keyword">for</span> (String dependent : graph.get(completedTask)) &#123;</span><br><span class="line">                            <span class="comment">// 将依赖任务入度 -1</span></span><br><span class="line">                            inDegree.put(dependent, inDegree.get(dependent) - <span class="number">1</span>);</span><br><span class="line">                            <span class="comment">// 如果入度为0，添加到队列</span></span><br><span class="line">                            <span class="keyword">if</span> (inDegree.get(dependent) == <span class="number">0</span>) &#123;</span><br><span class="line">                                queue.add(dependent);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义任务执行器">自定义任务执行器</h2><ul><li>这里需要根据自身的业务需求，来自定义任务执行器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTaskExecutor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CreateTaskExecutor</span> &#123;</span><br><span class="line">        String <span class="title function_">executor</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoopTaskExecutor</span> &#123;</span><br><span class="line">        Wrapper&lt;ReportVO&gt; <span class="title function_">executor</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露给任务调度器的函数，这里面写你自己的业务逻辑即可</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeAndMonitorTask</span><span class="params">(CreateTaskExecutor createTask, LoopTaskExecutor monitorTask, SubOrder subOrder, String taskName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        createTaskExecutor4SubOrder(createTask, subOrder, taskName);</span><br><span class="line">        loopTaskExecutor4SubOrder(monitorTask, subOrder, taskName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTaskExecutor4SubOrder</span><span class="params">(CreateTaskExecutor taskExecutor, SubOrder subOrder, String taskName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 执行创建任务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loopTaskExecutor4SubOrder</span><span class="params">(LoopTaskExecutor taskExecutor, SubOrder subOrder, String taskName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 执行轮询任务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>数据库存储依赖关系</h1><ul><li>在实际应用中，为了确保任务依赖关系在系统重启后不丢失，我们最好将依赖关系存储到数据库中。在这部分代码中，依赖关系和任务信息被持久化到数据库。通过这样的设计，当系统重新启动时，任务调度器可以从数据库中恢复任务状态，并继续执行未完成的任务。</li></ul><div class="tabs" id="mytaskscheduler"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mytaskscheduler-1">MyTaskScheduler</button></li><li class="tab"><button type="button" data-href="#mytaskscheduler-2">Tasks</button></li><li class="tab"><button type="button" data-href="#mytaskscheduler-3">TaskDependency</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mytaskscheduler-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTaskScheduler</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TasksMapper tasksMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TaskDependencyMapper taskDependencyMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyTaskExecutor myTaskExecutor;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubOrderMapper subOrderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, TaskFunction&gt; taskFunctionStrategies = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TaskFunction</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(MyTaskExecutor myTaskExecutor)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTask</span><span class="params">(String taskId, TaskFunction taskFunction)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查任务是否已经存在</span></span><br><span class="line">        <span class="type">SubOrder</span> <span class="variable">existingSubOrder</span> <span class="operator">=</span> subOrderMapper.selectOne(Wrappers.lambdaQuery(SubOrder.class).eq(SubOrder::getOrderId, taskId));</span><br><span class="line">            <span class="keyword">if</span> (existingSubOrder != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (existingSubOrder.getStatus() == Common.ORDER_FINISH_STATUS) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;任务 &#123;&#125; 已存在，跳过添加。&quot;</span>, taskId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (existingSubOrder.getStatus() != Common.ORDER_FINISH_STATUS) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;任务：&#123;&#125;，状态：&#123;&#125;，添加到调度系统&quot;</span>, taskId, existingSubOrder.getStatus());</span><br><span class="line">                existingSubOrder.setStatus(Common.ORDER_SUCCESS_PAY_STATUS);</span><br><span class="line">                subOrderMapper.updateById(existingSubOrder);</span><br><span class="line">                taskFunctionStrategies.put(taskId, taskFunction);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// 任务已存在，直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        taskFunctionStrategies.put(taskId, taskFunction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加节点依赖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDependency</span><span class="params">(String taskId, String dependencyTaskId)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查依赖是否已经存在</span></span><br><span class="line">        <span class="type">TaskDependency</span> <span class="variable">existingDependency</span> <span class="operator">=</span> taskDependencyMapper.selectOne(Wrappers.lambdaQuery(TaskDependency.class)</span><br><span class="line">                .eq(TaskDependency::getTaskId, taskId)</span><br><span class="line">                .eq(TaskDependency::getDependencyTaskId, dependencyTaskId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (existingDependency != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;任务 &#123;&#125; 的依赖 &#123;&#125; 已存在，跳过添加。&quot;</span>, taskId, dependencyTaskId);</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// 依赖已存在，直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 依赖不存在，添加新依赖</span></span><br><span class="line">        <span class="type">TaskDependency</span> <span class="variable">dependency</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskDependency</span>()</span><br><span class="line">                .setTaskId(taskId)</span><br><span class="line">                .setDependencyTaskId(dependencyTaskId)</span><br><span class="line">                .setCreateTime(LocalDateTime.now())</span><br><span class="line">                .setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        taskDependencyMapper.insert(dependency);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeTasks</span><span class="params">(String rootTaskId)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (isRootTask(rootTaskId)) &#123;</span><br><span class="line">            queue.add(rootTaskId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;当前任务节点不是根节点：&#123;&#125;&quot;</span>, rootTaskId);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Root task ID is not valid or has dependencies.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                List&lt;Future&lt;String&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">task</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                    Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">                        <span class="type">TaskFunction</span> <span class="variable">taskFunction</span> <span class="operator">=</span> taskFunctionStrategies.get(task);</span><br><span class="line">                        <span class="keyword">if</span> (taskFunction != <span class="literal">null</span>) &#123;</span><br><span class="line">                            taskFunction.execute(myTaskExecutor);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> task;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    futures.add(future);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (Future&lt;String&gt; future : futures) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">completedTask</span> <span class="operator">=</span> future.get();</span><br><span class="line">                    List&lt;String&gt; dependents = getDependentTasks(completedTask);</span><br><span class="line">                    <span class="keyword">for</span> (String dependent : dependents) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (allDependenciesMet(dependent)) &#123;</span><br><span class="line">                            queue.add(dependent);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isRootTask</span><span class="params">(String taskId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskDependencyMapper.selectCount(Wrappers.lambdaQuery(TaskDependency.class)</span><br><span class="line">                .eq(TaskDependency::getTaskId, taskId)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getDependentTasks</span><span class="params">(String taskId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskDependencyMapper.selectList(Wrappers.lambdaQuery(TaskDependency.class)</span><br><span class="line">                        .eq(TaskDependency::getDependencyTaskId, taskId))</span><br><span class="line">                .stream().map(TaskDependency::getTaskId).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">allDependenciesMet</span><span class="params">(String taskId)</span> &#123;</span><br><span class="line">        List&lt;String&gt; dependencyTaskIds = taskDependencyMapper.selectList(Wrappers.lambdaQuery(TaskDependency.class)</span><br><span class="line">                        .eq(TaskDependency::getTaskId, taskId))</span><br><span class="line">                .stream().map(TaskDependency::getDependencyTaskId).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; completedTaskIds = subOrderMapper.selectList(Wrappers.lambdaQuery(SubOrder.class)</span><br><span class="line">                        .eq(SubOrder::getStatus, Common.ORDER_FINISH_STATUS))</span><br><span class="line">                .stream().map(SubOrder::getOrderId).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dependencyTaskIds.stream().allMatch(completedTaskIds::contains);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mytaskscheduler-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tasks</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mytaskscheduler-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskDependency</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dependencyTaskId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">基于DAG的并发任务调度实现</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/tags/%E9%9A%8F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Win10 解决L2TP连接尝试失败，因为安全层在初始化与远程计算机的协商时遇到一个处理错误</title>
    <link href="https://cyborg2077.github.io/2024/08/08/L2TPConnError/"/>
    <id>https://cyborg2077.github.io/2024/08/08/L2TPConnError/</id>
    <published>2024-08-08T08:18:08.000Z</published>
    <updated>2024-08-09T07:33:09.206Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>配了台新电脑，结果VPN连接有问题，试了各种方案之后，最终连上了，记录一下<br><img src="https://s21.ax1x.com/2024/08/08/pkztw6I.png" alt=""></li></ul><h1>修改注册表</h1><ol><li><p>CMD输入regedit<br><img src="https://s21.ax1x.com/2024/08/08/pkzYvTS.png" alt=""></p></li><li><p>访问这个目录：<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PolicyAgent</code>（可以直接CV），如果该目录下有这个key：<code>AssumeUDPEncapsulationContextOnSendRule</code>，把值修改为2，如果你已经是正确的配置，请忽略这个步骤。<br><img src="https://s21.ax1x.com/2024/08/08/pkztCSs.png" alt=""></p></li><li><p>访问这个目录：<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\RasMan\Parameters</code>，将<code>ProhibitIpSec</code>的值改为1，将<code>AllowL2TPWeakCrypto</code>的值改为1，如果你已经是正确的配置，请忽略这个步骤。没有对应的key的话，请创建。<br><img src="https://s21.ax1x.com/2024/08/08/pkztPln.png" alt=""></p></li></ol><h1>启动服务</h1><ol><li><p>此电脑 -&gt; 右键 -&gt; 管理 -&gt; 服务<br><img src="https://s21.ax1x.com/2024/08/08/pkztFO0.png" alt=""></p></li><li><p>将<code>IPsec Policy Agent</code>和<code>Routing and Remote Access</code>都改为自动，重启服务。<br><img src="https://s21.ax1x.com/2024/08/08/pkzt80K.png" alt=""></p></li></ol><h1>重启电脑</h1><ol><li>重启电脑，连接VPN即可。</li></ol>]]></content>
    
    
    <summary type="html">装机总是会遇到各种各样的问题</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/tags/%E9%9A%8F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>局域网文件迁移</title>
    <link href="https://cyborg2077.github.io/2024/08/08/LANFileMigrationGuide/"/>
    <id>https://cyborg2077.github.io/2024/08/08/LANFileMigrationGuide/</id>
    <published>2024-08-08T05:24:24.000Z</published>
    <updated>2024-08-09T07:37:41.823Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>最近装了台新机，配置好了各种开发环境之后，需要把一些重要的文件（例如我的博客目录）迁移到新机器上，但是又没有找到一个好的方法。要是能从新电脑访问到老电脑上的文件就好了，然后恍然大悟，我特喵的可以通过局域网传输</li></ul><h1>准备工作</h1><ol><li>检查两台电脑是否在同一局域网内</li></ol><ul><li>分别运行ipconfig，查看两台电脑的IP和子网掩码</li><li>确保两台电脑的IP处于相同子网内</li><li>测试网络连接：两台电脑互相ping一下，例如<code>ping 192.168.0.104</code>，如果能ping通，说明网络连接正常</li></ul><h1>设置共享文件夹</h1><ol><li><p>在需要被共享文件的电脑上进行设置<br><img src="https://s21.ax1x.com/2024/08/08/pkztL9J.png" alt=""></p></li><li><p>我这种情况下可以直接把整个C盘和D盘共享出来（<code>事后一定要关闭共享！！</code>），其余场景可以按需共享目录<br><img src="https://s21.ax1x.com/2024/08/08/pkztzB6.png" alt=""></p></li><li><p>配置网络发现</p></li></ol><ul><li>控制面板 -&gt; 网络和Internet -&gt; 网络和共享中心 -&gt; 更改高级共享设置<br><img src="https://s21.ax1x.com/2024/08/09/pkzX9Zd.png" alt=""></li><li>启用网络发现和文件/打印机共享，并保存更改。<br><img src="https://s21.ax1x.com/2024/08/09/pkzjN1f.png" alt=""></li></ul><h1>访问共享文件夹</h1><ul><li>在另一台电脑上访问<code>\\192.168.0.104</code>，如果一切正常，可以看到共享文件夹。那么现在就可以根据自己的需求来CV一些数据了。<br><img src="https://s21.ax1x.com/2024/08/09/pkzjwng.png" alt=""></li></ul>]]></content>
    
    
    <summary type="html">装完新机，需要迁移数据</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/tags/%E9%9A%8F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>泰拉瑞亚-坐骑Mod开发</title>
    <link href="https://cyborg2077.github.io/2024/07/20/PolWorldMountsDev/"/>
    <id>https://cyborg2077.github.io/2024/07/20/PolWorldMountsDev/</id>
    <published>2024-07-20T05:25:54.000Z</published>
    <updated>2024-11-03T01:31:44.894Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>入门级教程请参考上一篇文章</li><li>Git仓库：<a href="https://github.com/Cyborg2077/PolWorldMounts">https://github.com/Cyborg2077/PolWorldMounts</a></li><li>Steam创意工坊：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3292980622">https://steamcommunity.com/sharedfiles/filedetails/?id=3292980622</a></li><li>本文进度会略微落后于创意工坊版本</li></ul><div class="note info no-icon flat"><p>v0.7更新</p><ol><li>为空涡龙增加了三个技能：烈焰风暴（Z键）、光束彗星（X键）、龙彗星（C键）。烈焰风暴会吸附周围的敌对NPC、龙彗星会沿鼠标方向发射、光束彗星的初始方向沿鼠标方向发射，随后自动追踪周围敌怪。</li><li>云海鹿和草莽猪的冲刺改为Z键。</li></ol></div><div class="note info no-icon flat"><p>v0.6更新</p><ol><li>增加了空涡龙坐骑，合成配方：10个夜明锭 + 20个丝绸 + 5个蓝玉，需要帕鲁装置制作台</li><li>增加了帕鲁装置制作台，合成材料：30个木头 + 10个丝绸 + 10个蓝玉</li><li>修改了草莽猪和云海鹿的合成配方</li></ol><ul><li>草莽猪：10个木头 + 10个石头 + 5个蓝玉 + 10个皮革 + 5个椎骨，单击右键进行冲刺，冲刺会摧毁沿途路上的普通树木（一些特殊树木如樱花树等除外）</li><li>云海鹿：20个神圣锭 + 5个飞翔之魂 + 5个光明之魂 + 5个蓝玉，可以进行二段跳，单击右键进行冲刺</li></ul></div><h1>如何自定义坐骑</h1><ul><li><p>原版Terraria里的坐骑，首先都要有一个召唤物。<br><img src="https://s21.ax1x.com/2024/07/20/pkTDrp6.png" alt=""></p></li><li><p>其次就是有一个buff图标<br><img src="https://s21.ax1x.com/2024/07/20/pkTDs1K.png" alt=""></p></li><li><p>最后就是坐骑本体<br><img src="https://s21.ax1x.com/2024/07/20/pkTDy6O.png" alt=""></p></li><li><p>所以首先我们要先来制作这个召唤物。那么第一步我们先来创建一个Mod项目吧。<br><img src="https://s21.ax1x.com/2024/07/20/pkT00b9.png" alt=""></p></li></ul><h1>制作召唤物</h1><ul><li>召唤物的本质实际上就是一个Item，所以我们创建一个类，继承ModItem即可。</li><li>在这个类中，我们来定义召唤物的一些属性，以及合成材料</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PolWorldMounts.Content.Mounts;</span><br><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Items.Mounts</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FenglopeMountItem</span> : <span class="title">ModItem</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span> &#123;</span><br><span class="line">Item.width = <span class="number">20</span>;</span><br><span class="line">Item.height = <span class="number">30</span>;</span><br><span class="line">Item.useTime = <span class="number">20</span>;</span><br><span class="line">Item.useAnimation = <span class="number">20</span>;</span><br><span class="line">Item.useStyle = ItemUseStyleID.Swing;</span><br><span class="line">Item.<span class="keyword">value</span> = Item.sellPrice(gold: <span class="number">3</span>);</span><br><span class="line">Item.rare = ItemRarityID.Green;</span><br><span class="line">Item.UseSound = SoundID.Item79;</span><br><span class="line">Item.noMelee = <span class="literal">true</span>;</span><br><span class="line">Item.mountType = ModContent.MountType&lt;FenglopeMount&gt;(); <span class="comment">// 这个是调用我们自定义的坐骑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里简单用一个泥土合成，实际上可以改成10个木材、10个石头、5个蓝宝石来进行合成，这样的合成配方和帕鲁中类似</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AddRecipes</span>()</span> &#123;</span><br><span class="line">            Recipe recipe = CreateRecipe();</span><br><span class="line">            recipe.AddIngredient(ItemID.DirtBlock, <span class="number">1</span>);</span><br><span class="line">            recipe.Register();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>物品制作完毕后，我们还需要制作贴图，这里我就以帕鲁球为例制作贴图了。画风最好是符合泰拉瑞亚的像素风，这样看起来比较舒服。</li><li>那我们直接启动幻兽帕鲁，进游戏截一张帕鲁球的图<br><img src="https://s21.ax1x.com/2024/07/20/pkTDbng.png" alt=""></li><li>拿到图肯定不能直接用，我们首先要扣掉背景，随后转为像素风，调整尺寸为32*32。扣背景我这里直接用的百度AI图片助手，扣好了之后下载到本地，我们来进一步处理像素风<br><img src="https://s21.ax1x.com/2024/07/20/pkTDL7j.png" alt=""></li><li>像素风的处理，我这里直接用的Python的PIL库来进行处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pixelate</span>(<span class="params">image_path, block_size</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    w, h = img.size</span><br><span class="line">    img_small = img.resize((w // block_size, h // block_size), resample=Image.NEAREST)</span><br><span class="line">    result = img_small.resize(img.size, Image.NEAREST)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pixelated_image = pixelate(<span class="string">&#x27;帕鲁球.png&#x27;</span>, <span class="number">7</span>)</span><br><span class="line">pixelated_image.save(<span class="string">&#x27;pixelated.png&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>处理后的效果还是不错的，那么云海鹿召唤物的功能，我们就开发完毕了<br><img src="https://s2.loli.net/2024/07/20/YzJrkLEFQVwUuxc.png" alt=""></li></ul><h1>制作坐骑</h1><ul><li>坐骑的创建，我们同样需要继承ModMount，随后就是定义坐骑的基本属性，云海鹿的特性有二段跳，所以我们这里不阻止使用额外跳跃，只要你装备了云朵瓶或者气球束之类的会产生额外跳跃的饰品，当你在骑行云海鹿的时候，都可以正常触发。  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FenglopeMount</span> : <span class="title">ModMount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetStaticDefaults</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 定义坐骑的基本属性</span></span><br><span class="line">        MountData.jumpHeight = <span class="number">20</span>; <span class="comment">// 坐骑能跳多高</span></span><br><span class="line">        MountData.acceleration = <span class="number">0.19f</span>; <span class="comment">// 加速率，即坐骑加速的速度</span></span><br><span class="line">        MountData.jumpSpeed = <span class="number">20f</span>; <span class="comment">// 当按下跳跃键时，坐骑和玩家向上跳跃的速度</span></span><br><span class="line">        MountData.blockExtraJumps = <span class="literal">false</span>; <span class="comment">// 是否阻止使用额外跳跃（如瓶子中的云）</span></span><br><span class="line">        MountData.constantJump = <span class="literal">true</span>; <span class="comment">// 是否允许按住跳跃键进行连续跳跃</span></span><br><span class="line">        MountData.heightBoost = <span class="number">20</span>; <span class="comment">// 坐骑与地面之间的高度</span></span><br><span class="line">        MountData.fallDamage = <span class="number">0f</span>; <span class="comment">// 从高处跌落时受到的伤害倍率</span></span><br><span class="line">        MountData.runSpeed = <span class="number">11f</span>; <span class="comment">// 坐骑的奔跑速度</span></span><br><span class="line">        MountData.dashSpeed = <span class="number">8f</span>; <span class="comment">// 冲刺速度</span></span><br><span class="line">        MountData.flightTimeMax = <span class="number">0</span>; <span class="comment">// 最大飞行时间，0表示不能飞行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置疲劳最大值为0，意味着骑乘时不会产生疲劳</span></span><br><span class="line">        MountData.fatigueMax = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关联坐骑的Buff，即骑乘时玩家获得的状态效果</span></span><br><span class="line">        MountData.buff = ModContent.BuffType&lt;Buffs.FenglopeMountBuff&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动画帧数和玩家偏移量设置</span></span><br><span class="line">        MountData.totalFrames = <span class="number">5</span>; <span class="comment">// 总共的动画帧数，取决于你自己的贴图</span></span><br><span class="line">        MountData.playerYOffsets = Enumerable.Repeat(<span class="number">20</span>, MountData.totalFrames).ToArray(); <span class="comment">// 玩家相对于坐骑的Y轴偏移量数组，用于微调玩家在坐骑贴图的位置</span></span><br><span class="line">        MountData.xOffset = <span class="number">20</span>; <span class="comment">// 玩家相对于坐骑的X轴偏移量，用于微调玩家在坐骑贴图上的位置</span></span><br><span class="line">        MountData.yOffset = <span class="number">-12</span>; <span class="comment">// 玩家相对于坐骑的Y轴偏移量，用于微调玩家在坐骑贴图上的位置</span></span><br><span class="line">        MountData.playerHeadOffset = <span class="number">22</span>; <span class="comment">// 玩家头部相对于坐骑的偏移量，用于微调玩家在坐骑贴图上的位置</span></span><br><span class="line">        MountData.bodyFrame = <span class="number">3</span>; <span class="comment">// 玩家身体在坐骑上的帧号</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不同状态下的动画设置</span></span><br><span class="line">        <span class="comment">// 站立</span></span><br><span class="line">        MountData.standingFrameCount = <span class="number">0</span>;</span><br><span class="line">        MountData.standingFrameDelay = <span class="number">12</span>;</span><br><span class="line">        MountData.standingFrameStart = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 奔跑</span></span><br><span class="line">        MountData.runningFrameCount = <span class="number">4</span>;</span><br><span class="line">        MountData.runningFrameDelay = <span class="number">120</span>;</span><br><span class="line">        MountData.runningFrameStart = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 飞行</span></span><br><span class="line">        MountData.flyingFrameCount = <span class="number">0</span>;</span><br><span class="line">        MountData.flyingFrameDelay = <span class="number">0</span>;</span><br><span class="line">        MountData.flyingFrameStart = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 空中</span></span><br><span class="line">        MountData.inAirFrameCount = <span class="number">1</span>;</span><br><span class="line">        MountData.inAirFrameDelay = <span class="number">12</span>;</span><br><span class="line">        MountData.inAirFrameStart = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 闲置</span></span><br><span class="line">        MountData.idleFrameCount = <span class="number">4</span>;</span><br><span class="line">        MountData.idleFrameDelay = <span class="number">12</span>;</span><br><span class="line">        MountData.idleFrameStart = <span class="number">0</span>;</span><br><span class="line">        MountData.idleFrameLoop = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 游泳</span></span><br><span class="line">        MountData.swimFrameCount = MountData.inAirFrameCount;</span><br><span class="line">        MountData.swimFrameDelay = MountData.inAirFrameDelay;</span><br><span class="line">        MountData.swimFrameStart = MountData.inAirFrameStart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>直接叫上一个好兄弟当工具人，去游戏里简单录一段云海鹿的跑步动画，然后自己截图扣下来<br><img src="https://s21.ax1x.com/2024/07/20/pkTrdKS.png" alt=""></li><li>整个Mod开发耗时最久的就是抠图，哈哈哈哈，一张一张扣完之后，下载保存到本地，然后我简单写了个合成脚本，把多张图垂直排列合并，并缩放，代码目录下按你的顺序存放1.png~5.png即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pixelate</span>(<span class="params">image_path, block_size</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    w, h = img.size</span><br><span class="line">    img_small = img.resize((w // block_size, h // block_size), resample=Image.NEAREST)</span><br><span class="line">    result = img_small.resize(img.size, Image.NEAREST)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale_image</span>(<span class="params">image, scale_factor</span>):</span><br><span class="line">    <span class="comment"># 获取当前图片的尺寸</span></span><br><span class="line">    width, height = image.size</span><br><span class="line">    <span class="comment"># 计算新的尺寸</span></span><br><span class="line">    new_width = width // scale_factor</span><br><span class="line">    new_height = height // scale_factor</span><br><span class="line">    <span class="comment"># 返回缩放后的图片</span></span><br><span class="line">    <span class="keyword">return</span> image.resize((new_width, new_height), Image.ANTIALIAS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存处理后的图片对象和尺寸</span></span><br><span class="line">processed_images = []</span><br><span class="line">total_width = <span class="number">0</span></span><br><span class="line">total_height = <span class="number">0</span></span><br><span class="line">scale_factor = <span class="number">4</span>  <span class="comment"># 缩放比例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理图片并计算总高度和宽度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    pixelated_image = pixelate(<span class="string">f&#x27;<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>.png&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">    scaled_image = scale_image(pixelated_image, scale_factor)</span><br><span class="line">    processed_images.append(scaled_image)</span><br><span class="line">    total_width = <span class="built_in">max</span>(total_width, scaled_image.width)</span><br><span class="line">    total_height += scaled_image.height</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一张新图片，背景颜色为透明</span></span><br><span class="line">new_image = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, (total_width, total_height), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将每张处理后的图片粘贴到新图片上</span></span><br><span class="line">y_offset = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> processed_images:</span><br><span class="line">    new_image.paste(img, (<span class="number">0</span>, y_offset), img)</span><br><span class="line">    y_offset += img.height</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存新图片</span></span><br><span class="line">new_image.save(<span class="string">&#x27;combined_pixelated.png&#x27;</span>, <span class="string">&#x27;PNG&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>最终的效果<br><img src="https://s21.ax1x.com/2024/07/20/pkTrDEj.png" alt=""></li></ul><h1>制作坐骑BUFF</h1><ul><li>玩家使用坐骑，其实是对自身施加一个buff，所以我们还要编写一个云海鹿的坐骑BUFF</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PolWorldMounts.Content.Mounts; <span class="comment">// 引入模组中 Mounts 目录下的命名空间</span></span><br><span class="line"><span class="keyword">using</span> Terraria; <span class="comment">// 引入游戏主引擎的命名空间</span></span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader; <span class="comment">// 引入模组加载器的命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Buffs</span> &#123; <span class="comment">// 定义模组 Buffs 目录下的命名空间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FenglopeMountBuff</span> : <span class="title">ModBuff</span> &#123; <span class="comment">// 定义一个继承自 ModBuff 的公共类 FenglopeMountBuff</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetStaticDefaults</span>()</span> &#123; <span class="comment">// 重写父类的方法 SetStaticDefaults</span></span><br><span class="line">            Main.buffNoTimeDisplay[Type] = <span class="literal">true</span>; <span class="comment">// 设置此Buff不会显示持续时间</span></span><br><span class="line">            Main.buffNoSave[Type] = <span class="literal">true</span>; <span class="comment">// 设置此Buff不会被保存，即在死亡或退出世界后消失</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params">Player player, <span class="keyword">ref</span> <span class="built_in">int</span> buffIndex</span>)</span> &#123; <span class="comment">// 重写父类的方法 Update，当Buff应用到玩家身上时被调用</span></span><br><span class="line">            player.mount.SetMount(ModContent.MountType&lt;FenglopeMount&gt;(), player); <span class="comment">// 设置玩家的坐骑为 FenglopeMount</span></span><br><span class="line">            player.buffTime[buffIndex] = <span class="number">10</span>; <span class="comment">// 设置Buff的持续时间为10帧，实际作用是持续刷新，因为会不断被重新应用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单制作一个Buff图标，同样是使用百度抠图，随后将图片下载到本地，随后像素化，并且指定图片尺寸为32x32</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pixelate</span>(<span class="params">image_path, output_size</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    img_small = img.resize(output_size, resample=Image.NEAREST)</span><br><span class="line">    block_size_w = img.width // output_size[<span class="number">0</span>]</span><br><span class="line">    block_size_h = img.height // output_size[<span class="number">1</span>]</span><br><span class="line">    img_pixelated = img_small.resize((img.width // block_size_w, img.height // block_size_h), resample=Image.NEAREST)</span><br><span class="line">    result = img_pixelated.resize(output_size, Image.NEAREST)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pixelated_image = pixelate(<span class="string">&#x27;云海鹿.png&#x27;</span>, (<span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">pixelated_image.save(<span class="string">&#x27;pixelated_image_云海鹿.png&#x27;</span>)</span><br></pre></td></tr></table></figure><h1>泰拉瑞亚 启动！</h1><ul><li>重新生成并加载Mod，我们的云海鹿就已经可以使用了，只需要一块泥土进行制作，不需要任何合成台<br><img src="https://s2.loli.net/2024/07/20/4FNxEZub52QvhOi.png" alt=""></li></ul><h1>增强云海鹿</h1><h2 id="不再需要云瓶进行二段跳">不再需要云瓶进行二段跳</h2><ul><li>带个云瓶太麻烦了，能不能自己想想办法来实现二段跳呢？当然是有的，我们可以先创建一个二段跳的标志位。标识玩家是否已经进行了二段跳。</li><li>随后我们可以通过判断玩家的Y轴速度是否为0来判断是否处于地面。<ul><li>如果是的话，那么重置一下二段跳的标志位。</li><li>如果不是的话，就可以进行二段跳了。</li></ul></li><li>那么接下来看代码逻辑</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> hasDoubleJumped = <span class="literal">false</span>; <span class="comment">// 标志位：是否已经二段跳</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二段跳逻辑</span></span><br><span class="line"><span class="keyword">if</span> (player.controlJump) <span class="comment">// 玩家按下了跳跃键</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (player.velocity.Y == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        hasDoubleJumped = <span class="literal">false</span>; <span class="comment">// 重置二段跳标志位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!hasDoubleJumped &amp;&amp; player.releaseJump) <span class="comment">// 确保没有执行二段跳且玩家松开了跳跃键</span></span><br><span class="line">    &#123;</span><br><span class="line">        player.velocity.Y = <span class="number">-18</span>; <span class="comment">// 设置跳跃速度</span></span><br><span class="line">        hasDoubleJumped = <span class="literal">true</span>; <span class="comment">// 设置二段跳标志位，防止玩家无限跳跃</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) <span class="comment">// 这里只是加了一个粒子特效，模仿云瓶的二段跳效果，只是为了好看，没有其他作用</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vector2 dustPosition = player.position;</span><br><span class="line">            Dust dust = Dust.NewDustDirect(dustPostion, player.width, player.height, DustID.Snow, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">100</span>, Color.White, <span class="number">1.5f</span>);</span><br><span class="line">            dust.velocity *= <span class="number">1.2f</span>;</span><br><span class="line">            dust.color = Color.White; </span><br><span class="line">            dust.noGravity = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样的话，就不再需要云瓶来实现二段跳啦。</li></ul><h2 id="增加冲刺技能">增加冲刺技能</h2><ul><li>云海鹿的招牌技能：阴云之岚，这里当然也是要尽量还原一下的啦，不过贴图和特效就还原不了了，除非能让我白嫖一个画师，哈哈哈哈。</li><li>技能实现方式其实很简单，本质上就是一个BUFF技能。施放技能后，玩家会被附加一个DEBUFF，持续一段时间，在此期间无法再次释放技能。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查冲刺冷却时间，如果冷却中，减少冷却时间</span></span><br><span class="line"><span class="keyword">if</span> (dashCooldown &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    dashCooldown--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查冲刺时间是否还剩余</span></span><br><span class="line"><span class="keyword">if</span> (dashTimeLeft &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 仍在冲刺中，减少剩余冲刺时间</span></span><br><span class="line">    dashTimeLeft--;</span><br><span class="line">    <span class="comment">// 设置玩家的速度，根据当前方向和冲刺速度</span></span><br><span class="line">    player.velocity.X = player.direction * DashSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成玩家的冲刺命中框</span></span><br><span class="line">    Rectangle hitbox = <span class="keyword">new</span> Rectangle((<span class="built_in">int</span>)(player.position.X + player.velocity.X), </span><br><span class="line">                                      (<span class="built_in">int</span>)(player.position.Y + player.velocity.Y), </span><br><span class="line">                                      player.width, </span><br><span class="line">                                      player.height);</span><br><span class="line">    <span class="comment">// 遍历所有NPC，检测是否与冲刺命中框相交</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Main.maxNPCs; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        NPC target = Main.npc[i];</span><br><span class="line">        <span class="comment">// 检查NPC是否活跃且不是友好的</span></span><br><span class="line">        <span class="keyword">if</span> (target.active &amp;&amp; !target.friendly &amp;&amp; target.Hitbox.Intersects(hitbox))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建击中信息，设置伤害、击退和命中方向</span></span><br><span class="line">            NPC.HitInfo hitInfo = <span class="keyword">new</span> NPC.HitInfo</span><br><span class="line">            &#123;</span><br><span class="line">                Damage = DashDamage,</span><br><span class="line">                Knockback = DashKnockBack,</span><br><span class="line">                HitDirection = player.direction</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 对目标NPC造成伤害</span></span><br><span class="line">            target.StrikeNPC(hitInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成粒子特效</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="comment">// 每帧生成10个粒子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 生成粒子位置，基于玩家的中心位置并添加随机偏移</span></span><br><span class="line">        Vector2 dustPosition = player.Center + <span class="keyword">new</span> Vector2(Main.rand.Next(<span class="number">-20</span>, <span class="number">5</span>), Main.rand.Next(<span class="number">-20</span>, <span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 创建新粒子，设置速度和生命周期</span></span><br><span class="line">        Dust.NewDust(dustPosition, <span class="number">0</span>, <span class="number">0</span>, DustID.Snow, player.velocity.X * <span class="number">0.5f</span>, player.velocity.Y * <span class="number">0.5f</span>, <span class="number">100</span>, <span class="literal">default</span>, <span class="number">1.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果冷却时间为0，并且玩家没有被“疲劳”BUFF影响</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dashCooldown == <span class="number">0</span> &amp;&amp; !player.HasBuff(ModContent.BuffType&lt;Buffs.FenglopeExhaustedBuff&gt;()))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取冲刺按键的配置</span></span><br><span class="line">    mountDashKey = ModContent.GetInstance&lt;PolworldModConfig&gt;().MountDashKey;</span><br><span class="line">    <span class="comment">// 检查玩家是否按下了冲刺按键</span></span><br><span class="line">    <span class="keyword">if</span> (Main.keyState.IsKeyDown(mountDashKey))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 开始冲刺，设置剩余冲刺时间和冷却时间</span></span><br><span class="line">        dashTimeLeft = DashDuration;</span><br><span class="line">        dashCooldown = DashCooldown;</span><br><span class="line">        <span class="comment">// 为玩家添加疲劳BUFF，持续600帧（10秒）</span></span><br><span class="line">        player.AddBuff(ModContent.BuffType&lt;Buffs.FenglopeExhaustedBuff&gt;(), <span class="number">600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>草莽猪</h1><ul><li>草莽猪只不过移速降低了一点，原版能挖矿，但是泰拉里没有石头矿能撞，所以就改成了撞断沿途的树木。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Xna.Framework;</span><br><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.GameInput;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Terraria.Audio;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Xna.Framework.Input;</span><br><span class="line"><span class="keyword">using</span> PolWorldMounts.Content;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Mounts</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RushoarMount</span> : <span class="title">ModMount</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Keys mountDashKey;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> DashCooldown = <span class="number">60</span>; <span class="comment">// 冲刺冷却时间，单位：帧</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> DashDuration = <span class="number">90</span>; <span class="comment">// 冲刺持续时间，单位：帧</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> DashSpeed = <span class="number">12f</span>; <span class="comment">// 冲刺速度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> DashDamage = <span class="number">50</span>; <span class="comment">// 冲刺造成的伤害</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> DashKnockBack = <span class="number">10f</span>; <span class="comment">// 冲刺造成的击退力</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> dashTimeLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> dashCooldown = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetStaticDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            MountData.jumpHeight = <span class="number">5</span>; <span class="comment">// How high the mount can jump.</span></span><br><span class="line">            MountData.acceleration = <span class="number">0.19f</span>; <span class="comment">// The rate at which the mount speeds up.</span></span><br><span class="line">            MountData.jumpSpeed = <span class="number">5f</span>; <span class="comment">// The rate at which the player and mount ascend towards (negative y velocity) the jump height when the jump button is pressed.</span></span><br><span class="line">            MountData.blockExtraJumps = <span class="literal">true</span>; <span class="comment">// 阻止饰品增加跳跃次数</span></span><br><span class="line">            MountData.constantJump = <span class="literal">true</span>; <span class="comment">// Allows you to hold the jump button down.</span></span><br><span class="line">            MountData.heightBoost = <span class="number">-20</span>; <span class="comment">// Height between the mount and the ground</span></span><br><span class="line">            MountData.fallDamage = <span class="number">0f</span>; <span class="comment">// Fall damage multiplier.</span></span><br><span class="line">            MountData.runSpeed = <span class="number">8f</span>; <span class="comment">// The speed of the mount</span></span><br><span class="line">            MountData.dashSpeed = <span class="number">8f</span>; <span class="comment">// The speed the mount moves when in the state of dashing.</span></span><br><span class="line">            MountData.flightTimeMax = <span class="number">0</span>; <span class="comment">// The amount of time in frames a mount can be in the state of flying.</span></span><br><span class="line"></span><br><span class="line">            MountData.fatigueMax = <span class="number">0</span>;</span><br><span class="line">            MountData.buff = ModContent.BuffType&lt;Buffs.RushoarMountBuff&gt;(); <span class="comment">// The ID number of the buff assigned to the mount.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Effects</span></span><br><span class="line">            <span class="comment">// MountData.spawnDust = ModContent.DustType&lt;Dusts.Sparkle&gt;(); // The ID of the dust spawned when mounted or dismounted.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Frame data and player offsets</span></span><br><span class="line">            MountData.totalFrames = <span class="number">5</span>; <span class="comment">// Amount of animation frames for the mount</span></span><br><span class="line">            MountData.playerYOffsets = Enumerable.Repeat(<span class="number">20</span>, MountData.totalFrames).ToArray(); <span class="comment">// Fills an array with values for less repeating code</span></span><br><span class="line">            MountData.xOffset = <span class="number">20</span>;</span><br><span class="line">            MountData.yOffset = <span class="number">-12</span>;</span><br><span class="line">            MountData.playerHeadOffset = <span class="number">22</span>;</span><br><span class="line">            MountData.bodyFrame = <span class="number">3</span>;</span><br><span class="line">            <span class="comment">// Standing</span></span><br><span class="line">            MountData.standingFrameCount = <span class="number">0</span>;</span><br><span class="line">            MountData.standingFrameDelay = <span class="number">12</span>;</span><br><span class="line">            MountData.standingFrameStart = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// Running</span></span><br><span class="line">            MountData.runningFrameCount = <span class="number">4</span>;</span><br><span class="line">            MountData.runningFrameDelay = <span class="number">50</span>;</span><br><span class="line">            MountData.runningFrameStart = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// Flying</span></span><br><span class="line">            MountData.flyingFrameCount = <span class="number">0</span>;</span><br><span class="line">            MountData.flyingFrameDelay = <span class="number">0</span>;</span><br><span class="line">            MountData.flyingFrameStart = <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// In-air</span></span><br><span class="line">            MountData.inAirFrameCount = <span class="number">1</span>;</span><br><span class="line">            MountData.inAirFrameDelay = <span class="number">12</span>;</span><br><span class="line">            MountData.inAirFrameStart = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// Idle</span></span><br><span class="line">            MountData.idleFrameCount = <span class="number">0</span>;</span><br><span class="line">            MountData.idleFrameDelay = <span class="number">12</span>;</span><br><span class="line">            MountData.idleFrameStart = <span class="number">0</span>;</span><br><span class="line">            MountData.idleFrameLoop = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// Swim</span></span><br><span class="line">            MountData.swimFrameCount = MountData.inAirFrameCount;</span><br><span class="line">            MountData.swimFrameDelay = MountData.inAirFrameDelay;</span><br><span class="line">            MountData.swimFrameStart = MountData.inAirFrameStart;</span><br><span class="line"></span><br><span class="line">            mountDashKey = ModContent.GetInstance&lt;PolworldModConfig&gt;().MountDashKey;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!Main.dedServ)</span><br><span class="line">            &#123;</span><br><span class="line">                MountData.textureWidth = MountData.backTexture.Width() + <span class="number">20</span>;</span><br><span class="line">                MountData.textureHeight = MountData.backTexture.Height();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UpdateEffects</span>(<span class="params">Player player</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dashCooldown &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dashCooldown--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dashTimeLeft &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dashTimeLeft--;</span><br><span class="line">                player.velocity.X = player.direction * DashSpeed;</span><br><span class="line"></span><br><span class="line">                Rectangle hitbox = <span class="keyword">new</span> Rectangle((<span class="built_in">int</span>)(player.position.X + player.velocity.X), (<span class="built_in">int</span>)(player.position.Y + player.velocity.Y), player.width, player.height);</span><br><span class="line">                BreakTreesAlongPath(player, hitbox);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Main.maxNPCs; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    NPC target = Main.npc[i];</span><br><span class="line">                    <span class="keyword">if</span> (target.active &amp;&amp; !target.friendly &amp;&amp; target.Hitbox.Intersects(hitbox))</span><br><span class="line">                    &#123;</span><br><span class="line">                        NPC.HitInfo hitInfo = <span class="keyword">new</span> NPC.HitInfo</span><br><span class="line">                        &#123;</span><br><span class="line">                            Damage = DashDamage,</span><br><span class="line">                            Knockback = DashKnockBack,</span><br><span class="line">                            HitDirection = player.direction</span><br><span class="line">                        &#125;;</span><br><span class="line">                        target.StrikeNPC(hitInfo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 生成粒子特效</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="comment">// 每帧生成10个粒子</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Vector2 dustPosition = player.Center + <span class="keyword">new</span> Vector2(Main.rand.Next(<span class="number">-20</span>, <span class="number">5</span>), Main.rand.Next(<span class="number">-20</span>, <span class="number">5</span>));</span><br><span class="line">                    Dust.NewDust(dustPosition, <span class="number">0</span>, <span class="number">0</span>, DustID.Dirt, player.velocity.X * <span class="number">0.5f</span>, player.velocity.Y * <span class="number">0.5f</span>, <span class="number">100</span>, <span class="literal">default</span>, <span class="number">1.5f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dashCooldown == <span class="number">0</span> &amp;&amp; !player.HasBuff(ModContent.BuffType&lt;Buffs.RushoarExhaustedBuff&gt;()))</span><br><span class="line">            &#123;</span><br><span class="line">                mountDashKey = ModContent.GetInstance&lt;PolworldModConfig&gt;().MountDashKey;</span><br><span class="line">                <span class="keyword">if</span> (Main.keyState.IsKeyDown(mountDashKey))</span><br><span class="line">                &#123;</span><br><span class="line">                    dashTimeLeft = DashDuration;</span><br><span class="line">                    dashCooldown = DashCooldown;</span><br><span class="line">                    player.AddBuff(ModContent.BuffType&lt;Buffs.RushoarExhaustedBuff&gt;(), <span class="number">600</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BreakTreesAlongPath</span>(<span class="params">Player player, Rectangle hitbox</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> tileStartX = hitbox.Left / <span class="number">16</span>;</span><br><span class="line">            <span class="built_in">int</span> tileEndX = hitbox.Right / <span class="number">16</span>;</span><br><span class="line">            <span class="built_in">int</span> tileStartY = hitbox.Top / <span class="number">16</span>;</span><br><span class="line">            <span class="built_in">int</span> tileEndY = hitbox.Bottom / <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> x = tileStartX; x &lt;= tileEndX; x++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> y = tileStartY; y &lt;= tileEndY; y++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Tile tile = Framing.GetTileSafely(x, y);</span><br><span class="line">                    <span class="keyword">if</span> ((tile.TileType == TileID.Trees</span><br><span class="line">                    <span class="comment">//tile.TileType == TileID.PalmTree ||</span></span><br><span class="line">                    <span class="comment">//tile.TileType == TileID.VanityTreeSakura</span></span><br><span class="line">                    )</span><br><span class="line">                    &amp;&amp; tile.HasTile)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 如果是树顶</span></span><br><span class="line">                        <span class="keyword">if</span> (tile.TileFrameY == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            WorldGen.KillTile(x, y, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">                            SoundEngine.PlaySound(SoundID.Item14);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 如果是树身</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (tile.TileFrameY % <span class="number">22</span> == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            WorldGen.KillTile(x, y, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">                            SoundEngine.PlaySound(SoundID.Item14);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>空涡龙</h1><div class="tabs" id="空涡龙"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#空涡龙-1">空涡龙</button></li><li class="tab"><button type="button" data-href="#空涡龙-2">光束彗星</button></li><li class="tab"><button type="button" data-href="#空涡龙-3">烈焰风暴</button></li><li class="tab"><button type="button" data-href="#空涡龙-4">龙彗星</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="空涡龙-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Xna.Framework;</span><br><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Mounts</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JetragonMount</span> : <span class="title">ModMount</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> FlightAcceleration = <span class="number">0.8f</span>; <span class="comment">// 飞行加速度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> MaxVerticalSpeed = <span class="number">25f</span>; <span class="comment">// 最大垂直速度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> HorizontalAcceleration = <span class="number">0.1f</span>; <span class="comment">// 水平加速度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> DecelerationFactor = <span class="number">0.95f</span>; <span class="comment">// 减速因子</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> isShooting = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> isShootingMeteor = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> isShootingFlareStorm = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetStaticDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            MountData.jumpHeight = <span class="number">15</span>; <span class="comment">// How high the mount can jump.</span></span><br><span class="line">            MountData.acceleration = HorizontalAcceleration; <span class="comment">// The rate at which the mount speeds up.</span></span><br><span class="line">            MountData.jumpSpeed = <span class="number">15f</span>; <span class="comment">// The rate at which the player and mount ascend towards (negative y velocity) the jump height when the jump button is pressed.</span></span><br><span class="line">            MountData.blockExtraJumps = <span class="literal">true</span>; <span class="comment">// 阻止饰品增加跳跃次数</span></span><br><span class="line">            MountData.constantJump = <span class="literal">true</span>; <span class="comment">// Allows you to hold the jump button down.</span></span><br><span class="line">            MountData.heightBoost = <span class="number">20</span>; <span class="comment">// Height between the mount and the ground</span></span><br><span class="line">            MountData.fallDamage = <span class="number">0f</span>; <span class="comment">// Fall damage multiplier.</span></span><br><span class="line">            MountData.runSpeed = <span class="number">25f</span>; <span class="comment">// The speed of the mount</span></span><br><span class="line">            MountData.dashSpeed = <span class="number">15f</span>; <span class="comment">// The speed the mount moves when in the state of dashing.</span></span><br><span class="line">            MountData.flightTimeMax = <span class="number">999999</span>; <span class="comment">// 实现持续飞行</span></span><br><span class="line"></span><br><span class="line">            MountData.fatigueMax = <span class="number">0</span>;</span><br><span class="line">            MountData.buff = ModContent.BuffType&lt;Buffs.JetragonMountBuff&gt;(); <span class="comment">// The ID number of the buff assigned to the mount.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Effects</span></span><br><span class="line">            <span class="comment">// MountData.spawnDust = ModContent.DustType&lt;Dusts.Sparkle&gt;(); // The ID of the dust spawned when mounted or dismounted.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Frame data and player offsets</span></span><br><span class="line">            MountData.totalFrames = <span class="number">3</span>; <span class="comment">// Amount of animation frames for the mount</span></span><br><span class="line">            MountData.playerYOffsets = Enumerable.Repeat(<span class="number">20</span>, MountData.totalFrames).ToArray(); <span class="comment">// Fills an array with values for less repeating code</span></span><br><span class="line">            MountData.xOffset = <span class="number">-10</span>;</span><br><span class="line">            MountData.yOffset = <span class="number">-12</span>;</span><br><span class="line">            MountData.playerHeadOffset = <span class="number">30</span>; <span class="comment">// 确保玩家头部不被遮挡</span></span><br><span class="line">            MountData.bodyFrame = <span class="number">4</span>; <span class="comment">// 调整这个参数，以确保与玩家的动画帧兼容</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Standing</span></span><br><span class="line">            MountData.standingFrameCount = <span class="number">3</span>;</span><br><span class="line">            MountData.standingFrameDelay = <span class="number">8</span>;</span><br><span class="line">            MountData.standingFrameStart = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// Running</span></span><br><span class="line">            MountData.runningFrameCount = <span class="number">3</span>;</span><br><span class="line">            MountData.runningFrameDelay = <span class="number">8</span>;</span><br><span class="line">            MountData.runningFrameStart = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// Flying</span></span><br><span class="line">            MountData.flyingFrameCount = <span class="number">3</span>;</span><br><span class="line">            MountData.flyingFrameDelay = <span class="number">8</span>;</span><br><span class="line">            MountData.flyingFrameStart = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// In-air</span></span><br><span class="line">            MountData.inAirFrameCount = <span class="number">3</span>;</span><br><span class="line">            MountData.inAirFrameDelay = <span class="number">8</span>;</span><br><span class="line">            MountData.inAirFrameStart = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// Idle</span></span><br><span class="line">            MountData.idleFrameCount = <span class="number">0</span>;</span><br><span class="line">            MountData.idleFrameDelay = <span class="number">8</span>;</span><br><span class="line">            MountData.idleFrameStart = <span class="number">0</span>;</span><br><span class="line">            MountData.idleFrameLoop = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// Swim</span></span><br><span class="line">            MountData.swimFrameCount = MountData.inAirFrameCount;</span><br><span class="line">            MountData.swimFrameDelay = MountData.inAirFrameDelay;</span><br><span class="line">            MountData.swimFrameStart = MountData.inAirFrameStart;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!Main.dedServ)</span><br><span class="line">            &#123;</span><br><span class="line">                MountData.textureWidth = MountData.backTexture.Width() + <span class="number">20</span>;</span><br><span class="line">                MountData.textureHeight = MountData.backTexture.Height();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UpdateEffects</span>(<span class="params">Player player</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 不受重力影响</span></span><br><span class="line">            player.gravity = <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 控制上升和下降</span></span><br><span class="line">            <span class="keyword">if</span> (player.controlJump)</span><br><span class="line">            &#123;</span><br><span class="line">                player.velocity.Y = MathHelper.Clamp(</span><br><span class="line">                    player.velocity.Y - FlightAcceleration,</span><br><span class="line">                    -MaxVerticalSpeed,</span><br><span class="line">                    MaxVerticalSpeed</span><br><span class="line">                ); <span class="comment">// 上升</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (player.controlDown)</span><br><span class="line">            &#123;</span><br><span class="line">                player.velocity.Y = MathHelper.Clamp(</span><br><span class="line">                    player.velocity.Y + FlightAcceleration,</span><br><span class="line">                    -MaxVerticalSpeed,</span><br><span class="line">                    MaxVerticalSpeed</span><br><span class="line">                ); <span class="comment">// 下降</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                player.velocity.Y *= DecelerationFactor; <span class="comment">// 缓慢减速至静止</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 控制左右移动</span></span><br><span class="line">            <span class="keyword">if</span> (player.controlLeft)</span><br><span class="line">            &#123;</span><br><span class="line">                player.velocity.X = MathHelper.Clamp(</span><br><span class="line">                    player.velocity.X - MountData.acceleration,</span><br><span class="line">                    -MountData.runSpeed,</span><br><span class="line">                    MountData.runSpeed</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (player.controlRight)</span><br><span class="line">            &#123;</span><br><span class="line">                player.velocity.X = MathHelper.Clamp(</span><br><span class="line">                    player.velocity.X + MountData.acceleration,</span><br><span class="line">                    -MountData.runSpeed,</span><br><span class="line">                    MountData.runSpeed</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                player.velocity.X *= DecelerationFactor; <span class="comment">// 缓慢减速至静止</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 常驻粉色粒子特效</span></span><br><span class="line">            Vector2 pinkDustOffset = <span class="keyword">new</span> Vector2(<span class="number">-40</span> * player.direction, <span class="number">-30</span>); <span class="comment">// 设定偏移量，这里乘以玩家方向是为了当玩家镜像翻转时，贴图也会镜像翻转</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="comment">// 每帧生成3个粒子</span></span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 pinkDustPosition =</span><br><span class="line">                    player.Center</span><br><span class="line">                    + pinkDustOffset</span><br><span class="line">                    + <span class="keyword">new</span> Vector2(Main.rand.Next(<span class="number">-10</span>, <span class="number">10</span>), Main.rand.Next(<span class="number">-10</span>, <span class="number">10</span>));</span><br><span class="line">                <span class="built_in">int</span> pinkDustIndex = Dust.NewDust(</span><br><span class="line">                    pinkDustPosition,</span><br><span class="line">                    <span class="number">0</span>,</span><br><span class="line">                    <span class="number">0</span>,</span><br><span class="line">                    DustID.PinkTorch,</span><br><span class="line">                    <span class="number">0f</span>,</span><br><span class="line">                    <span class="number">0f</span>,</span><br><span class="line">                    <span class="number">100</span>,</span><br><span class="line">                    <span class="literal">default</span>,</span><br><span class="line">                    <span class="number">1.5f</span></span><br><span class="line">                );</span><br><span class="line">                Main.dust[pinkDustIndex].noGravity = <span class="literal">true</span>; <span class="comment">// 粉色粒子不受重力影响</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加技能检测和冷却逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (!player.buffType.Contains(ModContent.BuffType&lt;Buffs.JetragonBeamCometBuff&gt;()))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 检查是否按下X键并且当前没有在发射弹幕</span></span><br><span class="line">                <span class="keyword">if</span> (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X) &amp;&amp; !isShooting)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 启动异步发射弹幕</span></span><br><span class="line">                    isShooting = <span class="literal">true</span>;</span><br><span class="line">                    FireProjectiles(player);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!player.buffType.Contains(ModContent.BuffType&lt;Buffs.JetragonMeteorBuff&gt;()))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C) &amp;&amp; !isShootingMeteor)</span><br><span class="line">                &#123;</span><br><span class="line">                    isShootingMeteor = <span class="literal">true</span>;</span><br><span class="line">                    ShootMeteors(player);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!player.buffType.Contains(ModContent.BuffType&lt;Buffs.JetragonFlareStormBuff&gt;()))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z) &amp;&amp; !isShootingFlareStorm)</span><br><span class="line">                &#123;</span><br><span class="line">                    isShootingFlareStorm = <span class="literal">true</span>;</span><br><span class="line">                    FireFlareStorm(player);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Load</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">base</span>.Load();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">FireProjectiles</span>(<span class="params">Player player</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vector2 mousePosition = Main.MouseWorld; <span class="comment">// 获取鼠标位置</span></span><br><span class="line">            Vector2 playerPosition = player.Center; <span class="comment">// 获取玩家位置</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 offset = <span class="keyword">new</span> Vector2(player.direction * <span class="number">-20</span>, <span class="number">-20</span>); <span class="comment">// 在X轴上偏移20个单位，可以根据需要调整偏移量</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 应用偏移量到player.Center</span></span><br><span class="line">                Vector2 spawnPosition = playerPosition + offset;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算方向向量，从玩家到鼠标</span></span><br><span class="line">                Vector2 directionToMouse = mousePosition - spawnPosition;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 仅保留水平分量，忽略垂直方向</span></span><br><span class="line">                directionToMouse.Normalize(); <span class="comment">// 归一化方向向量</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置速度，调整速度大小以适应你的需求</span></span><br><span class="line">                Vector2 projectileVelocity = directionToMouse * <span class="number">10f</span>; <span class="comment">// 10f 为弹幕速度的大小</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 创建弹幕</span></span><br><span class="line">                    Projectile.NewProjectile(player.GetSource_FromThis(), spawnPosition, projectileVelocity, ModContent.ProjectileType&lt;Projectiles.BeamCometProjectile&gt;(), <span class="number">200</span>, <span class="number">2</span>, player.whoAmI);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 处理异常，记录错误或采取其他措施</span></span><br><span class="line">                    Main.NewText(<span class="string">$&quot;Error creating projectile: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 等待0.2秒（200毫秒）</span></span><br><span class="line">                <span class="keyword">await</span> Task.Delay(<span class="number">200</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加冷却Buff</span></span><br><span class="line">            player.AddBuff(ModContent.BuffType&lt;Buffs.JetragonBeamCometBuff&gt;(), <span class="number">300</span>); <span class="comment">// 10秒</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 完成发射后重置状态</span></span><br><span class="line">            isShooting = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">ShootMeteors</span>(<span class="params">Player player</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vector2 mousePosition = Main.MouseWorld;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 随机偏移以模拟不同的落点</span></span><br><span class="line">                    Vector2 offset = <span class="keyword">new</span> Vector2(Main.rand.Next(<span class="number">-100</span>, <span class="number">100</span>), Main.rand.Next(<span class="number">-100</span>, <span class="number">100</span>));</span><br><span class="line">                    Vector2 targetPosition = mousePosition + offset;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 从玩家位置到目标位置的方向</span></span><br><span class="line">                    Vector2 direction = targetPosition - player.Center;</span><br><span class="line">                    direction.Normalize();</span><br><span class="line">                    <span class="built_in">float</span> speed = <span class="number">10f</span>; <span class="comment">// 陨石速度</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 随机化初始速度方向（沿弧形路径）</span></span><br><span class="line">                    <span class="built_in">float</span> angle = Main.rand.NextFloat(-MathHelper.Pi / <span class="number">4</span>, MathHelper.Pi / <span class="number">4</span>); <span class="comment">// 随机弧形角度</span></span><br><span class="line">                    Vector2 initialVelocity = <span class="keyword">new</span> Vector2(</span><br><span class="line">                        direction.X * (<span class="built_in">float</span>)Math.Cos(angle) - direction.Y * (<span class="built_in">float</span>)Math.Sin(angle),</span><br><span class="line">                        direction.X * (<span class="built_in">float</span>)Math.Sin(angle) + direction.Y * (<span class="built_in">float</span>)Math.Cos(angle)</span><br><span class="line">                    ) * speed;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 应用偏移量到player.Center</span></span><br><span class="line">                    Vector2 offsetProj = <span class="keyword">new</span> Vector2(</span><br><span class="line">                        (player.direction * <span class="number">-30</span>) + Main.rand.NextFloat(<span class="number">-10f</span>, <span class="number">10f</span>), <span class="comment">// 随机化X偏移量</span></span><br><span class="line">                        <span class="number">-60</span> + Main.rand.NextFloat(<span class="number">-10f</span>, <span class="number">10f</span>) <span class="comment">// 随机化Y偏移量</span></span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">                    Vector2 spawnPosition = player.Center + offsetProj;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 创建弹幕</span></span><br><span class="line">                        <span class="built_in">int</span> projIndex = Projectile.NewProjectile(player.GetSource_FromThis(), spawnPosition, initialVelocity, ModContent.ProjectileType&lt;Projectiles.DragonMeteorProjectile&gt;(), <span class="number">200</span>, <span class="number">2</span>, player.whoAmI);</span><br><span class="line">                        <span class="comment">// 获取创建的弹幕</span></span><br><span class="line">                        Projectile projectile = Main.projectile[projIndex];</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 设置弹幕的初始状态，确保它会在开始时沿弧形路径运动</span></span><br><span class="line">                        projectile.ai[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 使用 ai[0] 标记弹幕已开始弧形运动</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (NullReferenceException ex)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 等待0.1秒（100毫秒）</span></span><br><span class="line">                    <span class="keyword">await</span> Task.Delay(<span class="number">50</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                isShootingMeteor = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// 等待0.3秒（300毫秒）</span></span><br><span class="line">                <span class="keyword">await</span> Task.Delay(<span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            player.AddBuff(ModContent.BuffType&lt;Buffs.JetragonMeteorBuff&gt;(), <span class="number">1200</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">FireFlareStorm</span>(<span class="params">Player player</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vector2 mousePosition = Main.MouseWorld; <span class="comment">// 获取鼠标位置</span></span><br><span class="line">            Vector2 playerPosition = player.Center; <span class="comment">// 获取玩家位置</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="comment">// 生成5个FlareStorm弹幕</span></span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 spawnPosition = playerPosition + <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">10</span>); <span class="comment">// 在玩家下方生成弹幕</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算方向向量，从玩家到鼠标</span></span><br><span class="line">                Vector2 directionToMouse = mousePosition - spawnPosition;</span><br><span class="line">                directionToMouse.Y = <span class="number">0</span>;</span><br><span class="line">                directionToMouse.Normalize(); <span class="comment">// 归一化方向向量</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置速度，调整速度大小以适应你的需求</span></span><br><span class="line">                Vector2 velocity = directionToMouse * <span class="number">10f</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 创建FlareStorm弹幕</span></span><br><span class="line">                    Projectile.NewProjectile(player.GetSource_FromThis(), spawnPosition, velocity, ModContent.ProjectileType&lt;Projectiles.FlareStormProjectile&gt;(), <span class="number">300</span>, <span class="number">2</span>, player.whoAmI);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (NullReferenceException ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 处理异常，记录错误或采取其他措施</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 等待0.1秒（100毫秒）</span></span><br><span class="line">                <span class="keyword">await</span> Task.Delay(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加冷却时间</span></span><br><span class="line"></span><br><span class="line">            player.AddBuff(ModContent.BuffType&lt;Buffs.JetragonFlareStormBuff&gt;(), <span class="number">1800</span>); <span class="comment">// 10秒</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 完成发射后重置状态</span></span><br><span class="line">            isShootingFlareStorm = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="空涡龙-2"><ul><li>光束彗星一开始会沿着鼠标方向发射，随后会自动追踪800像素范围内的敌怪。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Xna.Framework;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Xna.Framework.Graphics;</span><br><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Projectiles</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BeamCometProjectile</span> : <span class="title">ModProjectile</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Projectile.width = <span class="number">10</span>; <span class="comment">// 弹幕宽度</span></span><br><span class="line">            Projectile.height = <span class="number">10</span>; <span class="comment">// 弹幕高度</span></span><br><span class="line">            Projectile.friendly = <span class="literal">true</span>; <span class="comment">// 是否对玩家友好</span></span><br><span class="line">            Projectile.hostile = <span class="literal">false</span>; <span class="comment">// 是否对敌人友好</span></span><br><span class="line">            Projectile.tileCollide = <span class="literal">true</span>; <span class="comment">// 是否与瓷砖碰撞</span></span><br><span class="line">            Projectile.penetrate = <span class="number">5</span>; <span class="comment">// 穿透数量</span></span><br><span class="line">            Projectile.timeLeft = <span class="number">600</span>; <span class="comment">// 弹幕的存活时间（帧）</span></span><br><span class="line">            Projectile.light = <span class="number">0.5f</span>; <span class="comment">// 弹幕的光亮度</span></span><br><span class="line">            Projectile.ignoreWater = <span class="literal">true</span>; <span class="comment">// 是否忽略水</span></span><br><span class="line">            Projectile.extraUpdates = <span class="number">1</span>; <span class="comment">// 每帧更新次数</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Player player = Main.player[Projectile.owner];</span><br><span class="line">            Vector2 mousePosition = Main.MouseWorld;</span><br><span class="line">            NPC target = FindClosestNPC(<span class="number">800f</span>); <span class="comment">// 设定追踪范围为800像素</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (target != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果找到目标，计算弹幕朝向目标的方向</span></span><br><span class="line">                Vector2 directionToTarget = target.Center - Projectile.Center;</span><br><span class="line">                directionToTarget.Normalize();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 平滑过渡到目标方向</span></span><br><span class="line">                <span class="built_in">float</span> smoothFactor = <span class="number">0.05f</span>; <span class="comment">// 调整平滑的因子，0到1之间，数值越小转向越平滑</span></span><br><span class="line">                Projectile.velocity = Vector2.Lerp(Projectile.velocity, directionToTarget * <span class="number">4f</span>, smoothFactor);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 粒子效果</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) <span class="comment">// 每帧生成1个粒子</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> dustIndex = Dust.NewDust(Projectile.position, Projectile.width, Projectile.height, DustID.Firework_Pink, Projectile.velocity.X * <span class="number">0.2f</span>, Projectile.velocity.Y * <span class="number">0.2f</span>, <span class="number">100</span>, <span class="keyword">new</span> Color(<span class="number">205</span>, <span class="number">71</span>, <span class="number">208</span>), <span class="number">0.7f</span>);</span><br><span class="line">                Dust dust = Main.dust[dustIndex];</span><br><span class="line">                dust.noGravity = <span class="literal">true</span>;</span><br><span class="line">                dust.velocity *= <span class="number">0.3f</span>;</span><br><span class="line">                dust.scale *= <span class="number">0.95f</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加光效</span></span><br><span class="line">            Lighting.AddLight(Projectile.Center, <span class="number">0.84f</span>, <span class="number">0.48f</span>, <span class="number">0.73f</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 辅助方法，查找最近的敌人</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> NPC <span class="title">FindClosestNPC</span>(<span class="params"><span class="built_in">float</span> maxDetectDistance</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            NPC closestNPC = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">float</span> sqrMaxDetectDistance = maxDetectDistance * maxDetectDistance;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Main.maxNPCs; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                NPC npc = Main.npc[i];</span><br><span class="line">                <span class="keyword">if</span> (npc.CanBeChasedBy(<span class="keyword">this</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">float</span> sqrDistanceToNPC = Vector2.DistanceSquared(npc.Center, Projectile.Center);</span><br><span class="line">                    <span class="keyword">if</span> (sqrDistanceToNPC &lt; sqrMaxDetectDistance)</span><br><span class="line">                    &#123;</span><br><span class="line">                        sqrMaxDetectDistance = sqrDistanceToNPC;</span><br><span class="line">                        closestNPC = npc;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> closestNPC;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnHitNPC</span>(<span class="params">NPC target, NPC.HitInfo hit, <span class="built_in">int</span> damageDone</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            target.AddBuff(BuffID.OnFire, <span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">PreDraw</span>(<span class="params"><span class="keyword">ref</span> Color lightColor</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取当前帧的源矩形</span></span><br><span class="line">            Rectangle sourceRectangle = <span class="keyword">new</span> Rectangle(<span class="number">0</span>, Projectile.frame * Projectile.height, Projectile.width, Projectile.height);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取弹幕的贴图</span></span><br><span class="line">            Texture2D texture = Terraria.GameContent.TextureAssets.Projectile[Projectile.type].Value;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拖影效果参数</span></span><br><span class="line">            <span class="built_in">float</span> alpha = <span class="number">0.5f</span>; <span class="comment">// 拖影的透明度</span></span><br><span class="line">            <span class="built_in">float</span> scale = Projectile.scale; <span class="comment">// 拓影的缩放</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取弹幕的速度方向</span></span><br><span class="line">            Vector2 velocity = Projectile.velocity;</span><br><span class="line">            velocity.Normalize(); <span class="comment">// 归一化速度向量，用于确定拖影的方向</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算拖影偏移量</span></span><br><span class="line">            <span class="built_in">float</span> offsetDistance = <span class="number">10f</span>; <span class="comment">// 拖影偏移量的距离（可以根据需要调整）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绘制拖影</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) <span class="comment">// 绘制5个拖影（可以调整数量）</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 计算每个拖影的位置</span></span><br><span class="line">                Vector2 offset = velocity * offsetDistance * i; <span class="comment">// 沿着速度方向的偏移量</span></span><br><span class="line">                Color color = Color.Lerp(lightColor, Color.Transparent, alpha / <span class="number">5f</span> * i); <span class="comment">// 逐渐变透明的颜色</span></span><br><span class="line"></span><br><span class="line">                Main.spriteBatch.Draw(</span><br><span class="line">                    texture,</span><br><span class="line">                    Projectile.Center - Main.screenPosition - offset,</span><br><span class="line">                    sourceRectangle,</span><br><span class="line">                    color,</span><br><span class="line">                    Projectile.rotation,</span><br><span class="line">                    <span class="keyword">new</span> Vector2(Projectile.width / <span class="number">2</span>, Projectile.height / <span class="number">2</span>),</span><br><span class="line">                    scale,</span><br><span class="line">                    SpriteEffects.None,</span><br><span class="line">                    <span class="number">0f</span></span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绘制正常的弹幕</span></span><br><span class="line">            Main.spriteBatch.Draw(</span><br><span class="line">                texture,</span><br><span class="line">                Projectile.Center - Main.screenPosition,</span><br><span class="line">                sourceRectangle,</span><br><span class="line">                lightColor,</span><br><span class="line">                Projectile.rotation,</span><br><span class="line">                <span class="keyword">new</span> Vector2(Projectile.width / <span class="number">2</span>, Projectile.height / <span class="number">2</span>),</span><br><span class="line">                scale,</span><br><span class="line">                SpriteEffects.None,</span><br><span class="line">                <span class="number">0f</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 返回false，表示我们自己绘制了弹幕</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="空涡龙-3"><ul><li>烈焰风暴个人感觉还是很不错的，抠图就扣了老半天了，会赋予敌人燃烧效果，并且会有吸附效果，清兵神器，自己调试的时候，把CD改成0.1，直接秒天秒地了。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Xna.Framework;</span><br><span class="line"><span class="keyword">using</span> PolWorldMounts.Content.Projectiles;</span><br><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Projectiles</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlareStormProjectile</span> : <span class="title">ModProjectile</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Projectile.width = <span class="number">168</span>; <span class="comment">// 弹幕宽度</span></span><br><span class="line">            Projectile.height = <span class="number">164</span>; <span class="comment">// 弹幕高度</span></span><br><span class="line">            Projectile.friendly = <span class="literal">true</span>; <span class="comment">// 是否对玩家友好</span></span><br><span class="line">            Projectile.hostile = <span class="literal">false</span>; <span class="comment">// 是否对敌人友好</span></span><br><span class="line">            Projectile.tileCollide = <span class="literal">true</span>; <span class="comment">// 是否与瓷砖碰撞</span></span><br><span class="line">            Projectile.penetrate = <span class="number">9999</span>; <span class="comment">// 穿透数量</span></span><br><span class="line">            Projectile.timeLeft = <span class="number">300</span>; <span class="comment">// 弹幕的存活时间（帧）</span></span><br><span class="line">            Projectile.light = <span class="number">0.8f</span>; <span class="comment">// 弹幕的光亮度</span></span><br><span class="line">            Projectile.ignoreWater = <span class="literal">true</span>; <span class="comment">// 是否忽略水</span></span><br><span class="line">            Projectile.extraUpdates = <span class="number">1</span>; <span class="comment">// 每帧更新次数</span></span><br><span class="line">            Projectile.aiStyle = <span class="number">-1</span>; <span class="comment">// 自定义AI</span></span><br><span class="line">            Main.projFrames[Projectile.type] = <span class="number">4</span>; <span class="comment">// 设置弹幕的帧数</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建火焰粒子特效</span></span><br><span class="line">            <span class="keyword">if</span> (Main.rand.NextBool(<span class="number">3</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Dust dust = Dust.NewDustDirect(Projectile.position, Projectile.width, Projectile.height, DustID.Firework_Yellow);</span><br><span class="line">                dust.noGravity = <span class="literal">true</span>; <span class="comment">// 粒子不受重力影响</span></span><br><span class="line">                dust.velocity *= <span class="number">1.2f</span>; <span class="comment">// 增加粒子速度</span></span><br><span class="line">                dust.scale *= <span class="number">1.5f</span>; <span class="comment">// 增加粒子规模</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置弹幕沿地面前进</span></span><br><span class="line">            <span class="keyword">if</span> (Projectile.velocity.Y == <span class="number">0f</span>) <span class="comment">// 检查弹幕是否在地面上</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Projectile.velocity.X &gt; <span class="number">0f</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Projectile.velocity.X = Math.Max(Projectile.velocity.X - <span class="number">0.1f</span>, <span class="number">0</span>); <span class="comment">// 左移减速</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (Projectile.velocity.X &lt; <span class="number">0f</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Projectile.velocity.X = Math.Min(Projectile.velocity.X + <span class="number">0.1f</span>, <span class="number">0</span>); <span class="comment">// 右移减速</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Math.Abs(Projectile.velocity.X) &lt; <span class="number">0.2f</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Projectile.velocity.X = <span class="number">0f</span>; <span class="comment">// 停止移动</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Projectile.velocity.Y += <span class="number">0.2f</span>; <span class="comment">// 重力作用</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加光效</span></span><br><span class="line">            Lighting.AddLight(Projectile.Center, <span class="number">0.8f</span>, <span class="number">0.4f</span>, <span class="number">0.1f</span>); <span class="comment">// 添加橙色光效</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新动画帧</span></span><br><span class="line">            Projectile.frameCounter++;</span><br><span class="line">            <span class="keyword">if</span> (Projectile.frameCounter &gt;= <span class="number">5</span>) <span class="comment">// 每5帧切换一次图片</span></span><br><span class="line">            &#123;</span><br><span class="line">                Projectile.frame++;</span><br><span class="line">                Projectile.frame %= <span class="number">4</span>; <span class="comment">// 循环帧动画</span></span><br><span class="line">                Projectile.frameCounter = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 吸附敌怪</span></span><br><span class="line">            <span class="keyword">foreach</span> (NPC npc <span class="keyword">in</span> Main.npc)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (npc.active &amp;&amp; !npc.friendly &amp;&amp; !npc.dontTakeDamage &amp;&amp; Vector2.Distance(Projectile.Center, npc.Center) &lt; <span class="number">300f</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Vector2 direction = Projectile.Center - npc.Center;</span><br><span class="line">                    direction.Normalize();</span><br><span class="line">                    npc.velocity += direction * <span class="number">0.1f</span>; <span class="comment">// 吸附效果</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnHitNPC</span>(<span class="params">NPC target, NPC.HitInfo hit, <span class="built_in">int</span> damageDone</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            target.AddBuff(BuffID.OnFire, <span class="number">300</span>); <span class="comment">// 造成燃烧效果，持续5秒</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">OnTileCollide</span>(<span class="params">Vector2 oldVelocity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Projectile.velocity = Vector2.Zero; <span class="comment">// 停止移动，但不消失</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 不摧毁弹幕</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Kill</span>(<span class="params"><span class="built_in">int</span> timeLeft</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 可以在弹幕摧毁时添加特效</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="空涡龙-4"><ul><li>龙彗星倒是没有什么特别的，感觉这个不是很好还原的其实，弹幕生成的不会很丝滑，运动轨迹，emmm 也很奇怪，可能是会有更平滑的函数实现吧。</li><li>每次发射的时候都会沿鼠标方向。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Xna.Framework;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Xna.Framework.Graphics;</span><br><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Projectiles</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DragonMeteorProjectile</span> : <span class="title">ModProjectile</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> hasAccelerated = <span class="literal">false</span>; <span class="comment">// 是否已经开始加速</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> hoverTime = <span class="number">60</span>; <span class="comment">// 悬停时间（帧）</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Projectile.width = <span class="number">32</span>; <span class="comment">// 弹幕宽度</span></span><br><span class="line">            Projectile.height = <span class="number">32</span>; <span class="comment">// 弹幕高度</span></span><br><span class="line">            Projectile.friendly = <span class="literal">true</span>; <span class="comment">// 是否对玩家友好</span></span><br><span class="line">            Projectile.hostile = <span class="literal">false</span>; <span class="comment">// 是否对敌人友好</span></span><br><span class="line">            Projectile.tileCollide = <span class="literal">true</span>; <span class="comment">// 是否与瓷砖碰撞</span></span><br><span class="line">            Projectile.penetrate = <span class="number">-1</span>; <span class="comment">// 穿透数量，设置为-1表示不会消失</span></span><br><span class="line">            Projectile.timeLeft = <span class="number">300</span>; <span class="comment">// 弹幕的存活时间（帧）</span></span><br><span class="line">            Projectile.light = <span class="number">0.8f</span>; <span class="comment">// 弹幕的光亮度</span></span><br><span class="line">            Projectile.ignoreWater = <span class="literal">true</span>; <span class="comment">// 是否忽略水</span></span><br><span class="line">            Projectile.extraUpdates = <span class="number">1</span>; <span class="comment">// 每帧更新次数</span></span><br><span class="line">            Main.projFrames[Projectile.type] = <span class="number">4</span>; <span class="comment">// 设置弹幕的帧数</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (hoverTime &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                hoverTime--;</span><br><span class="line">                Projectile.velocity = Vector2.Zero; <span class="comment">// 悬停时速度为零</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 不产生粒子特效</span></span><br><span class="line">                <span class="keyword">if</span> (hoverTime % <span class="number">10</span> == <span class="number">0</span>) <span class="comment">// 每10帧产生一次粒子特效（可以调整频率）</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">int</span> dustIndex = Dust.NewDust(Projectile.position, Projectile.width, Projectile.height, DustID.Firework_Pink, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">100</span>, <span class="literal">default</span>(Color), <span class="number">1.0f</span>);</span><br><span class="line">                    Main.dust[dustIndex].velocity *= <span class="number">0.5f</span>;</span><br><span class="line">                    Main.dust[dustIndex].scale *= <span class="number">1.2f</span>;</span><br><span class="line">                    Main.dust[dustIndex].noGravity = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!hasAccelerated)</span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 targetPosition = Main.MouseWorld;</span><br><span class="line">                Vector2 direction = targetPosition - Projectile.Center;</span><br><span class="line">                direction.Normalize();</span><br><span class="line">                Projectile.velocity = direction * <span class="number">2f</span>; <span class="comment">// 设置初始速度</span></span><br><span class="line">                hasAccelerated = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Projectile.velocity *= <span class="number">1.05f</span>; <span class="comment">// 缓慢加速</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加粒子效果或其他视觉效果</span></span><br><span class="line">            <span class="keyword">if</span> (hoverTime &lt;= <span class="number">0</span>) <span class="comment">// 只有在加速阶段才产生粒子特效</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> dustIndex = Dust.NewDust(Projectile.position, Projectile.width, Projectile.height, DustID.Firework_Red, Projectile.velocity.X * <span class="number">0.5f</span>, Projectile.velocity.Y * <span class="number">0.5f</span>, <span class="number">100</span>, <span class="literal">default</span>(Color), <span class="number">1.0f</span>);</span><br><span class="line">                Main.dust[dustIndex].velocity *= <span class="number">0.5f</span>;</span><br><span class="line">                Main.dust[dustIndex].scale *= <span class="number">1.2f</span>;</span><br><span class="line">                Main.dust[dustIndex].noGravity = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Kill</span>(<span class="params"><span class="built_in">int</span> timeLeft</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建爆炸效果的范围伤害</span></span><br><span class="line">            <span class="built_in">float</span> explosionRadius = <span class="number">150f</span>; <span class="comment">// 爆炸范围</span></span><br><span class="line">            <span class="built_in">int</span> damage = <span class="number">300</span>; <span class="comment">// 爆炸伤害</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查找爆炸范围内的敌人并造成伤害</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Main.maxNPCs; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                NPC npc = Main.npc[i];</span><br><span class="line">                <span class="keyword">if</span> (npc.CanBeChasedBy(<span class="keyword">this</span>) &amp;&amp; Vector2.Distance(npc.Center, Projectile.Center) &lt; explosionRadius)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 计算伤害并应用</span></span><br><span class="line">                    npc.SimpleStrikeNPC(damage, <span class="number">0</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">false</span>); <span class="comment">// hitDirection 设置为 -1 表示无特定方向</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 播放音效</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> dustIndex = Dust.NewDust(Projectile.position, Projectile.width, Projectile.height, DustID.Smoke, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">100</span>, <span class="literal">default</span>(Color), <span class="number">2f</span>);</span><br><span class="line">                Main.dust[dustIndex].velocity *= <span class="number">1.4f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> dustIndex = Dust.NewDust(Projectile.position, Projectile.width, Projectile.height, DustID.Firework_Blue, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">100</span>, <span class="literal">default</span>(Color), <span class="number">3f</span>);</span><br><span class="line">                Main.dust[dustIndex].noGravity = <span class="literal">true</span>;</span><br><span class="line">                Main.dust[dustIndex].velocity *= <span class="number">5f</span>;</span><br><span class="line">                dustIndex = Dust.NewDust(Projectile.position, Projectile.width, Projectile.height, DustID.Firework_Red, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">100</span>, <span class="literal">default</span>(Color), <span class="number">2f</span>);</span><br><span class="line">                Main.dust[dustIndex].velocity *= <span class="number">3f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">PreDraw</span>(<span class="params"><span class="keyword">ref</span> Color lightColor</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取当前帧的源矩形</span></span><br><span class="line">            Rectangle sourceRectangle = <span class="keyword">new</span> Rectangle(<span class="number">0</span>, Projectile.frame * Projectile.height, Projectile.width, Projectile.height);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绘制弹幕</span></span><br><span class="line">            Main.spriteBatch.Draw(</span><br><span class="line">                Terraria.GameContent.TextureAssets.Projectile[Projectile.type].Value,</span><br><span class="line">                Projectile.Center - Main.screenPosition,</span><br><span class="line">                sourceRectangle,</span><br><span class="line">                lightColor,</span><br><span class="line">                Projectile.rotation,</span><br><span class="line">                <span class="keyword">new</span> Vector2(Projectile.width / <span class="number">2</span>, Projectile.height / <span class="number">2</span>),</span><br><span class="line">                Projectile.scale,</span><br><span class="line">                SpriteEffects.None,</span><br><span class="line">                <span class="number">0f</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 返回false，表示我们自己绘制了弹幕</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>帕鲁工作台</h1><ul><li>工作台实际上就是一个物块而已</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Items.WorkBench</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PolworldBasicWorkBenchItem</span> : <span class="title">ModItem</span></span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Item.width = <span class="number">28</span>;</span><br><span class="line">            Item.height = <span class="number">14</span>;</span><br><span class="line">            Item.maxStack = <span class="number">99</span>;</span><br><span class="line">            Item.useTurn = <span class="literal">true</span>;</span><br><span class="line">            Item.autoReuse = <span class="literal">true</span>;</span><br><span class="line">            Item.useAnimation = <span class="number">15</span>;</span><br><span class="line">            Item.useTime = <span class="number">10</span>;</span><br><span class="line">            Item.useStyle = ItemUseStyleID.Swing;</span><br><span class="line">            Item.consumable = <span class="literal">true</span>;</span><br><span class="line">            Item.createTile = ModContent.TileType&lt;Tiles.PolworldBasicWorkBench&gt;(); <span class="comment">// 设置对应的Tile</span></span><br><span class="line">            Item.rare = ItemRarityID.Blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AddRecipes</span>()</span></span><br><span class="line">        &#123;          </span><br><span class="line">            Recipe recipe = CreateRecipe();</span><br><span class="line">            recipe.AddIngredient(ItemID.Wood, <span class="number">30</span>);</span><br><span class="line">            recipe.AddIngredient(ItemID.Sapphire, <span class="number">10</span>);</span><br><span class="line">            recipe.AddIngredient(ItemID.Silk, <span class="number">10</span>);</span><br><span class="line">            recipe.AddTile(TileID.WorkBenches);</span><br><span class="line">            recipe.Register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>随后在制作物品的时候，指明需要的物块即可</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PolWorldMounts.Content.Mounts;</span><br><span class="line"><span class="keyword">using</span> PolWorldMounts.Content.Tiles;</span><br><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolWorldMounts.Content.Items.Mounts</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FenglopeMountItem</span> : <span class="title">ModItem</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span> &#123;</span><br><span class="line">Item.width = <span class="number">20</span>;</span><br><span class="line">Item.height = <span class="number">30</span>;</span><br><span class="line">Item.useTime = <span class="number">20</span>;</span><br><span class="line">Item.useAnimation = <span class="number">20</span>;</span><br><span class="line">Item.useStyle = ItemUseStyleID.Swing;</span><br><span class="line">Item.<span class="keyword">value</span> = Item.sellPrice(gold: <span class="number">3</span>);</span><br><span class="line">Item.rare = ItemRarityID.Yellow;</span><br><span class="line">Item.UseSound = SoundID.Item79;</span><br><span class="line">Item.noMelee = <span class="literal">true</span>;</span><br><span class="line">Item.mountType = ModContent.MountType&lt;FenglopeMount&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AddRecipes</span>()</span> &#123;</span><br><span class="line">            Recipe recipe = CreateRecipe();</span><br><span class="line">recipe.AddIngredient(ItemID.HallowedBar, <span class="number">20</span>);</span><br><span class="line">recipe.AddIngredient(ItemID.SoulofFlight, <span class="number">5</span>);</span><br><span class="line">recipe.AddIngredient(ItemID.SoulofLight, <span class="number">10</span>);</span><br><span class="line">            recipe.AddIngredient(ItemID.Sapphire, <span class="number">5</span>);</span><br><span class="line">recipe.AddTile(Mod, <span class="string">&quot;PolworldBasicWorkBench&quot;</span>);  <span class="comment">// 这里指明需要帕鲁基础工作台就好啦，这样的话必须使用工作台才能制作哦</span></span><br><span class="line">            recipe.Register();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">持续更新中...</summary>
    
    
    
    <category term="Mod开发" scheme="https://cyborg2077.github.io/categories/Mod%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Mod开发" scheme="https://cyborg2077.github.io/tags/Mod%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>泰拉瑞亚Mod开发指南</title>
    <link href="https://cyborg2077.github.io/2024/07/06/TModDev/"/>
    <id>https://cyborg2077.github.io/2024/07/06/TModDev/</id>
    <published>2024-07-06T06:21:01.000Z</published>
    <updated>2024-07-19T15:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Hello World</h1><ul><li>欢迎来到泰拉瑞亚的创意无限世界，在这里，不仅仅是探索与冒险，更是创造与实现梦想的天地。作为一名勇敢的开发者，你即将他上的旅程，不近视深入这个像素世界的腹地，更是要在其基础上构建属于你自己的奇迹。本指南将是你受众的罗盘，引领你步入泰拉瑞亚模组开发的神秘大门。</li><li>想象一下，当你手持代码之间，桥下第一个字符，一个简单的&quot;Hello World&quot;便能在泰拉瑞亚广阔的天地间回响，这不仅是变成传统的直径，也是你成为游戏世界造物主的第一步。泰拉瑞亚mod开发的魅力，在于它赋予你重塑世界规则的能力，无论是新奇的武器、独特的怪物，还是整个异世界的创造，一切皆有可能。</li><li>本指南将循序渐进，从最基础的设置环境开始，逐步深入如何使用C#和TModLoader来编写你的第一个mod，理解背后的逻辑与技巧，为你后续的创意开发打下坚实的基础。</li><li>无论你是编程新手，还是经验丰富的开发者初涉游戏领域，这篇指南都力求让你的每一步学习都充满乐趣与成就感。准备好了吗？让我们异同步入泰拉瑞亚的编程仙境，用一行行代码编制出属于你的传奇故事。</li><li>让我们开始吧！</li></ul><h1>Mod制作准备</h1><ol><li>一台电脑</li><li>玩过泰拉瑞亚，原版或者灾厄至少通关过一次（博主原版大师、灾厄死亡大师都通关了）</li><li>安装IDE，强烈建议VSCode，主要是写C#</li><li>会使用画图软件（Photoshop等）</li></ol><h2 id="NET环境安装">.NET环境安装</h2><ul><li>开发环境的安装，可以直接看微软官方教程</li></ul><div class="tag link"><a class="link-card" title="" href="https://dotnet.microsoft.com/zh-cn/learn/dotnet/hello-world-tutorial/install"><div class="left"><img src="https://dotnet.microsoft.com/favicon.ico"/></div><div class="right"><p class="text"></p><p class="url">https://dotnet.microsoft.com/zh-cn/learn/dotnet/hello-world-tutorial/install</p></div></a></div><ul><li>这里再建议安装一个通义灵码的插件，用起来还是挺方便的<br><img src="https://s21.ax1x.com/2024/07/07/pkWQOwq.png" alt=""></li></ul><h2 id="TModLoader的介绍与安装">TModLoader的介绍与安装</h2><h3 id="源码Mod和TML-Mod的区别">源码Mod和TML Mod的区别</h3><blockquote><ul><li>源码Mod的制作方法是通过反编译泰拉瑞亚源码，并在此基础上修改而制作的模组。优点是自由度高，可以实现的功能多。缺点是很难管理，灵活度低下，尤其是当Mod规模扩大的时候。</li><li>TML Mod通过提供原版的接口使得开发者可以在一个与原版独立的环境开发Mod，也就是说，开发者可以不用关注原版冗长的代码实现细节，而是与接口进行互动。优点是管理方便、灵活。缺点是实现的功能具有局限性，有时候需要等待TML开发者添加了某些接口才能实现特定的功能。但是随着TML这么多年功能的不断的完善，以及原版泰拉瑞亚代码越来越晦涩难懂，TML开发最终占据了主导。</li></ul></blockquote><h3 id="TModLoader的安装">TModLoader的安装</h3><ul><li><p>如果你之前打过mod玩，那么其实你已经安装好了，对吧</p></li><li><p>如果你是第一次使用mod游玩，直接在Steam上下载安装即可<br><img src="https://s21.ax1x.com/2024/07/07/pkWlMXd.png" alt=""></p></li><li><p>安装完成之后，直接TMOD，启动！<br><img src="https://s21.ax1x.com/2024/07/07/pkWl37t.png" alt=""></p></li><li><p>点击创意工坊，进入创意工坊中心<br><img src="https://s21.ax1x.com/2024/07/06/pkWi8uF.png" alt=""></p></li><li><p>点击开发模组，会看到如下页面<br><img src="https://s21.ax1x.com/2024/07/07/pkWlD7q.png" alt=""></p></li></ul><h1>第一个Mod</h1><ul><li><p>点击右下角创建模组，填写模组信息我们就可以初始化一个模组项目了</p><ul><li>ModName：模组名称，不要夹杂空格</li><li>Mod DisplayName：模组显示名称</li><li>Mod Author：模组作者</li><li>BasicSword：初始之剑，这里填写的是剑的名称，创建项目时，会自动生成这把剑的初始化代码<br><img src="https://s21.ax1x.com/2024/07/07/pkWlg9U.png" alt=""></li></ul></li><li><p>点击创建后，初始化的项目如下<br><img src="https://s21.ax1x.com/2024/07/07/pkW1SEt.png" alt=""></p></li><li><p>我们在VSCode里打开这个项目，首先看一下目录结构<br><img src="https://s21.ax1x.com/2024/07/07/pkW1PC8.png" alt=""></p><ol><li><code>[ModName].cs</code>：这是Mod类。它是任何Mod的核心文件，每个Mod只能存在一个Mod类，对于简单的Mod，这个文件会非常简洁，但是这个类中可以发生各种全局性的事情。</li><li><code>description.txt</code>：包含Mod的描述文本，在Mod菜单中点击“更多信息”按钮可以在游戏中查看。如果你愿意，可以创建一个带有额外BBCode格式的description_workshop.txt文件，该文件将在Steam创意工坊网站上显示。</li><li><code>build.txt</code>：包含Mod的版本、作者和显示信息。可以包含其他值。这个文件是必要的。</li><li><code>icon.png</code>：在游戏中显示的80x80图标。你可以为Steam创意工坊创建一个更详细或更高分辨率的icon_workshop.png图标，该文件可以达到512x512像素。</li><li><code>[ModName].csproj</code>：为Visual Studio设置的项目文件，用于调试你的Mod。调试非常有用，但需要一些学习，不要删除它。</li><li><code>Properties/launchSettings.json</code>：与ModName.csproj相关，包含用于调试tModLoader文件路径，不要删除，随着你的经验积累，它会变得很有用。</li><li><code>Content/Items/[ItemName].cs</code>：一个简单的剑物品。以此作为示例，学习如何制作其他ModItem类。</li><li><code>Content/Items/[ItemName].png</code>：对应的物品图像。</li><li><code>Localization/en-US_Mods.[ModName].hjson</code>：包含Mod中内容的英文文本。它目前包含生成的剑的显示名称和工具提示。这个文件会随着你向Mod添加新内容而自动更新条目。请参阅<a href="https://github.com/tModLoader/tModLoader/wiki/Localization">Localization Wiki</a>了解更多本地化及支持其他语言的信息。</li></ol></li><li><p>下面我们直接来看初始化剑的代码，以及对应的配置文件信息。</p></li></ul><div class="tabs" id="初始化剑"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#初始化剑-1">Excalibur.cs</button></li><li class="tab"><button type="button" data-href="#初始化剑-2">Localization.hjson</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化剑-1"><ul><li>下面这段代码就是初始之剑的代码，我们先来看<code>SetDefaults()</code>方法，这个方法就是初始化物品的配置信息，这里我们配置了物品的伤害、攻击类型、宽高、使用时间、使用动画、使用方式、击退、价值、稀有度、音效、自动使用（近战武器自动挥舞）等。</li><li>同时我们需要关注<code>AddRecipes()</code>方法，这个方法就是添加物品的合成配方，这里我们添加了合成配方，需要用10个土块，并且需要工作台才可以制作。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyFirstMod.Content.Items</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// This is a basic item template.</span></span><br><span class="line">    <span class="comment">// Please see tModLoader&#x27;s ExampleMod for every other example:</span></span><br><span class="line">    <span class="comment">// https://github.com/tModLoader/tModLoader/tree/stable/ExampleMod</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Excalibur</span> : <span class="title">ModItem</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The Display Name and Tooltip of this item can be edited in the &#x27;Localization/en-US_Mods.MyFirstMod.hjson&#x27; file.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span> &#123;</span><br><span class="line">            Item.damage = <span class="number">50</span>;</span><br><span class="line">            Item.DamageType = DamageClass.Melee;</span><br><span class="line">            Item.width = <span class="number">40</span>;</span><br><span class="line">            Item.height = <span class="number">40</span>;</span><br><span class="line">            Item.useTime = <span class="number">20</span>;</span><br><span class="line">            Item.useAnimation = <span class="number">20</span>;</span><br><span class="line">            Item.useStyle = ItemUseStyleID.Swing;</span><br><span class="line">            Item.knockBack = <span class="number">6</span>;</span><br><span class="line">            Item.<span class="keyword">value</span> = Item.buyPrice(silver: <span class="number">1</span>);</span><br><span class="line">            Item.rare = ItemRarityID.Blue;</span><br><span class="line">            Item.UseSound = SoundID.Item1;</span><br><span class="line">            Item.autoReuse = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AddRecipes</span>()</span> &#123;</span><br><span class="line">            Recipe recipe = CreateRecipe();</span><br><span class="line">            recipe.AddIngredient(ItemID.DirtBlock, <span class="number">10</span>);</span><br><span class="line">            recipe.AddTile(TileID.WorkBenches);</span><br><span class="line">            recipe.Register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>那我们现在加载Mod，并且进入游戏<br><img src="https://s21.ax1x.com/2024/07/07/pkW3iIx.png" alt=""></li><li>建造一个工作台，并且使用10个土块，即可制造我们的初始之剑<br><img src="https://s21.ax1x.com/2024/07/07/pkW3AJK.png" alt=""></li><li>50点伤害有点不够看啊，那我们现在修改一下武器伤害以及攻击间隔，随后重新构建并加载我们的Mod，然后再次进入游戏</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">using Terraria;</span><br><span class="line">using Terraria.ID;</span><br><span class="line">using Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line">namespace MyFirstMod.Content.Items</span><br><span class="line">&#123;</span><br><span class="line">    public class Excalibur : ModItem</span><br><span class="line">    &#123;</span><br><span class="line">        public override void SetDefaults() &#123;</span><br><span class="line"><span class="deletion">-           Item.damage = 50;</span></span><br><span class="line"><span class="addition">+           Item.damage = 99999999;</span></span><br><span class="line">            Item.DamageType = DamageClass.Melee;</span><br><span class="line">            Item.width = 40;</span><br><span class="line">            Item.height = 40;</span><br><span class="line"><span class="deletion">-           Item.useTime = 20;</span></span><br><span class="line"><span class="deletion">-           Item.useAnimation = 20;</span></span><br><span class="line"><span class="addition">+           Item.useTime = 5;</span></span><br><span class="line"><span class="addition">+           Item.useAnimation = 5;</span></span><br><span class="line">            Item.useStyle = ItemUseStyleID.Swing;</span><br><span class="line">            Item.knockBack = 6;</span><br><span class="line">            Item.value = Item.buyPrice(silver: 1);</span><br><span class="line">            Item.rare = ItemRarityID.Blue;</span><br><span class="line">            Item.UseSound = SoundID.Item1;</span><br><span class="line">            Item.autoReuse = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void AddRecipes() &#123;</span><br><span class="line">            Recipe recipe = CreateRecipe();</span><br><span class="line">            recipe.AddIngredient(ItemID.DirtBlock, 10);</span><br><span class="line">            recipe.AddTile(TileID.WorkBenches);</span><br><span class="line">            recipe.Register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/07/07/pkW3VzD.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="初始化剑-2"><ul><li>在这里可以配置Mod物品的显示名称和提示信息。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># This file will automatically update with entries for new content after a build and reload.</span><br><span class="line"></span><br><span class="line">Items<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  Excalibur<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    DisplayName<span class="punctuation">:</span> <span class="string">&quot;Excalibur&quot;</span></span><br><span class="line">    Tooltip<span class="punctuation">:</span></span><br><span class="line">      &#x27;&#x27;&#x27;</span><br><span class="line">      Template of an item</span><br><span class="line">      Replacing this tooltip is duty </span><br><span class="line">      It&#x27;s snowing on Mt.Fuji</span><br><span class="line">      &#x27;&#x27;&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>修改初始之剑的名称以及描述</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Items<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  Excalibur<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    DisplayName<span class="punctuation">:</span> Hello World!</span><br><span class="line">    Tooltip<span class="punctuation">:</span> 代码之力，小子！</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1><a href="https://github.com/tModLoader/tModLoader/wiki/Basic-Item">Basic Item</a></h1><ul><li>本小节旨在解释所有Item之间的共同点。</li></ul><h2 id="什么是物品（What-is-an-Item）？">什么是物品（What is an Item）？</h2><ul><li>了解物品（Item）、抛射物（Projectiles）和方块（Tiles）之间的区别非常重要。刚开始时，如果你不清楚它们的不同之处，可能会无意中混淆概念。例如，有些人可能会混淆并试图将<code>工作台物品（Item）</code>添加到<code>配方</code>中，而实际上他们想要添加的是<code>工作台方块（Tile）</code>。还需要意识到，像回旋镖武器这样的东西实际上由物品和抛射物组成。虽然这是一个简单的概念，但请记住这一点。</li></ul><h2 id="制作物品（Making-an-Item）">制作物品（Making an Item）</h2><ul><li>要将物品添加到泰拉瑞亚，我们首先必须创建一个类，该类需要继承<code>ModItem</code>，实际上上面小节中的<code>[ModName].cs</code>就是个样例，在创建Mod的时候已经为我们生成了一把剑的物品。</li></ul><h3 id="设置默认值">设置默认值</h3><ul><li>物品最重要的部分是 <code>SetDefaults</code>。<code>SetDefaults</code> 是设置物品属性的地方，例如物品使用什么弹药、物品的大小以及物品放置的是哪个方块。请参阅 <a href="https://github.com/tModLoader/tModLoader/wiki/Item-Class-Documentation">Item 类文档</a> ，了解在 SetDefaults 中常见的设置值的含义。你还可以通过访问 <a href="https://github.com/tModLoader/tModLoader/wiki/Vanilla-Item-Field-Values">Vanilla Item</a> 来查看原版物品字段值。</li></ul><h3 id="本地化">本地化</h3><ul><li>构建你的 Mod 后，本地化文件通常位于 My Games\Terraria\tModLoader\ModSources\MyModName\Localization\en-US_Mods.MyModName.hjson，将会填充有新添加物品的条目。对于物品，你会看到 DisplayName 和 Tooltip 的条目。DisplayName 将默认为类名，单词之间用大写字母分隔。Tooltip 默认为空。你可以编辑此文件以自定义这些本地化内容：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Items<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  NameHere<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    DisplayName<span class="punctuation">:</span> Name Here</span><br><span class="line">    Tooltip<span class="punctuation">:</span> This is a modded item.</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1><a href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#what-is-ai">Basic Projectile</a></h1><ul><li>在学习向量以及计算几何的知识之前，最好能先创建一个自己的弹幕。这样我们可以通过这个弹幕观察到数学是如何发挥作用的。</li></ul><h2 id="弹幕基础">弹幕基础</h2><h3 id="什么是Projectile">什么是Projectile</h3><ul><li>在开始修改弹幕之前，我们需要先了解物品和弹幕之间的区别。物品是可以存储在库存中（例如背包、箱子等）的对象，而弹幕时从武器或者敌人射出的对象，例如子弹、箭等。</li></ul><h3 id="什么情况下会使用弹幕？">什么情况下会使用弹幕？</h3><ul><li>在泰拉瑞亚中，许多物品因为弹幕的存在而具有功能性，例如枪和弓（子弹和箭）、激光、炸弹和其他投掷物品，以及大多数魔法武器，甚至一些抓钩、连枷、长矛、宠物、召唤物、钻头和悠悠球，也会生成弹幕。很多敌怪也可以生成弹幕。</li></ul><h3 id="创建基本弹幕">创建基本弹幕</h3><ul><li>在创建弹幕之前，我们最好先规范一下目录结构，为后续所有的弹幕建立一个单独的文件夹，名为Porjectiles；同时也为刚刚的剑创建一个单独的文件夹，名为Sowrds。<br><img src="https://s21.ax1x.com/2024/07/07/pkWNTpt.png" alt=""></li><li>随后在Projectiles目录下创建<code>[ProjectileName].cs</code>和<code>[ProjectileName].png</code>（弹幕贴图）文件。创建弹幕时，我们需要继承<code>ModProjectile</code>类，同时需要实现<code>SetDefaults</code>方法，<code>SetDefaults</code>方法中需要设置弹幕的属性，例如弹幕的大小、弹幕的速度、弹幕的伤害、弹幕的伤害类型等。</li><li>下面代码中的<code>namespace</code>需要替换为你自己的模组文件夹名/命名空间。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyFirstMod.Content.Items.Projectiles</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">      Projectile.arrow = <span class="literal">true</span>;</span><br><span class="line">      Projectile.width = <span class="number">10</span>;</span><br><span class="line">      Projectile.height = <span class="number">10</span>;</span><br><span class="line">      Projectile.aiStyle = ProjAIStyleID.Arrow;</span><br><span class="line">      Projectile.friendly = <span class="literal">true</span>;</span><br><span class="line">      Projectile.DamageType = DamageClass.Ranged;</span><br><span class="line">      AIType = ProjectileID.WoodenArrowFriendly;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Additional hooks/methods here.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用弹幕">应用弹幕</h3><div class="note info no-icon flat"><ul><li>请记住，物品和弹幕是不同的。一个常见的错误是，模组开发者创建了一个弹幕，却不了解还需要创建一个使用该弹幕的东西。例如，对于投掷飞刀武器，您需要同时创建一个物品和一个弹幕。弹药物品也需要有一个独特的弹幕与之关联。如果弹幕是由NPC生成的，您不总是需要同时创建物品和弹幕。测试弹幕的最简单方法是创建一个物品，并将 Item.shoot 设置为弹幕。<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Item.shoot = ModContent.ProjectileType&lt;MyProjectile&gt;();</span><br></pre></td></tr></table></figure></li></ul></div><ul><li>在刚刚我们已将创建好了一个弹幕，现在我们将其作用于武器上<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ using MyFirstMod.Content.Items.Projectiles;</span></span><br><span class="line">using Terraria;</span><br><span class="line">using Terraria.ID;</span><br><span class="line">using Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line">namespace MyFirstMod.Content.Items.Swords</span><br><span class="line">&#123;</span><br><span class="line">    public class Excalibur : ModItem</span><br><span class="line">    &#123;</span><br><span class="line">        public override void SetDefaults() &#123;</span><br><span class="line">            Item.damage = 99999999;</span><br><span class="line">            Item.DamageType = DamageClass.Melee;</span><br><span class="line">            Item.width = 40;</span><br><span class="line">            Item.height = 40;</span><br><span class="line">            Item.useTime = 5;</span><br><span class="line">            Item.useAnimation = 5;</span><br><span class="line">            Item.useStyle = ItemUseStyleID.Swing;</span><br><span class="line">            Item.knockBack = 6;</span><br><span class="line">            Item.value = Item.buyPrice(silver: 1);</span><br><span class="line">            Item.rare = ItemRarityID.Blue;</span><br><span class="line">            Item.UseSound = SoundID.Item1;</span><br><span class="line">            Item.autoReuse = true;</span><br><span class="line"><span class="addition">+           Item.shoot = ModContent.ProjectileType&lt;MyFirstProjectile&gt;();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void AddRecipes() &#123;</span><br><span class="line">            Recipe recipe = CreateRecipe();</span><br><span class="line">            recipe.AddIngredient(ItemID.DirtBlock, 10);</span><br><span class="line">            recipe.AddTile(TileID.WorkBenches);</span><br><span class="line">            recipe.Register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重新编译并加载Mod，进入游戏，挥舞武器，可以看到我们刚刚制作的弹幕已经生成了。<br><img src="https://s21.ax1x.com/2024/07/07/pkWUdjf.png" alt=""></li></ul><h3 id="SetDefaults">SetDefaults</h3><ul><li>弹幕最重要的部分是SetDefaults方法。该方法是设置弹幕值的地方，例如命中宽度和高度、弹幕是友军还是敌军、以及弹幕将使用哪个AI。请参阅<a href="https://github.com/tModLoader/tModLoader/wiki/Projectile-Class-Documentation">弹幕类文档</a>以了解通常设置的值的含义。还可以通过放温暖<a href="https://github.com/tModLoader/tModLoader/wiki/Vanilla-Projectile-Field-Values">Vanilla弹幕字段值</a>来查看Vanilla弹幕值。</li></ul><h4 id="Projectile-Damage">Projectile.Damage</h4><ul><li>一个常见的错误是在SetDefaults中设置Projectiles.Damage，这不起作用，因为弹幕的伤害值总是被生成弹幕时传递给Projectile.NewProjectile的值覆盖。通常，生成弹幕的物品或NPC将决定伤害值。</li></ul><h3 id="Other-Hooks-Methods">Other Hooks/Methods</h3><ul><li>ModProjectile文档列出了许多其他钩子/方法，您可以使用它们生成独特的弹幕。例如在弹幕击中敌人时施加减益效果，可以使用OnHitNpc方法，要在弹幕击中物块时做些事情，可以使用OnTileCollide方法。</li></ul><h3 id="What-is-AI">What is AI</h3><ul><li>弹幕的AI是弹幕最重要的方面，它控制弹幕在生成后如何移动和行动，对于新手模组开发者来说，最简单的方法是通过设置<code>Projectile.aiStyle = #</code>和<code>AIType = ProjectileID.NameHere</code>来一来其他原版弹幕已经使用的AI代码。你分配给<code>Projectile.aiStyle</code>的值应该与<code>ProjectileID.NameHere</code>的值相匹配。这杯成为模仿原版弹幕。</li><li>随着你对更高级的弹幕移动行为的需求，你会发现模仿原版弹幕AI非常有限，所以下面我们将讨论如何自定义AI。</li></ul><h4 id="使用原版AI">使用原版AI</h4><ul><li>我们可以使用原版AI来初始化我们的弹幕。让我们制作一个回旋镖，使用和原版回旋镖弹幕相同的aiStyle。我们可以在<a href=""></a>中查找回旋镖弹幕，可以看到原版回旋镖使用的aiStyle为3。</li><li>那么我们可以在代码中使用<code>Projectile.aiStyle = 3;</code>，或者将3改为<code>ProjectileID.Boomerang</code>，增强代码的可读性。</li><li>为了让这个回旋镖更简单，我们可以使用<code>Projectile.CloneDefaults(ProjectileID.EnchantedBoomerang);</code>，这将复制所有其他的默认值。这样，你将获得一个与原版回旋镖行为相同的弹幕。</li><li>通过设置AIType可以改变弹幕的粒子特效。</li></ul><div class="tabs" id="原版ai回旋镖"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#原版ai回旋镖-1">MyFirstBoomerang.cs</button></li><li class="tab"><button type="button" data-href="#原版ai回旋镖-2">BoomerangProjectileDemo.cs</button></li><li class="tab"><button type="button" data-href="#原版ai回旋镖-3">BoomerangProjectileDemo.cs Clone</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="原版ai回旋镖-1"><ul><li>请注意，武器贴图请自行解决。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MyFirstMod.Content.Items.Projectiles;</span><br><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyFirstMod.Content.Items.Boomerangs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyFirstBoomerang</span> : <span class="title">ModItem</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span> &#123;</span><br><span class="line">            Item.damage = <span class="number">99999999</span>;</span><br><span class="line">            Item.DamageType = DamageClass.Melee;</span><br><span class="line">            Item.width = <span class="number">40</span>;</span><br><span class="line">            Item.height = <span class="number">40</span>;</span><br><span class="line">            Item.useTime = <span class="number">5</span>;</span><br><span class="line">            Item.useAnimation = <span class="number">5</span>;</span><br><span class="line">            Item.useStyle = ItemUseStyleID.Swing;</span><br><span class="line">            Item.knockBack = <span class="number">6</span>;</span><br><span class="line">            Item.<span class="keyword">value</span> = Item.buyPrice(silver: <span class="number">1</span>);</span><br><span class="line">            Item.rare = ItemRarityID.Blue;</span><br><span class="line">            Item.UseSound = SoundID.Item1;</span><br><span class="line">            Item.autoReuse = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 重点是这一行，指定弹幕类型</span></span><br><span class="line">            Item.shoot = ModContent.ProjectileType&lt;BoomerangProjectileDemo&gt;();</span><br><span class="line">            Item.shootSpeed = <span class="number">10f</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AddRecipes</span>()</span> &#123;</span><br><span class="line">            Recipe recipe = CreateRecipe();</span><br><span class="line">            recipe.AddIngredient(ItemID.DirtBlock, <span class="number">10</span>);</span><br><span class="line">            recipe.AddTile(TileID.WorkBenches);</span><br><span class="line">            recipe.Register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="原版ai回旋镖-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyFirstMod.Content.Items.Projectiles</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BoomerangProjectileDemo</span> : <span class="title">ModProjectile</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Projectile.width = <span class="number">10</span>;</span><br><span class="line">            Projectile.height = <span class="number">10</span>;</span><br><span class="line">            Projectile.aiStyle = ProjAIStyleID.Boomerang;</span><br><span class="line">            Projectile.friendly = <span class="literal">true</span>;</span><br><span class="line">            Projectile.DamageType = DamageClass.Ranged;</span><br><span class="line">            AIType = ProjectileID.WoodenArrowFriendly;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Additional hooks/methods here.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="原版ai回旋镖-3"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyFirstMod.Content.Items.Projectiles</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BoomerangProjectileDemo</span> : <span class="title">ModProjectile</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Projectile.CloneDefaults(ProjectileID.EnchantedBoomerang);</span><br><span class="line">            AIType = ProjectileID.EnchantedBoomerang;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Additional hooks/methods here.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>重新编译并加载Mod，进入游戏，我们就可以使用10个土块在工作台旁制作我们刚刚编写的回旋镖了。亲测手感和原版几乎无异（虽然我也不怎么用回旋镖武器就是了）。</li></ul><h2 id="自定义AI">自定义AI</h2><ul><li>本小节将讨论你可以在AI中添加的元素，记得如果使用<code>Projectile.CloneDefaults</code>复制其他弹幕默认值，要将<code>Projectile.aiStyle</code>的值设回<code>0</code>。所有自定义AI的代码都放在<code>ModProjectile.AI</code>方法中。也就是重写AI()方法</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Terraria;</span><br><span class="line"><span class="keyword">using</span> Terraria.ID;</span><br><span class="line"><span class="keyword">using</span> Terraria.ModLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyFirstMod.Content.Items.Projectiles</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyFirstProjectile</span> : <span class="title">ModProjectile</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetDefaults</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Projectile.arrow = <span class="literal">true</span>;</span><br><span class="line">            Projectile.width = <span class="number">10</span>;</span><br><span class="line">            Projectile.height = <span class="number">10</span>;</span><br><span class="line">            Projectile.aiStyle = ProjAIStyleID.Arrow;</span><br><span class="line">            Projectile.friendly = <span class="literal">true</span>;</span><br><span class="line">            Projectile.DamageType = DamageClass.Ranged;</span><br><span class="line">            AIType = ProjectileID.WoodenArrowFriendly;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Additional hooks/methods here.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重写此方法，自定义AI</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">AI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">base</span>.AI();</span><br><span class="line">            <span class="comment">// Additional code here.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Timers">Timers</h3><ul><li>Timers：计时器</li><li>许多弹幕使用计时器来延迟动作。通常我们使用<code>Projectile.ai[0]</code>或<code>Projectile.ai[1]</code>，因为这些值会自动同步，这里我们计数到30，换句话说，半秒。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Projectile.ai[<span class="number">0</span>] += <span class="number">1f</span>;</span><br><span class="line"><span class="keyword">if</span> (Projectile.ai[<span class="number">0</span>] &gt;= <span class="number">30f</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 半秒过去了。重置计时器等。</span></span><br><span class="line">    Projectile.ai[<span class="number">0</span>] = <span class="number">0f</span>;</span><br><span class="line">    Projectile.netUpdate = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 在这里做点什么，也许改变到新状态。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gravity">Gravity</h3><ul><li>Gravity：重力</li><li>弹幕实际上没有重力，每个带有重力移动的弹幕实际上是它们的AI代码实现了重力。要实现重力，只需要在<code>Projectile.velovity.Y</code>中添加一个小值。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Projectile.velocity.Y = Projectile.velocity.Y + <span class="number">0.1f</span>; <span class="comment">// 0.1f 是箭的重力，0.4f 是飞刀的重力</span></span><br><span class="line"><span class="keyword">if</span> (Projectile.velocity.Y &gt; <span class="number">16f</span>) <span class="comment">// 这个检查实现了“终端速度”。我们不希望弹幕越来越快。</span></span><br><span class="line">&#123;</span><br><span class="line">    Projectile.velocity.Y = <span class="number">16f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据上述的计时器和重力的设定，我们现在可以写一个延迟重力效果</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Projectile.ai[<span class="number">0</span>] += <span class="number">1f</span>; <span class="comment">// 使用计时器等待15个刻度后再应用重力。</span></span><br><span class="line"><span class="keyword">if</span> (Projectile.ai[<span class="number">0</span>] &gt;= <span class="number">15f</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Projectile.ai[<span class="number">0</span>] = <span class="number">15f</span>;</span><br><span class="line">    Projectile.velocity.Y = Projectile.velocity.Y + <span class="number">0.1f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Projectile.velocity.Y &gt; <span class="number">16f</span>) <span class="comment">// 终端速度检查，设置弹幕速度不超过16像素/帧。</span></span><br><span class="line">&#123;</span><br><span class="line">    Projectile.velocity.Y = <span class="number">16f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wind-Resistance">Wind Resistance</h3><ul><li>Wind Resistance：风阻</li><li>纵向的加速度是重力控制的，那么横向的加速度是风阻控制的。</li><li>通过减少<code>Projectile.velocity.X</code>的乘积系数，我们可以轻松实现风阻。结合计时器，我们同样可以让弹幕越来越慢，实现类似蜜蜂手雷的效果。（打肉山的时候，在平台扔蜜蜂手雷，一开始速度蛮快的，但是会越来越慢，直至爆炸）</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Projectile.ai[<span class="number">0</span>] += <span class="number">1f</span>;</span><br><span class="line"><span class="keyword">if</span> (Projectile.ai[<span class="number">0</span>] &gt;= <span class="number">15f</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的示例没有加上重力，无伤大雅</span></span><br><span class="line">    Projectile.velocity.X = Projectile.velocity.X * <span class="number">0.97f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rotation">Rotation</h3><ul><li>Rotation：旋转</li></ul><h4 id="恒定旋转">恒定旋转</h4><ul><li>我们可以在AI中添加<code>Projectile.rotation</code>使其想回旋镖一样旋转。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projectile.rotation += <span class="number">0.4f</span> * Projectile.direction;</span><br></pre></td></tr></table></figure><h4 id="面向前方">面向前方</h4><h1>自定义坐骑</h1>]]></content>
    
    
    <summary type="html">持续更新中，咕咕咕</summary>
    
    
    
    <category term="Mod开发" scheme="https://cyborg2077.github.io/categories/Mod%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Mod开发" scheme="https://cyborg2077.github.io/tags/Mod%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈操作系统的虚拟内存</title>
    <link href="https://cyborg2077.github.io/2024/02/25/OSVirtureMemory/"/>
    <id>https://cyborg2077.github.io/2024/02/25/OSVirtureMemory/</id>
    <published>2024-02-25T14:33:38.000Z</published>
    <updated>2024-02-25T15:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1>简介</h1><ul><li>虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。大多数操作系统都使用了虚拟内存，如Windows家族的“虚拟内存”；Linux的“交换空间”等。</li></ul>]]></content>
    
    
    <summary type="html">新需求还没出来，刚好可以系统性的学点东西，提升一下自己</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="OS" scheme="https://cyborg2077.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>实现一个Cache，包括LRU和在X秒后过期的逻辑</title>
    <link href="https://cyborg2077.github.io/2024/02/25/LRUCacheExpire/"/>
    <id>https://cyborg2077.github.io/2024/02/25/LRUCacheExpire/</id>
    <published>2024-02-25T06:56:38.000Z</published>
    <updated>2024-02-25T12:38:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>LRU（Least Recently Used）</h1><ul><li>最近最少使用，它的设计原则借鉴了<code>时间局部性原理</code>，该算法认为如果数据最近被访问过，那么将来被访问的几率也更高，反之亦然。其原理是将数据按照其被访问的时间形成一个有序序列，最久未被使用的数据应该最早被淘汰掉，即当缓存空间被占满时，缓存内最长时间未被使用的数据将被淘汰掉。</li></ul><h1>大致思路</h1><ul><li>可以简单的维护一个双向链表来实现，每当数据被访问时，使用头插法插入到队首。空间占满时，先移除末尾元素，随后对新元素使用头插法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        Node pre, next;</span><br><span class="line">        <span class="type">int</span> key, value;</span><br><span class="line">        Node(<span class="type">int</span> key, <span class="type">int</span> value) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    Map&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供初始化缓存的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(size);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 命中缓存，将其移动到队首</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            remove(node);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">            res = node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">// 命中缓存，修改键值，并移动到队首</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 1. 修改键值</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="comment">// 移动到队首</span></span><br><span class="line">            remove(node);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未命中缓存，判断缓存是否已满</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mapSize</span> <span class="operator">=</span> map.size();</span><br><span class="line">            <span class="comment">// 已满则移除队尾元素</span></span><br><span class="line">            <span class="keyword">if</span> (mapSize == size) &#123;</span><br><span class="line">                map.remove(tail.pre.key);</span><br><span class="line">                remove(tail.pre);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 插入新元素</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">            map.put(key, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.pre.next = node.next;</span><br><span class="line">        node.next.pre = node.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertToHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">firstNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">        firstNode.pre = node;</span><br><span class="line">        node.next = firstNode;</span><br><span class="line">        node.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基本的缓存逻辑写好了，那么如何编写过期逻辑呢？这里采用的是惰性删除，如果查询该元素时，发现该元素已经过期，那么移除该元素。当插入元素时，需要遍历所有的key，然后删除，当然这个判断条件也可以是当缓存满了的时候再执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        Node pre, next;</span><br><span class="line">        <span class="type">int</span> key, value;</span><br><span class="line">        <span class="type">long</span> expireTime;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> key, <span class="type">int</span> value, <span class="type">long</span> expireTime) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.expireTime = expireTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    Map&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供初始化缓存的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(size);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 命中缓存，将其移动到队首</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            <span class="keyword">if</span> (node.expireTime &gt; System.currentTimeMillis()) &#123;</span><br><span class="line">                remove(node);</span><br><span class="line">                insertToHead(node);</span><br><span class="line">                res = node.value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前节点过期：&quot;</span> + key);</span><br><span class="line">                remove(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value, <span class="type">long</span> expireTime)</span> &#123;</span><br><span class="line">        <span class="comment">// 删除所有过期的key</span></span><br><span class="line">        map.entrySet().removeIf(entry -&gt; &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> entry.getValue().expireTime &lt;= System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (b) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;移除key：&quot;</span> + entry.getValue().key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 命中缓存，修改键值，并移动到队首</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 1. 修改键值</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="comment">// 移动到队首</span></span><br><span class="line">            remove(node);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未命中缓存，判断缓存是否已满</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mapSize</span> <span class="operator">=</span> map.size();</span><br><span class="line">            <span class="comment">// 已满则移除队尾元素</span></span><br><span class="line">            <span class="keyword">if</span> (mapSize == size) &#123;</span><br><span class="line">                map.remove(tail.pre.key);</span><br><span class="line">                remove(tail.pre);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 插入新元素</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value, expireTime);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">            map.put(key, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.pre.next = node.next;</span><br><span class="line">        node.next.pre = node.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertToHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">firstNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">        firstNode.pre = node;</span><br><span class="line">        node.next = firstNode;</span><br><span class="line">        node.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面简单写个main方法验证一下，查看日志是否符合预期</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LRUCache</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LRUCache</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入操作：get 或 put&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;get&quot;</span>.equalsIgnoreCase(operation)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要获取的键：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                scanner.nextLine(); <span class="comment">// 清除缓冲区中的换行符</span></span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">                <span class="keyword">if</span> (value != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;键 &quot;</span> + key + <span class="string">&quot; 对应的值为：&quot;</span> + value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;键 &quot;</span> + key + <span class="string">&quot; 不存在或已过期&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;put&quot;</span>.equalsIgnoreCase(operation)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要放入的键：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要放入的值：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入过期时间（毫秒）：&quot;</span>);</span><br><span class="line">                <span class="type">long</span> <span class="variable">expireTime</span> <span class="operator">=</span> scanner.nextLong();</span><br><span class="line">                scanner.nextLine();</span><br><span class="line"></span><br><span class="line">                cache.put(key, value, System.currentTimeMillis() + expireTime);</span><br><span class="line">                System.out.println(<span class="string">&quot;键值对已放入缓存&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无效的操作，请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">最近有些懈怠了，刷刷题，这种底层实现还是挺有意思的</summary>
    
    
    
    <category term="踩坑日记" scheme="https://cyborg2077.github.io/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://cyborg2077.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Navicat在结构同步时的注意事项</title>
    <link href="https://cyborg2077.github.io/2024/02/07/NavicatSyncPit/"/>
    <id>https://cyborg2077.github.io/2024/02/07/NavicatSyncPit/</id>
    <published>2024-02-07T03:27:30.000Z</published>
    <updated>2024-02-24T05:54:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1>涉及到列名修改时，不要使用Navicat结构同步工具</h1><ul><li>本地环境的表结构如下</li></ul><table><thead><tr><th>id</th><th>phone</th><th>invite_code</th></tr></thead><tbody><tr><td>1</td><td>123-456-789</td><td>ABC123</td></tr><tr><td>2</td><td>987-654-321</td><td>DEF456</td></tr><tr><td>3</td><td>555-555-555</td><td>GHI789</td></tr></tbody></table><ul><li>生产环境的表结构如下</li></ul><table><thead><tr><th>id</th><th>phone</th><th>user_id</th></tr></thead><tbody><tr><td>1</td><td>123-456-789</td><td>ABC123</td></tr><tr><td>2</td><td>987-654-321</td><td>DEF456</td></tr><tr><td>3</td><td>555-555-555</td><td>GHI789</td></tr></tbody></table><ul><li>若此时使用Navicat提供的结构同步工具，实际上执行的命令会是将原有的列删除，然后再新增，会导致该列的内容完全丢失</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `user_info` <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> `invite_code`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `user_info` <span class="keyword">DROP</span> INDEX `idx_invite_code`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `user_info` <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `user_id` <span class="type">varchar</span>(<span class="number">255</span>) AFTER `phone`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `user_info` <span class="keyword">ADD</span> INDEX `idx_invite_code`(`user_id` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE;</span><br></pre></td></tr></table></figure><ul><li>若仅修改字段名，建议使用RENAME命令</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info </span><br><span class="line">RENAME <span class="keyword">COLUMN</span> invite_code <span class="keyword">TO</span> user_id</span><br></pre></td></tr></table></figure><ul><li>若还涉及到字段定义修改，建议使用CHANGE COLUMN命令</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info</span><br><span class="line">CHANGE <span class="keyword">COLUMN</span> invite_code user_id <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在修改字段名时，Navicat提供的SQL是先删除这列再新增</summary>
    
    
    
    <category term="踩坑日记" scheme="https://cyborg2077.github.io/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://cyborg2077.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LangChain入门指南</title>
    <link href="https://cyborg2077.github.io/2024/01/26/LangChainPrimer/"/>
    <id>https://cyborg2077.github.io/2024/01/26/LangChainPrimer/</id>
    <published>2024-01-26T03:27:30.000Z</published>
    <updated>2024-02-24T05:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1>什么是LangChain</h1><ul><li>LangChain是一个强大的框架，旨在帮助开发人员使用语言模型构建端到端的应用程序。它提供了一套工具、组件和接口，可简化创建由大型语言模型 (LLM) 和聊天模型提供支持的应用程序的过程。LangChain 可以轻松管理与语言模型的交互，将多个组件链接在一起，并集成额外的资源，例如 API 和数据库。</li><li>官方文档：<a href="https://python.langchain.com/en/latest/">https://python.langchain.com/en/latest/</a></li></ul><h1>如何使用LangChain</h1><ul><li>要使用 LangChain，开发人员首先要导入必要的组件和工具，例如 LLMs, chat models, agents, chains, 内存功能。这些组件组合起来创建一个可以理解、处理和响应用户输入的应用程序。</li><li>LangChain 为特定用例提供了多种组件，例如个人助理、文档问答、聊天机器人、查询表格数据、与 API 交互、提取、评估和汇总。</li></ul><h1>LangChain的模型</h1><ul><li>LangChain model 是一种抽象，表示框架中使用的不同类型的模型。LangChain 中的模型主要分为三类：<ol><li>LLM（大型语言模型）：这些模型将文本字符串作为输入并返回文本字符串作为输出。它们是许多语言模型应用程序的支柱。</li><li>聊天模型( Chat Model)：聊天模型由语言模型支持，但具有更结构化的 API。他们将聊天消息列表作为输入并返回聊天消息。这使得管理对话历史记录和维护上下文变得容易。</li><li>文本嵌入模型(Text Embedding Models)：这些模型将文本作为输入并返回表示文本嵌入的浮点列表。这些嵌入可用于文档检索、聚类和相似性比较等任务。</li></ol></li></ul><h1>LangChain 的主要特点</h1><ul><li>LangChain 旨在为六个主要领域的开发人员提供支持：<ol><li>LLM 和提示：LangChain 使管理提示、优化它们以及为所有 LLM 创建通用界面变得容易。此外，它还包括一些用于处理 LLM 的便捷实用程序。</li><li>链(Chain)：这些是对 LLM 或其他实用程序的调用序列。LangChain 为链提供标准接口，与各种工具集成，为流行应用提供端到端的链。</li><li>数据增强生成：LangChain 使链能够与外部数据源交互以收集生成步骤的数据。例如，它可以帮助总结长文本或使用特定数据源回答问题。</li><li>Agents：Agents 让 LLM 做出有关行动的决定，采取这些行动，检查结果，并继续前进直到工作完成。LangChain 提供了代理的标准接口，多种代理可供选择，以及端到端的代理示例。</li><li>内存：LangChain 有一个标准的内存接口，有助于维护链或代理调用之间的状态。它还提供了一系列内存实现和使用内存的链或代理的示例。</li><li>评估：很难用传统指标评估生成模型。这就是为什么 LangChain 提供提示和链来帮助开发者自己使用 LLM 评估他们的模型。</li></ol></li></ul><h1>使用示例</h1><h2 id="提示模板（PromptTemplate）">提示模板（PromptTemplate）</h2><ol><li>支持我们来自定义提示模板，不会将用户输入直接发送到 LLM，而是接收用户的输入，然后构造一个prompt将其发送给 LLM。</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts import PromptTemplate</span><br><span class="line"></span><br><span class="line">prompt = PromptTemplate(</span><br><span class="line">    input_variables=[<span class="string">&quot;paperTitle&quot;</span>, <span class="string">&quot;area&quot;</span>, <span class="string">&quot;nums&quot;</span>, <span class="string">&quot;keywords&quot;</span>],</span><br><span class="line">    <span class="attribute">template</span>=<span class="string">&quot;我想让你充当&#123;area&#125;领域的专家，针对于&#123;paperTitle&#125;这个主题，帮我撰写一篇&#123;nums&#125;字的文献综述。包含的关键字如下：&#123;keywords&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prompt.format(<span class="attribute">paperTitle</span>=<span class="string">&quot;大学生网红产品消费行为研究&quot;</span>, <span class="attribute">area</span>=<span class="string">&quot;经济学&quot;</span>, <span class="attribute">nums</span>=500, <span class="attribute">keywords</span>=<span class="string">&quot;大学生、网红、消费、行为研究&quot;</span>))</span><br><span class="line"><span class="comment"># 输出：我想让你充当经济学领域的专家，针对于大学生网红产品消费行为研究这个主题，帮我撰写一篇500字的文献综述。包含的关键字如下：大学生、网红、消费、行为研究</span></span><br></pre></td></tr></table></figure><h2 id="LLM-Chain">LLM Chain</h2><ul><li>我们可以把初始化好的LLM和Template，组合成一个chain</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 初始化llm</span></span><br><span class="line">llm = ChatOpenAI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里其实就可以直接调用llm了</span></span><br><span class="line">llm.invoke(<span class="string">&quot;how can langsmith help with testing?&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 这里可以初始化一个模板</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是世界上最好的科幻小说作者&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 采用这种方式可以将llm和template组合成一个chain</span></span><br><span class="line">chain = prompt | llm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 调用组合后的chain</span></span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你对LangSmith了解吗？&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="Retrieval-Chain（基于检索的chain）">Retrieval Chain（基于检索的chain）</h2><ul><li>当你需要让LLM回答一个问题时（比如 “how can langsmith help with testing?”），有时候你要提供的提示信息可能太多，直接传递给语言模型可能不够有效。为了提供更多上下文，LangChain提供了通过检索（retrieval）的方式获取相关的文档，并将这些文档传递给语言模型。</li><li>在这个过程中，我们使用一个检索器（Retriever）来查找相关的文档，然后将这些文档传递给提示模板。检索器可以由各种数据支持，比如一个 SQL 表、互联网上的数据等，但在官网的Demo里，将使用一个向量存储（vector store）来作为检索器。</li><li>首先，我们需要加载要索引的数据。为了做到这一点，我们将使用 WebBaseLoader（这个应该是LangChain内部实现的一个爬虫工具，要依赖于BeautifulSoup<br>pip install beautifulsoup4</li><li>引入WebBaseLocder来爬取内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> WebBaseLoader</span><br><span class="line"></span><br><span class="line">loader = WebBaseLoader(<span class="string">&quot;https://docs.smith.langchain.com/overview&quot;</span>)</span><br><span class="line">docs = loader.load()</span><br><span class="line"><span class="built_in">print</span>(docs)</span><br><span class="line"><span class="comment"># [Document(page_content=&#x27;\n\n\n\n\nLangSmith Overview and User Guide | 🦜️🛠️ LangSmith\n\n\n\n\n\nSkip to main content🦜️🛠️ LangSmith DocsPython DocsJS/TS DocsSearchGo to AppLangSmithOverviewTracingTesting &amp; EvaluationOrganizationsHubLangSmith CookbookOverviewOn this pageLangSmith Overview and User GuideBuilding reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.Over the past two months, we at LangChain have been building and using LangSmith with the goal of bridging this gap. This is our tactical user guide to outline effective ways to use LangSmith and maximize its benefits.On by default\u200bAt LangChain, all of us have LangSmith’s tracing running in the background by default. On the Python side, this is achieved by setting environment variables, which we establish whenever we launch a virtual environment or open our bash shell and leave them set. The same principle applies to most JavaScript environments through process.env1.The benefit here is that all calls to LLMs, chains, agents, tools, and retrievers are logged to LangSmith. Around 90% of the time we don’t even look at the traces, but the 10% of the time that we do… it’s so helpful. We can use LangSmith to debug:An unexpected end resultWhy an agent is loopingWhy a chain was slower than expectedHow many tokens an agent usedDebugging\u200bDebugging LLMs, chains, and agents can be tough. LangSmith helps solve the following pain points:What was the exact input to the LLM?\u200bLLM calls are often tricky and non-deterministic. The inputs/outputs may seem straightforward, given they are technically string → string (or chat messages → chat message), but this can be misleading as the input string is usually constructed from a combination of user input and auxiliary functions.Most inputs to an LLM call are a combination of some type of fixed template along with input variables. These input variables could come directly from user input or from an auxiliary function (like retrieval). By the time these input variables go into the LLM they will have been converted to a string format, but often times they are not naturally represented as a string (they could be a list, or a Document object). Therefore, it is important to have visibility into what exactly the final string going into the LLM is. This has helped us debug bugs in formatting logic, unexpected transformations to user input, and straight up missing user input.To a much lesser extent, this is also true of the output of an LLM. Oftentimes the output of an LLM is technically a string but that string may contain some structure (json, yaml) that is intended to be parsed into a structured representation. Understanding what the exact output is can help determine if there may be a need for different parsing.LangSmith provides a straightforward visualization of the exact inputs/outputs to all LLM calls, so you can easily understand them.If I edit the prompt, how does that affect the output?\u200bSo you notice a bad output, and you go into LangSmith to see what\&#x27;s going on. You find the faulty LLM call and are now looking at the exact input. You want to try changing a word or a phrase to see what happens -- what do you do?We constantly ran into this issue. Initially, we copied the prompt to a playground of sorts. But this got annoying, so we built a playground of our own! When examining an LLM call, you can click the Open in Playground button to access this playground. Here, you can modify the prompt and re-run it to observe the resulting changes to the output - as many times as needed!Currently, this feature supports only OpenAI and Anthropic models and works for LLM and Chat Model calls. We plan to extend its functionality to more LLM types, chains, agents, and retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what order? What are the inputs and outputs of each call?LangSmith\&#x27;s built-in tracing feature offers a visualization to clarify these sequences. This tool is invaluable for understanding intricate and lengthy chains and agents. For chains, it can shed light on the sequence of calls and how they interact. For agents, where the sequence of calls is non-deterministic, it helps visualize the specific sequence for a given run -- something that is impossible to know ahead of time.Why did my chain take much longer than expected?\u200bIf a chain takes longer than expected, you need to identify the cause. By tracking the latency of each step, LangSmith lets you identify and possibly eliminate the slowest components.How many tokens were used?\u200bBuilding and prototyping LLM applications can be expensive. LangSmith tracks the total token usage for a chain and the token usage of each step. This makes it easy to identify potentially costly parts of the chain.Collaborative debugging\u200bIn the past, sharing a faulty chain with a colleague for debugging was challenging when performed locally. With LangSmith, we\&#x27;ve added a “Share” button that makes the chain and LLM runs accessible to anyone with the shared link.Collecting examples\u200bMost of the time we go to debug, it\&#x27;s because something bad or unexpected outcome has happened in our application. These failures are valuable data points! By identifying how our chain can fail and monitoring these failures, we can test future chain versions against these known issues.Why is this so impactful? When building LLM applications, it’s often common to start without a dataset of any kind. This is part of the power of LLMs! They are amazing zero-shot learners, making it possible to get started as easily as possible. But this can also be a curse -- as you adjust the prompt, you\&#x27;re wandering blind. You don’t have any examples to benchmark your changes against.LangSmith addresses this problem by including an “Add to Dataset” button for each run, making it easy to add the input/output examples a chosen dataset. You can edit the example before adding them to the dataset to include the expected result, which is particularly useful for bad examples.This feature is available at every step of a nested chain, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model.End-to-end chain examples are excellent for testing the overall flow, while single, modular LLM Chain or LLM/Chat Model examples can be beneficial for testing the simplest and most directly modifiable components.Testing &amp; evaluation\u200bInitially, we do most of our evaluation manually and ad hoc. We pass in different\ninputs, and see what happens. At some point though, our application is performing\nwell and we want to be more rigorous about testing changes. We can use a dataset\nthat we’ve constructed along the way (see above). Alternatively, we could spend some\ntime constructing a small dataset by hand. For these situations, LangSmith simplifies\ndataset uploading.Once we have a dataset, how can we use it to test changes to a prompt or chain? The most basic approach is to run the chain over the data points and visualize the outputs. Despite technological advancements, there still is no substitute for looking at outputs by eye. Currently, running the chain over the data points needs to be done client-side. The LangSmith client makes it easy to pull down a dataset and then run a chain over them, logging the results to a new project associated with the dataset. From there, you can review them. We\&#x27;ve made it easy to assign feedback to runs and mark them as correct or incorrect directly in the web app, displaying aggregate statistics for each test project.We also make it easier to evaluate these runs. To that end, we\&#x27;ve added a set of evaluators to the open-source LangChain library. These evaluators can be specified when initiating a test run and will evaluate the results once the test run completes. If we’re being honest, most of these evaluators aren\&#x27;t perfect. We would not recommend that you trust them blindly. However, we do think they are useful for guiding your eye to examples you should look at. This becomes especially valuable as the number of data points increases and it becomes infeasible to look at each one manually.Human Evaluation\u200bAutomatic evaluation metrics are helpful for getting consistent and scalable information about model behavior;\nhowever, there is still no complete substitute for human review to get the utmost quality and reliability from your application.\nLangSmith makes it easy to manually review and annotate runs through annotation queues.These queues allow you to select any runs based on criteria like model type or automatic evaluation scores, and queue them up for human review. As a reviewer, you can then quickly step through the runs, viewing the input, output, and any existing tags before adding your own feedback.We often use this for a couple of reasons:To assess subjective qualities that automatic evaluators struggle with, like creativity or humorTo sample and validate a subset of runs that were auto-evaluated, ensuring the automatic metrics are still reliable and capturing the right informationAll the annotations made using the queue are assigned as &quot;feedback&quot; to the source runs, so you can easily filter and analyze them later.\nYou can also quickly edit examples and add them to datasets to expand the surface area of your evaluation sets or to fine-tune a model for improved quality or reduced costs.Monitoring\u200bAfter all this, your app might finally ready to go in production. LangSmith can also be used to monitor your application in much the same way that you used for debugging. You can log all traces, visualize latency and token usage statistics, and troubleshoot specific issues as they arise. Each run can also be assigned string tags or key-value metadata, allowing you to attach correlation ids or AB test variants, and filter runs accordingly.We’ve also made it possible to associate feedback programmatically with runs. This means that if your application has a thumbs up/down button on it, you can use that to log feedback back to LangSmith. This can be used to track performance over time and pinpoint under performing data points, which you can subsequently add to a dataset for future testing — mirroring the debug mode approach.We’ve provided several examples in the LangSmith documentation for extracting insights from logged runs. In addition to guiding you on performing this task yourself, we also provide examples of integrating with third parties for this purpose. We\&#x27;re eager to expand this area in the coming months! If you have ideas for either -- an open-source way to evaluate, or are building a company that wants to do analytics over these runs, please reach out.Exporting datasets\u200bLangSmith makes it easy to curate datasets. However, these aren’t just useful inside LangSmith; they can be exported for use in other contexts. Notable applications include exporting for use in OpenAI Evals or fine-tuning, such as with FireworksAI.To set up tracing in Deno, web browsers, or other runtime environments without access to the environment, check out the FAQs.↩PreviousLangSmithNextTracingOn by defaultDebuggingWhat was the exact input to the LLM?If I edit the prompt, how does that affect the output?What is the exact sequence of events?Why did my chain take much longer than expected?How many tokens were used?Collaborative debuggingCollecting examplesTesting &amp; evaluationHuman EvaluationMonitoringExporting datasetsCommunityDiscordTwitterGitHubDocs CodeLangSmith SDKPythonJS/TSMoreHomepageBlogCopyright © 2024 LangChain, Inc.\n\n\n\n&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;)]</span></span><br><span class="line"><span class="comment"># 这里输出的docs就是网页上的内容</span></span><br></pre></td></tr></table></figure><ul><li>然后我们需要将这些文档索引到一个向量存储中。这需要一些组件，包括嵌入模型（embedding model）和向量存储。<ol><li>检索器（Retriever）： 想象一下你在图书馆找书的时候，你可能不会把整个图书馆的书都拿去看。相反，你可能会咨询图书管理员或者查找图书馆的目录，找到与你问题相关的书籍。在这里，检索器就像图书馆的目录，它帮助我们找到与问题相关的信息。</li><li>向量存储（Vector Store）： 这就像一个大仓库，里面存放着各种各样的信息。每个信息都用一个向量表示，就像是仓库中的一个箱子。通过这些向量，我们可以快速找到存储库中与我们关心的主题相关的信息。</li><li>嵌入模型（Embedding Model）： 这就像是一个翻译工人，它将文档中的文字翻译成计算机能够理解的形式，也就是向量。这样，计算机就能够更好地处理和比较文档，找到最相关的信息。</li></ol></li></ul><h2 id="根据文档构建向量">根据文档构建向量</h2><ol><li>使用 OpenAIEmbeddings 初始化一个嵌入模型，用于将文档转化为向量。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"></span><br><span class="line">embeddings = OpenAIEmbeddings()</span><br></pre></td></tr></table></figure><ol start="2"><li>使用一个简单的本地向量存储 FAISS 来建立索引.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install faiss-cpu</span><br></pre></td></tr></table></figure><ol start="3"><li>构建向量存储</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本分割器</span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter()</span><br><span class="line"><span class="comment"># 将刚刚获取的docs分割，输出是一个List&lt;String&gt;的类型</span></span><br><span class="line">documents = text_splitter.split_documents(docs)</span><br><span class="line"><span class="comment"># 根据嵌入模型和分割后的文档，转换为向量</span></span><br><span class="line">vector = FAISS.from_documents(documents, embeddings)</span><br></pre></td></tr></table></figure><h2 id="构建链">构建链</h2><ol><li>构建一个链，该链接受问题和检索到的文档，生成答案：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains.combine_documents <span class="keyword">import</span> create_stuff_documents_chain</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line">prompt = ChatPromptTemplate.from_template(<span class="string">&quot;&quot;&quot;Answer the following question based only on the provided context:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;context&gt;</span></span><br><span class="line"><span class="string">&#123;context&#125;</span></span><br><span class="line"><span class="string">&lt;/context&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Question: &#123;input&#125;&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">document_chain = create_stuff_documents_chain(llm, prompt)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用检索器动态选择最相关的文档并传递给链：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_retrieval_chain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的vector是我们第一步构建的向量，将其转换为检索器</span></span><br><span class="line">retriever = vector.as_retriever()</span><br><span class="line">retrieval_chain = create_retrieval_chain(retriever, document_chain)</span><br></pre></td></tr></table></figure><ol start="3"><li>调用这个链，来获取响应结果，这个答案应该更加准确，因为它结合了检索到的相关文档和原始问题。这整个过程就是为了使得语言模型在回答问题时能够基于更全面的上下文信息。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = retrieval_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;how can langsmith help with testing?&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="完整demo">完整demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_retrieval_chain</span><br><span class="line"><span class="keyword">from</span> langchain.chains.combine_documents <span class="keyword">import</span> create_stuff_documents_chain</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> WebBaseLoader</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms.ollama <span class="keyword">import</span> Ollama</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores.faiss <span class="keyword">import</span> FAISS</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> OllamaEmbeddings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">llm = Ollama(model=<span class="string">&quot;llama2&quot;</span>)</span><br><span class="line"><span class="comment"># 初始化嵌入模型</span></span><br><span class="line"></span><br><span class="line">embeddings = OllamaEmbeddings()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取内容</span></span><br><span class="line">loader = WebBaseLoader(<span class="string">&quot;https://docs.smith.langchain.com/overview&quot;</span>)</span><br><span class="line">docs = loader.load()</span><br><span class="line"><span class="built_in">print</span>(docs)</span><br><span class="line"><span class="comment"># 文本分割器</span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter()</span><br><span class="line"><span class="comment"># 将刚刚获取的docs分割</span></span><br><span class="line">documents = text_splitter.split_documents(docs)</span><br><span class="line"><span class="built_in">print</span>(documents)</span><br><span class="line"><span class="comment"># 根据嵌入模型和分割后的文档，转换为向量</span></span><br><span class="line">vector = FAISS.from_documents(documents, embeddings)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换成向量完毕&quot;</span>)</span><br><span class="line"><span class="comment"># 将向量转换为检索器</span></span><br><span class="line">retriever = vector.as_retriever()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;将向量转换为检索器&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建问题链</span></span><br><span class="line">prompt = ChatPromptTemplate.from_template(<span class="string">&quot;&quot;&quot;Answer the following question based only on the provided context:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;context&gt;</span></span><br><span class="line"><span class="string">&#123;context&#125;</span></span><br><span class="line"><span class="string">&lt;/context&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Question: &#123;input&#125;&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">document_chain = create_stuff_documents_chain(llm, prompt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;构建问题完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用检索器动态选择最相关的文档并传递给链：</span></span><br><span class="line">retrieval_chain = create_retrieval_chain(retriever, document_chain)</span><br><span class="line"><span class="comment"># 最终调用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = retrieval_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;how can langsmith help with testing?&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Document(page_content=<span class="comment">&#x27;\n\n\n\n\nLangSmith Overview and User Guide | 🦜️🛠️ LangSmith\n\n\n\n\n\nSkip to main content🦜️🛠️ LangSmith DocsPython DocsJS/TS DocsSearchGo to AppLangSmithOverviewTracingTesting &amp; EvaluationOrganizationsHubLangSmith CookbookOverviewOn this pageLangSmith Overview and User GuideBuilding reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.Over the past two months, we at LangChain have been building and using LangSmith with the goal of bridging this gap. This is our tactical user guide to outline effective ways to use LangSmith and maximize its benefits.On by default\u200bAt LangChain, all of us have LangSmith’s tracing running in the background by default. On the Python side, this is achieved by setting environment variables, which we establish whenever we launch a virtual environment or open our bash shell and leave them set. The same principle applies to most JavaScript environments through process.env1.The benefit here is that all calls to LLMs, chains, agents, tools, and retrievers are logged to LangSmith. Around 90% of the time we don’t even look at the traces, but the 10% of the time that we do… it’s so helpful. We can use LangSmith to de<span class="doctag">bug:</span>An unexpected end resultWhy an agent is loopingWhy a chain was slower than expectedHow many tokens an agent usedDebugging\u200bDebugging LLMs, chains, and agents can be tough. LangSmith helps solve the following pain points:What was the exact input to the LLM?\u200bLLM calls are often tricky and non-deterministic. The inputs/outputs may seem straightforward, given they are technically string → string (or chat messages → chat message), but this can be misleading as the input string is usually constructed from a combination of user input and auxiliary functions.Most inputs to an LLM call are a combination of some type of fixed template along with input variables. These input variables could come directly from user input or from an auxiliary function (like retrieval). By the time these input variables go into the LLM they will have been converted to a string format, but often times they are not naturally represented as a string (they could be a list, or a Document object). Therefore, it is important to have visibility into what exactly the final string going into the LLM is. This has helped us debug bugs in formatting logic, unexpected transformations to user input, and straight up missing user input.To a much lesser extent, this is also true of the output of an LLM. Oftentimes the output of an LLM is technically a string but that string may contain some structure (json, yaml) that is intended to be parsed into a structured representation. Understanding what the exact output is can help determine if there may be a need for different parsing.LangSmith provides a straightforward visualization of the exact inputs/outputs to all LLM calls, so you can easily understand them.If I edit the prompt, how does that affect the output?\u200bSo you notice a bad output, and you go into LangSmith to see what\&#x27;s going on. You find the faulty LLM call and are now looking at the exact input. You want to try changing a word or a phrase to see what happens -- what do you do?We constantly ran into this issue. Initially, we copied the prompt to a playground of sorts. But this got annoying, so we built a playground of our own! When examining an LLM call, you can click the Open in Playground button to access this playground. Here, you can modify the prompt and re-run it to observe the resulting changes to the output - as many times as needed!Currently, this feature supports only OpenAI and Anthropic models and works for LLM and Chat Model calls. We plan to extend its functionality to more LLM types, chains, agents, and retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what order? What are the inputs and outputs of each call?LangSmith\&#x27;s built-in tracing feature offers a visualization to clarify these sequences. This tool is invaluable for understanding intricate and lengthy chains and agents. For chains, it can shed light on the sequence of calls and how they interact. For agents, where the sequence of calls is non-deterministic, it helps visualize the specific sequence for a given run -- something that is impossible to know ahead of time.Why did my chain take much longer than expected?\u200bIf a chain takes longer than expected, you need to identify the cause. By tracking the latency of each step, LangSmith lets you identify and possibly eliminate the slowest components.How many tokens were used?\u200bBuilding and prototyping LLM applications can be expensive. LangSmith tracks the total token usage for a chain and the token usage of each step. This makes it easy to identify potentially costly parts of the chain.Collaborative debugging\u200bIn the past, sharing a faulty chain with a colleague for debugging was challenging when performed locally. With LangSmith, we\&#x27;ve added a “Share” button that makes the chain and LLM runs accessible to anyone with the shared link.Collecting examples\u200bMost of the time we go to debug, it\&#x27;s because something bad or unexpected outcome has happened in our application. These failures are valuable data points! By identifying how our chain can fail and monitoring these failures, we can test future chain versions against these known issues.Why is this so impactful? When building LLM applications, it’s often common to start without a dataset of any kind. This is part of the power of LLMs! They are amazing zero-shot learners, making it possible to get started as easily as possible. But this can also be a curse -- as you adjust the prompt, you\&#x27;re wandering blind. You don’t have any examples to benchmark your changes against.LangSmith addresses this problem by including an “Add to Dataset” button for each run, making it easy to add the input/output examples a chosen dataset. You can edit the example before adding them to the dataset to include the expected result, which is particularly useful for bad examples.This feature is available at every step of a nested chain, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model.End-to-end chain examples are excellent for testing the overall flow, while single, modular LLM Chain or LLM/Chat Model examples can be beneficial for testing the simplest and most directly modifiable components.Testing &amp; evaluation\u200bInitially, we do most of our evaluation manually and ad hoc. We pass in different\ninputs, and see what happens. At some point though, our application is performing\nwell and we want to be more rigorous about testing changes. We can use a dataset\nthat we’ve constructed along the way (see above). Alternatively, we could spend some\ntime constructing a small dataset by hand. For these situations, LangSmith simplifies\ndataset uploading.Once we have a dataset, how can we use it to test changes to a prompt or chain? The most basic approach is to run the chain over the data points and visualize the outputs. Despite technological advancements, there still is no substitute for looking at outputs by eye. Currently, running the chain over the data points needs to be done client-side. The LangSmith client makes it easy to pull down a dataset and then run a chain over them, logging the results to a new project associated with the dataset. From there, you can review them. We\&#x27;ve made it easy to assign feedback to runs and mark them as correct or incorrect directly in the web app, displaying aggregate statistics for each test project.We also make it easier to evaluate these runs. To that end, we\&#x27;ve added a set of evaluators to the open-source LangChain library. These evaluators can be specified when initiating a test run and will evaluate the results once the test run completes. If we’re being honest, most of these evaluators aren\&#x27;t perfect. We would not recommend that you trust them blindly. However, we do think they are useful for guiding your eye to examples you should look at. This becomes especially valuable as the number of data points increases and it becomes infeasible to look at each one manually.Human Evaluation\u200bAutomatic evaluation metrics are helpful for getting consistent and scalable information about model behavior;\nhowever, there is still no complete substitute for human review to get the utmost quality and reliability from your application.\nLangSmith makes it easy to manually review and annotate runs through annotation queues.These queues allow you to select any runs based on criteria like model type or automatic evaluation scores, and queue them up for human review. As a reviewer, you can then quickly step through the runs, viewing the input, output, and any existing tags before adding your own feedback.We often use this for a couple of reasons:To assess subjective qualities that automatic evaluators struggle with, like creativity or humorTo sample and validate a subset of runs that were auto-evaluated, ensuring the automatic metrics are still reliable and capturing the right informationAll the annotations made using the queue are assigned as &quot;feedback&quot; to the source runs, so you can easily filter and analyze them later.\nYou can also quickly edit examples and add them to datasets to expand the surface area of your evaluation sets or to fine-tune a model for improved quality or reduced costs.Monitoring\u200bAfter all this, your app might finally ready to go in production. LangSmith can also be used to monitor your application in much the same way that you used for debugging. You can log all traces, visualize latency and token usage statistics, and troubleshoot specific issues as they arise. Each run can also be assigned string tags or key-value metadata, allowing you to attach correlation ids or AB test variants, and filter runs accordingly.We’ve also made it possible to associate feedback programmatically with runs. This means that if your application has a thumbs up/down button on it, you can use that to log feedback back to LangSmith. This can be used to track performance over time and pinpoint under performing data points, which you can subsequently add to a dataset for future testing — mirroring the debug mode approach.We’ve provided several examples in the LangSmith documentation for extracting insights from logged runs. In addition to guiding you on performing this task yourself, we also provide examples of integrating with third parties for this purpose. We\&#x27;re eager to expand this area in the coming months! If you have ideas for either -- an open-source way to evaluate, or are building a company that wants to do analytics over these runs, please reach out.Exporting datasets\u200bLangSmith makes it easy to curate datasets. However, these aren’t just useful inside LangSmith; they can be exported for use in other contexts. Notable applications include exporting for use in OpenAI Evals or fine-tuning, such as with FireworksAI.To set up tracing in Deno, web browsers, or other runtime environments without access to the environment, check out the FAQs.↩PreviousLangSmithNextTracingOn by defaultDebuggingWhat was the exact input to the LLM?If I edit the prompt, how does that affect the output?What is the exact sequence of events?Why did my chain take much longer than expected?How many tokens were used?Collaborative debuggingCollecting examplesTesting &amp; evaluationHuman EvaluationMonitoringExporting datasetsCommunityDiscordTwitterGitHubDocs CodeLangSmith SDKPythonJS/TSMoreHomepageBlogCopyright © 2024 LangChain, Inc.\n\n\n\n&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;)]</span></span><br><span class="line">[Document(page_content=<span class="comment">&#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&quot;Skip to main content🦜️🛠️ LangSmith DocsPython DocsJS/TS DocsSearchGo to AppLangSmithOverviewTracingTesting &amp; EvaluationOrganizationsHubLangSmith CookbookOverviewOn this pageLangSmith Overview and User GuideBuilding reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.Over the past two months, we at LangChain have been building and using LangSmith with the goal of bridging this gap. This is our tactical user guide to outline effective ways to use LangSmith and maximize its benefits.On by default\u200bAt LangChain, all of us have LangSmith’s tracing running in the background by default. On the Python side, this is achieved by setting environment variables, which we establish whenever we launch a virtual environment or open our bash shell and leave them set. The same principle applies to most JavaScript environments through process.env1.The benefit here is that all calls to LLMs, chains, agents, tools, and retrievers are logged to LangSmith. Around 90% of the time we don’t even look at the traces, but the 10% of the time that we do… it’s so helpful. We can use LangSmith to de<span class="doctag">bug:</span>An unexpected end resultWhy an agent is loopingWhy a chain was slower than expectedHow many tokens an agent usedDebugging\u200bDebugging LLMs, chains, and agents can be tough. LangSmith helps solve the following pain points:What was the exact input to the LLM?\u200bLLM calls are often tricky and non-deterministic. The inputs/outputs may seem straightforward, given they are technically string → string (or chat messages → chat message), but this can be misleading as the input string is usually constructed from a combination of user input and auxiliary functions.Most inputs to an LLM call are a combination of some type of fixed template along with input variables. These input variables could come directly from user input or from an auxiliary function (like retrieval). By the time these input variables go into the LLM they will have been converted to a string format, but often times they are not naturally represented as a string (they could be a list, or a Document object). Therefore, it is important to have visibility into what exactly the final string going into the LLM is. This has helped us debug bugs in formatting logic, unexpected transformations to user input, and straight up missing user input.To a much lesser extent, this is also true of the output of an LLM. Oftentimes the output of an LLM is technically a string but that string may contain some structure (json, yaml) that is intended to be parsed into a structured representation. Understanding what the exact output is can help determine if there may be a need for different parsing.LangSmith provides a straightforward visualization of the exact inputs/outputs to all LLM calls, so you can easily understand them.If I edit the prompt, how does that affect the output?\u200bSo you notice a bad output, and you go into LangSmith to see what&#x27;s going on. You find the faulty LLM call and are now looking at the exact input. You want to try changing a word or a phrase to see what happens -- what do you do?We constantly ran into this issue. Initially, we copied the prompt to a playground of sorts. But this got annoying, so we built a playground of our own! When examining an LLM call, you can click the Open in Playground button to access this playground. Here, you can modify the prompt and re-run it to observe the resulting changes to the output - as many times as needed!Currently, this feature supports only OpenAI and Anthropic models and works for LLM and Chat Model calls. We plan to extend its functionality to more LLM types, chains, agents, and retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&quot;retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what order? What are the inputs and outputs of each call?LangSmith&#x27;s built-in tracing feature offers a visualization to clarify these sequences. This tool is invaluable for understanding intricate and lengthy chains and agents. For chains, it can shed light on the sequence of calls and how they interact. For agents, where the sequence of calls is non-deterministic, it helps visualize the specific sequence for a given run -- something that is impossible to know ahead of time.Why did my chain take much longer than expected?\u200bIf a chain takes longer than expected, you need to identify the cause. By tracking the latency of each step, LangSmith lets you identify and possibly eliminate the slowest components.How many tokens were used?\u200bBuilding and prototyping LLM applications can be expensive. LangSmith tracks the total token usage for a chain and the token usage of each step. This makes it easy to identify potentially costly parts of the chain.Collaborative debugging\u200bIn the past, sharing a faulty chain with a colleague for debugging was challenging when performed locally. With LangSmith, we&#x27;ve added a “Share” button that makes the chain and LLM runs accessible to anyone with the shared link.Collecting examples\u200bMost of the time we go to debug, it&#x27;s because something bad or unexpected outcome has happened in our application. These failures are valuable data points! By identifying how our chain can fail and monitoring these failures, we can test future chain versions against these known issues.Why is this so impactful? When building LLM applications, it’s often common to start without a dataset of any kind. This is part of the power of LLMs! They are amazing zero-shot learners, making it possible to get started as easily as possible. But this can also be a curse -- as you adjust the prompt, you&#x27;re wandering blind. You don’t have any examples to benchmark your changes against.LangSmith addresses this problem by including an “Add to Dataset” button for each run, making it easy to add the input/output examples a chosen dataset. You can edit the example before adding them to the dataset to include the expected result, which is particularly useful for bad examples.This feature is available at every step of a nested chain, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model.End-to-end chain examples are excellent for testing the overall flow, while single, modular LLM Chain or LLM/Chat Model examples can be beneficial for testing the simplest and most directly modifiable components.Testing &amp; evaluation\u200bInitially, we do most of our evaluation manually and ad hoc. We pass in different&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&#x27;inputs, and see what happens. At some point though, our application is performing\nwell and we want to be more rigorous about testing changes. We can use a dataset\nthat we’ve constructed along the way (see above). Alternatively, we could spend some\ntime constructing a small dataset by hand. For these situations, LangSmith simplifies\ndataset uploading.Once we have a dataset, how can we use it to test changes to a prompt or chain? The most basic approach is to run the chain over the data points and visualize the outputs. Despite technological advancements, there still is no substitute for looking at outputs by eye. Currently, running the chain over the data points needs to be done client-side. The LangSmith client makes it easy to pull down a dataset and then run a chain over them, logging the results to a new project associated with the dataset. From there, you can review them. We\&#x27;ve made it easy to assign feedback to runs and mark them as correct or incorrect directly in the web app, displaying aggregate statistics for each test project.We also make it easier to evaluate these runs. To that end, we\&#x27;ve added a set of evaluators to the open-source LangChain library. These evaluators can be specified when initiating a test run and will evaluate the results once the test run completes. If we’re being honest, most of these evaluators aren\&#x27;t perfect. We would not recommend that you trust them blindly. However, we do think they are useful for guiding your eye to examples you should look at. This becomes especially valuable as the number of data points increases and it becomes infeasible to look at each one manually.Human Evaluation\u200bAutomatic evaluation metrics are helpful for getting consistent and scalable information about model behavior;\nhowever, there is still no complete substitute for human review to get the utmost quality and reliability from your application.\nLangSmith makes it easy to manually review and annotate runs through annotation queues.These queues allow you to select any runs based on criteria like model type or automatic evaluation scores, and queue them up for human review. As a reviewer, you can then quickly step through the runs, viewing the input, output, and any existing tags before adding your own feedback.We often use this for a couple of reasons:To assess subjective qualities that automatic evaluators struggle with, like creativity or humorTo sample and validate a subset of runs that were auto-evaluated, ensuring the automatic metrics are still reliable and capturing the right informationAll the annotations made using the queue are assigned as &quot;feedback&quot; to the source runs, so you can easily filter and analyze them later.&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&quot;You can also quickly edit examples and add them to datasets to expand the surface area of your evaluation sets or to fine-tune a model for improved quality or reduced costs.Monitoring\u200bAfter all this, your app might finally ready to go in production. LangSmith can also be used to monitor your application in much the same way that you used for debugging. You can log all traces, visualize latency and token usage statistics, and troubleshoot specific issues as they arise. Each run can also be assigned string tags or key-value metadata, allowing you to attach correlation ids or AB test variants, and filter runs accordingly.We’ve also made it possible to associate feedback programmatically with runs. This means that if your application has a thumbs up/down button on it, you can use that to log feedback back to LangSmith. This can be used to track performance over time and pinpoint under performing data points, which you can subsequently add to a dataset for future testing — mirroring the debug mode approach.We’ve provided several examples in the LangSmith documentation for extracting insights from logged runs. In addition to guiding you on performing this task yourself, we also provide examples of integrating with third parties for this purpose. We&#x27;re eager to expand this area in the coming months! If you have ideas for either -- an open-source way to evaluate, or are building a company that wants to do analytics over these runs, please reach out.Exporting datasets\u200bLangSmith makes it easy to curate datasets. However, these aren’t just useful inside LangSmith; they can be exported for use in other contexts. Notable applications include exporting for use in OpenAI Evals or fine-tuning, such as with FireworksAI.To set up tracing in Deno, web browsers, or other runtime environments without access to the environment, check out the FAQs.↩PreviousLangSmithNextTracingOn by defaultDebuggingWhat was the exact input to the LLM?If I edit the prompt, how does that affect the output?What is the exact sequence of events?Why did my chain take much longer than expected?How many tokens were used?Collaborative debuggingCollecting examplesTesting &amp; evaluationHuman EvaluationMonitoringExporting datasetsCommunityDiscordTwitterGitHubDocs CodeLangSmith SDKPythonJS/TSMoreHomepageBlogCopyright © 2024 LangChain, Inc.&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;)]</span></span><br><span class="line">转换成向量完毕</span><br><span class="line">将向量转换为检索器</span><br><span class="line">构建问题完毕</span><br><span class="line">开始调用</span><br><span class="line">调用完毕</span><br><span class="line">&#123;<span class="comment">&#x27;input&#x27;: &#x27;how can langsmith help with testing?&#x27;, &#x27;context&#x27;: [Document(page_content=&quot;You can also quickly edit examples and add them to datasets to expand the surface area of your evaluation sets or to fine-tune a model for improved quality or reduced costs.Monitoring\u200bAfter all this, your app might finally ready to go in production. LangSmith can also be used to monitor your application in much the same way that you used for debugging. You can log all traces, visualize latency and token usage statistics, and troubleshoot specific issues as they arise. Each run can also be assigned string tags or key-value metadata, allowing you to attach correlation ids or AB test variants, and filter runs accordingly.We’ve also made it possible to associate feedback programmatically with runs. This means that if your application has a thumbs up/down button on it, you can use that to log feedback back to LangSmith. This can be used to track performance over time and pinpoint under performing data points, which you can subsequently add to a dataset for future testing — mirroring the debug mode approach.We’ve provided several examples in the LangSmith documentation for extracting insights from logged runs. In addition to guiding you on performing this task yourself, we also provide examples of integrating with third parties for this purpose. We&#x27;re eager to expand this area in the coming months! If you have ideas for either -- an open-source way to evaluate, or are building a company that wants to do analytics over these runs, please reach out.Exporting datasets\u200bLangSmith makes it easy to curate datasets. However, these aren’t just useful inside LangSmith; they can be exported for use in other contexts. Notable applications include exporting for use in OpenAI Evals or fine-tuning, such as with FireworksAI.To set up tracing in Deno, web browsers, or other runtime environments without access to the environment, check out the FAQs.↩PreviousLangSmithNextTracingOn by defaultDebuggingWhat was the exact input to the LLM?If I edit the prompt, how does that affect the output?What is the exact sequence of events?Why did my chain take much longer than expected?How many tokens were used?Collaborative debuggingCollecting examplesTesting &amp; evaluationHuman EvaluationMonitoringExporting datasetsCommunityDiscordTwitterGitHubDocs CodeLangSmith SDKPythonJS/TSMoreHomepageBlogCopyright © 2024 LangChain, Inc.&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&#x27;inputs, and see what happens. At some point though, our application is performing\nwell and we want to be more rigorous about testing changes. We can use a dataset\nthat we’ve constructed along the way (see above). Alternatively, we could spend some\ntime constructing a small dataset by hand. For these situations, LangSmith simplifies\ndataset uploading.Once we have a dataset, how can we use it to test changes to a prompt or chain? The most basic approach is to run the chain over the data points and visualize the outputs. Despite technological advancements, there still is no substitute for looking at outputs by eye. Currently, running the chain over the data points needs to be done client-side. The LangSmith client makes it easy to pull down a dataset and then run a chain over them, logging the results to a new project associated with the dataset. From there, you can review them. We\&#x27;ve made it easy to assign feedback to runs and mark them as correct or incorrect directly in the web app, displaying aggregate statistics for each test project.We also make it easier to evaluate these runs. To that end, we\&#x27;ve added a set of evaluators to the open-source LangChain library. These evaluators can be specified when initiating a test run and will evaluate the results once the test run completes. If we’re being honest, most of these evaluators aren\&#x27;t perfect. We would not recommend that you trust them blindly. However, we do think they are useful for guiding your eye to examples you should look at. This becomes especially valuable as the number of data points increases and it becomes infeasible to look at each one manually.Human Evaluation\u200bAutomatic evaluation metrics are helpful for getting consistent and scalable information about model behavior;\nhowever, there is still no complete substitute for human review to get the utmost quality and reliability from your application.\nLangSmith makes it easy to manually review and annotate runs through annotation queues.These queues allow you to select any runs based on criteria like model type or automatic evaluation scores, and queue them up for human review. As a reviewer, you can then quickly step through the runs, viewing the input, output, and any existing tags before adding your own feedback.We often use this for a couple of reasons:To assess subjective qualities that automatic evaluators struggle with, like creativity or humorTo sample and validate a subset of runs that were auto-evaluated, ensuring the automatic metrics are still reliable and capturing the right informationAll the annotations made using the queue are assigned as &quot;feedback&quot; to the source runs, so you can easily filter and analyze them later.&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&quot;retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what order? What are the inputs and outputs of each call?LangSmith&#x27;s built-in tracing feature offers a visualization to clarify these sequences. This tool is invaluable for understanding intricate and lengthy chains and agents. For chains, it can shed light on the sequence of calls and how they interact. For agents, where the sequence of calls is non-deterministic, it helps visualize the specific sequence for a given run -- something that is impossible to know ahead of time.Why did my chain take much longer than expected?\u200bIf a chain takes longer than expected, you need to identify the cause. By tracking the latency of each step, LangSmith lets you identify and possibly eliminate the slowest components.How many tokens were used?\u200bBuilding and prototyping LLM applications can be expensive. LangSmith tracks the total token usage for a chain and the token usage of each step. This makes it easy to identify potentially costly parts of the chain.Collaborative debugging\u200bIn the past, sharing a faulty chain with a colleague for debugging was challenging when performed locally. With LangSmith, we&#x27;ve added a “Share” button that makes the chain and LLM runs accessible to anyone with the shared link.Collecting examples\u200bMost of the time we go to debug, it&#x27;s because something bad or unexpected outcome has happened in our application. These failures are valuable data points! By identifying how our chain can fail and monitoring these failures, we can test future chain versions against these known issues.Why is this so impactful? When building LLM applications, it’s often common to start without a dataset of any kind. This is part of the power of LLMs! They are amazing zero-shot learners, making it possible to get started as easily as possible. But this can also be a curse -- as you adjust the prompt, you&#x27;re wandering blind. You don’t have any examples to benchmark your changes against.LangSmith addresses this problem by including an “Add to Dataset” button for each run, making it easy to add the input/output examples a chosen dataset. You can edit the example before adding them to the dataset to include the expected result, which is particularly useful for bad examples.This feature is available at every step of a nested chain, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model.End-to-end chain examples are excellent for testing the overall flow, while single, modular LLM Chain or LLM/Chat Model examples can be beneficial for testing the simplest and most directly modifiable components.Testing &amp; evaluation\u200bInitially, we do most of our evaluation manually and ad hoc. We pass in different&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;)], &#x27;answer&#x27;: &#x27;LangSmith can assist with testing by providing various features to simplify dataset uploading, running chains over the data points, visualizing the outputs, and evaluating the results. Here are some ways LangSmith can help with testing:\n\n1. Easy dataset uploading: LangSmith simplifies dataset uploading, making it easier to construct a small dataset by hand or use an existing one.\n2. Running chains over data points: Once you have a dataset, LangSmith allows you to run the chain over the data points and visualize the outputs. You can review the outputs directly in the web app by assigning feedback to runs and marking them as correct or incorrect.\n3. Evaluating results: LangSmith adds a set of evaluators to the open-source LangChain library, which can be specified when initiating a test run. These evaluators will evaluate the results once the test run completes, providing valuable information for guiding your eye to examples you should look at.\n4. Manual testing and annotation: LangSmith makes it easy to manually review and annotate runs through a visualization of the sequence of events, helping identify subjective qualities that automatic evaluators struggle with.\n5. Tracking token usage: LangSmith tracks the total token usage for a chain and the token usage of each step, making it easier to identify potentially costly parts of the chain.\n6. Collecting examples: LangSmith includes an &quot;Add to Dataset&quot; button for each run, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model. This feature is available at every step of a nested chain, making it easier to test the overall flow and individual components.\n\nBy leveraging these features, LangSmith can help streamline your testing process and provide valuable insights into your LLM application\&#x27;s performance.&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Conversation-Retrieval-Chain（对话检索链）">Conversation Retrieval Chain（对话检索链）</h2><ul><li>我们刚刚创建的链只能回答单一的问题，但有些应用场景需要构建对话型的聊天机器人。</li><li>为了实现这一点，我们仍然可以使用create_retrieval_chain函数，但是我们需要改变两件事：<ul><li>检索方法现在不应仅适用于最近的输入，而应考虑整个历史记录。</li><li>最终的 LLM 链同样应该考虑整个历史<br>更新检索（retrieval）<br>我们创建了一个新的链，这个链将接受最近的用户输入（input）和整个对话历史（chat_history），然后使用语言模型生成一个搜索查询。这里使用了 create_history_aware_retriever 函数来实现这个新链。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_history_aware_retriever</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> MessagesPlaceholder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个提示模板，用于根据对话历史生成搜索查询</span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    MessagesPlaceholder(variable_name=<span class="string">&quot;chat_history&quot;</span>),  <span class="comment"># 对话历史的占位符</span></span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),  <span class="comment"># 用户输入的占位符</span></span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;在上述对话的基础上，生成一个搜索查询，以获取与对话相关的信息&quot;</span>)  <span class="comment"># 生成搜索查询的指令，基于对话内容</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个检索器链，整合语言模型、检索器和定义的提示</span></span><br><span class="line">retriever_chain = create_history_aware_retriever(llm, retriever, prompt)</span><br></pre></td></tr></table></figure><ul><li>我们可以传入后续的问题实例来测试这一点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage, AIMessage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义对话历史，包括人类消息和AI消息</span></span><br><span class="line">chat_history = [HumanMessage(content=<span class="string">&quot;LangSmith可以帮助我测试App吗？&quot;</span>), AIMessage(content=<span class="string">&quot;Yes!&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用检索器链，传入对话历史和用户输入</span></span><br><span class="line">retriever_chain.invoke(&#123;</span><br><span class="line">    <span class="string">&quot;chat_history&quot;</span>: chat_history,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: <span class="string">&quot;告诉我怎么做&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>此时的输出应该是会返回有关 LangSmith 中测试的文档。这是因为LLM生成了一个新查询，将聊天历史记录与后续问题相结合。</li><li>现在我们有了这个新的检索器，我们可以创建一个新的链来继续与这些检索到的文档进行对话。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prompt</span> = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;根据上下文回答用户的问题\n\n&#123;context&#125;&quot;</span>),</span><br><span class="line">    MessagesPlaceholder(variable_name=<span class="string">&quot;chat_history&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="attr">document_chain</span> = create_stuff_documents_chain(llm, prompt)</span><br><span class="line"><span class="attr">retrieval_chain</span> = create_retrieval_chain(retriever_chain, document_chain)</span><br></pre></td></tr></table></figure><ul><li>现在进行整体的测试：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chat_history = [HumanMessage(content=<span class="string">&quot;LangSmith可以帮助我测试App吗？&quot;</span>), AIMessage(content=<span class="string">&quot;Yes!&quot;</span>)]</span><br><span class="line"></span><br><span class="line">retriever_chain.invoke(&#123;</span><br><span class="line">    <span class="string">&quot;chat_history&quot;</span>: chat_history,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: <span class="string">&quot;告诉我怎么做&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>会出了一个连贯的答案，表明我们已经成功地将检索链变成了聊天机器人</li></ul><h2 id="Agent">Agent</h2><ul><li>构建代理时要做的第一件事就是决定它应该有权访问哪些工具。在此示例中，我们将为代理提供两个工具的访问权限：<ol><li>我们刚刚创建的检索器。这将让它轻松回答有关 LangSmith 的问题</li></ol><ul><li>首先，让我们为刚刚创建的检索器设置一个工具：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.tools.retriever <span class="keyword">import</span> create_retriever_tool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个检索器就是刚刚爬取LongSmith文档的内容，生成的检索器</span></span><br><span class="line">retriever_tool = create_retriever_tool(</span><br><span class="line">    retriever,</span><br><span class="line">    <span class="string">&quot;langsmith_search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;搜索有关LangSmith的信息或者有关LangSmith的任何问题，必须使用这个工具！&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="2"><li>一个搜索工具。这将使它能够轻松回答需要最新信息的问题。<br>- 官网示例中使用的搜索工具是Tavily，需要一个 API 密钥（有免费套餐）。在他们的平台上创建后，需要将其设置为环境变量</li></ol><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.tools.tavily_search <span class="keyword">import</span> TavilySearchResults</span><br><span class="line"></span><br><span class="line">search = TavilySearchResults()</span><br></pre></td></tr></table></figure>- 我们现在可以创建我们想要使用的工具的列表：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools = [retriever_tool, search]</span><br></pre></td></tr></table></figure>- 现在我们有了工具，我们可以创建一个代理来使用它们。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个可以拉取预定义好的prompt</span></span><br><span class="line">pip install langchainhub</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> hub</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> create_openai_functions_agent</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取别人预定义好的prompt</span></span><br><span class="line">prompt = hub.pull(<span class="string">&quot;hwchase17/openai-functions-agent&quot;</span>)</span><br><span class="line">llm = ChatOpenAI(model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, temperature=<span class="number">0</span>)</span><br><span class="line">agent = create_openai_functions_agent(llm, tools, prompt)</span><br><span class="line">agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>- 调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">agent_executor.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;LangSmith可以帮助我测试App吗？&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></code></pre><h2 id="构建服务">构建服务</h2><ul><li>LangServe 可以帮助开发人员将 LangChain 链部署为 REST API。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> WebBaseLoader</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain.tools.retriever <span class="keyword">import</span> create_retriever_tool</span><br><span class="line"><span class="keyword">from</span> langchain_community.tools.tavily_search <span class="keyword">import</span> TavilySearchResults</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> hub</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> create_openai_functions_agent</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor</span><br><span class="line"><span class="keyword">from</span> langchain.pydantic_v1 <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> BaseMessage</span><br><span class="line"><span class="keyword">from</span> langserve <span class="keyword">import</span> add_routes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载检索器（Retriever）</span></span><br><span class="line"><span class="comment"># 首先，通过 WebBaseLoader 从 LangChain 文档网站加载文档数据。然后，使用 RecursiveCharacterTextSplitter 将文档分割为文档片段，并使用 OpenAIEmbeddings 将文档片段嵌入为向量。最后，使用 FAISS 创建一个向量存储作为检索器。</span></span><br><span class="line">loader = WebBaseLoader(<span class="string">&quot;https://docs.smith.langchain.com/overview&quot;</span>)</span><br><span class="line">docs = loader.load()</span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter()</span><br><span class="line">documents = text_splitter.split_documents(docs)</span><br><span class="line">embeddings = OpenAIEmbeddings()</span><br><span class="line">vector = FAISS.from_documents(documents, embeddings)</span><br><span class="line">retriever = vector.as_retriever()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建工具（Tools）</span></span><br><span class="line"><span class="comment"># 创建两个工具：一个是之前创建的检索器工具 retriever_tool，另一个是 Tavily 搜索工具 search。</span></span><br><span class="line">retriever_tool = create_retriever_tool(</span><br><span class="line">    retriever,</span><br><span class="line">    <span class="string">&quot;langsmith_search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;搜索有关LangSmith的信息或者有关LangSmith的任何问题，必须使用这个工具！&quot;</span>,</span><br><span class="line">)</span><br><span class="line">search = TavilySearchResults()</span><br><span class="line">tools = [retriever_tool, search]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建代理</span></span><br><span class="line"><span class="comment"># 使用 LangChain Hub 中提供的预定义提示（自己构建也可以），创建一个使用 OpenAI 模型和工具的代理。这个代理被设置为能够决定在处理问题时使用哪些工具。</span></span><br><span class="line">prompt = hub.pull(<span class="string">&quot;hwchase17/openai-functions-agent&quot;</span>)</span><br><span class="line">llm = ChatOpenAI(model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, temperature=<span class="number">0</span>)</span><br><span class="line">agent = create_openai_functions_agent(llm, tools, prompt)</span><br><span class="line">agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. FastAPI 定义</span></span><br><span class="line">app = FastAPI(</span><br><span class="line">  title=<span class="string">&quot;LangChain Server&quot;</span>,</span><br><span class="line">  version=<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">  description=<span class="string">&quot;A simple API server using LangChain&#x27;s Runnable interfaces&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 添加链路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过调用 add_routes 函数，将代理链添加为 FastAPI 应用的一个路由，从而可以通过 /agent 路径访问代理链。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">input</span>: <span class="built_in">str</span></span><br><span class="line">    chat_history: <span class="type">List</span>[BaseMessage] = Field(</span><br><span class="line">        ...,</span><br><span class="line">        extra=&#123;<span class="string">&quot;widget&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;chat&quot;</span>, <span class="string">&quot;input&quot;</span>: <span class="string">&quot;location&quot;</span>&#125;&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Output</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    output: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">add_routes(</span><br><span class="line">    app,</span><br><span class="line">    agent_executor.with_types(input_type=Input, output_type=Output),</span><br><span class="line">    path=<span class="string">&quot;/agent&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h1>链的概念（补充）</h1><ul><li>链（Chains）通常将大语言模型（LLM）与提示（Prompt）结合在一起，基于此，我们可以对文本或数据进行一系列操作。链（Chains）可以一次性接受多个输入。例如，我们可以创建一个链，该链接受用户输入，使用提示模板对其进行格式化，然后将格式化的响应传递给 LLM 。我们可以通过将多个链组合在一起，或者通过将链与其他组件组合在一起来构建更复杂的链。</li></ul><h2 id="顺序链（SequentialChains）">顺序链（SequentialChains）</h2><ul><li>是按预定义顺序执行其链接的链。具体来说，我们将使用简单顺序链（SimpleSequentialChain），这是顺序链的最简单类型，其中每个步骤都有一个输入/输出，一个步骤的输出是下一个步骤的输入。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms <span class="keyword">import</span> Tongyi</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain, SimpleSequentialChain</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1903ddb520ac4637a1d36b2f93e0aa4c&quot;</span></span><br><span class="line"></span><br><span class="line">llm = Tongyi()</span><br><span class="line"></span><br><span class="line">prompt1 = ChatPromptTemplate.from_template(<span class="string">&quot;你现在是写作领域的大师，现在为&#123;title&#125;这篇文章生成一些大纲吧。&quot;</span>)</span><br><span class="line"></span><br><span class="line">chain_one = LLMChain(llm=llm, prompt=prompt1)</span><br><span class="line"></span><br><span class="line">prompt2 = ChatPromptTemplate.from_template(<span class="string">&quot;根据这个大纲：&#123;toc&#125;，生成每个章节对应的内容吧。&quot;</span>)</span><br><span class="line"></span><br><span class="line">chain_two = LLMChain(llm=llm, prompt=prompt2)</span><br><span class="line"></span><br><span class="line">chain = SimpleSequentialChain(chains=[chain_one, chain_two], verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    title = <span class="built_in">input</span>(<span class="string">&quot;请输入题目：&quot;</span>)</span><br><span class="line">    res = chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: title&#125;)</span><br><span class="line">    <span class="built_in">print</span>(json.dumps(res, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">当然可以，以下是一个关于“大学生网红消费行为分析”的文章大纲：</span><br><span class="line"></span><br><span class="line">I. 引言</span><br><span class="line">   A. 网红经济的崛起与大学生消费者的概述</span><br><span class="line">   B. 大学生网红消费现象的重要性及研究背景</span><br><span class="line">   C. 文章的研究目的和意义</span><br><span class="line"></span><br><span class="line">II. 大学生网红消费者群体特征分析</span><br><span class="line">   A. 年龄、性别、专业等人口统计学特征</span><br><span class="line">   B. 大学生的网络使用习惯与社交媒体偏好</span><br><span class="line">   C. 大学生对网红的认可度与信任度</span><br><span class="line"></span><br><span class="line">III. 大学生网红消费行为的特点</span><br><span class="line">   A. 消费动机：从娱乐消遣到购物决策的影响</span><br><span class="line">   B. 消费品类偏向：时尚穿搭、美妆护肤、电子产品等方面的消费情况</span><br><span class="line">   C. 跟风消费与个性化消费需求的平衡</span><br><span class="line">   D. 情感因素在购买决策中的作用</span><br><span class="line"></span><br><span class="line">IV. 网红对大学生消费行为的影响机制</span><br><span class="line">   A. 网红的影响力来源：内容创作能力、人格魅力、口碑效应等</span><br><span class="line">   B. 网红营销策略对大学生消费心理的影响：情感共鸣、生活方式塑造、意见领袖角色</span><br><span class="line">   C. 网红广告与软性推广对大学生消费选择的引导</span><br><span class="line"></span><br><span class="line">V. 大学生网红消费行为的社会文化影响</span><br><span class="line">   A. 对大学生价值观塑造的影响</span><br><span class="line">   B. 社会审美趋势与消费观念的变化</span><br><span class="line">   C. 对校园文化和市场经济发展的启示</span><br><span class="line"></span><br><span class="line">VI. 结论</span><br><span class="line">   A. 大学生网红消费行为的主要特点及其成因总结</span><br><span class="line">   B. 对教育部门、企业、网红自身以及社会各方面应对大学生网红消费行为进行合理引导和规范的建议</span><br><span class="line">   C. 展望未来研究方向与可能性</span><br><span class="line"></span><br><span class="line">这个大纲旨在全面探讨大学生网红消费行为的现象、特点、成因以及其背后的社会文化影响，并针对相关各方提出有针对性的思考与建议。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面就是每个章节对应的内容</span></span><br><span class="line"></span><br><span class="line">I. 引言</span><br><span class="line">A. 网红经济的崛起与大学生消费者的概述</span><br><span class="line">随着互联网技术的发展和社交媒体平台的普及，网红经济作为一种新型商业模式在全球范围内迅速崛起。大学生作为网络主力军和新兴消费群体，他们对于网红的追捧和消费行为成为当前市场关注的热点。这一现象不仅反映出了网红经济的巨大潜力，也揭示了大学生在消费观念和行为上的新变化。</span><br><span class="line"></span><br><span class="line">B. 大学生网红消费现象的重要性及研究背景</span><br><span class="line">大学生网红消费现象日益普遍，其背后的消费心理、消费行为模式以及对社会文化的影响具有重要研究价值。通过深入探究这一现象，有助于理解新一代消费者的消费趋势，为相关企业和政策制定者提供针对性的策略指导。</span><br><span class="line"></span><br><span class="line">C. 文章的研究目的和意义</span><br><span class="line">本文旨在通过系统地研究大学生网红消费行为，揭示其特征、成因及其社会文化影响，为教育部门、企业、网红自身乃至整个社会提供理性应对这一现象的思路和建议，同时对未来相关研究领域的发展方向进行展望。</span><br><span class="line"></span><br><span class="line">II. 大学生网红消费者群体特征分析</span><br><span class="line">A. 年龄、性别、专业等人口统计学特征</span><br><span class="line">以在校大学生为主体的年轻消费人群主要集中在<span class="number">18</span>-<span class="number">24</span>岁年龄段，男女比例相对均衡，不同专业的学生可能由于兴趣爱好、审美取向等因素，在网红消费上表现出一定的差异。</span><br><span class="line"></span><br><span class="line">B. 大学生的网络使用习惯与社交媒体偏好</span><br><span class="line">当代大学生是互联网的重度使用者，他们在日常生活中广泛依赖于社交媒体平台获取信息、交流互动和娱乐休闲。尤其偏爱短视频、直播、微博等新媒体形式，这为网红传播内容提供了广阔的受众基础。</span><br><span class="line"></span><br><span class="line">C. 大学生对网红的认可度与信任度</span><br><span class="line">大学生普遍认为网红具备较高的潮流引领力和社交影响力，对于具有一定专业素养和亲和力的网红更容易产生认同感和信赖感，从而将其推荐的产品或服务纳入自己的消费考虑范围。</span><br><span class="line"></span><br><span class="line">III. 大学生网红消费行为的特点</span><br><span class="line">A. 消费动机：从娱乐消遣到购物决策的影响</span><br><span class="line">大学生在关注网红的过程中，最初可能出于娱乐消遣的需求，但逐渐地，网红所展示的生活方式、时尚品味以及产品体验等内容会影响他们的购物决策，使得消费行为由单纯的观赏转变为实际购买行为。</span><br><span class="line"></span><br><span class="line">B. 消费品类偏向：时尚穿搭、美妆护肤、电子产品等方面的消费情况</span><br><span class="line">大学生网红消费行为中，时尚穿搭、美妆护肤和个人电子产品是最常见的消费类别。这些商品往往与年轻人追求个性化、时尚化和高品质生活的需求相契合。</span><br><span class="line"></span><br><span class="line">C. 跟风消费与个性化消费需求的平衡</span><br><span class="line">大学生在网红消费过程中，既存在跟风模仿的现象，也注重个性表达和自我风格的塑造。他们会在一定程度上接受网红推荐的商品和服务，同时也根据个人喜好和实际情况做出选择，实现跟风与个性需求的动态平衡。</span><br><span class="line"></span><br><span class="line">D. 情感因素在购买决策中的作用</span><br><span class="line">大学生消费者在网红购物决策中情感因素占据较大比重，包括对网红本人的情感认同、对网红所构建生活方式的向往以及与其他粉丝间的社交关系等因素都会影响到购买行为。</span><br><span class="line"></span><br><span class="line">IV. 网红对大学生消费行为的影响机制</span><br><span class="line">A. 网红的影响力来源：内容创作能力、人格魅力、口碑效应等</span><br><span class="line">网红的影响力源于其独特的内容创作能力、鲜明的个性特质以及良好的口碑效应。他们通过高质量的内容输出，吸引并维系粉丝群体，进而转化为商业价值。</span><br><span class="line"></span><br><span class="line">B. 网红营销策略对大学生消费心理的影响：情感共鸣、生活方式塑造、意见领袖角色</span><br><span class="line">网红运用情感共鸣、生活方式展示以及意见领袖的角色定位，巧妙地将产品融入其中，激发大学生消费者的心理共鸣，形成潜在购买意愿，并推动实际消费行为的发生。</span><br><span class="line"></span><br><span class="line">C. 网红广告与软性推广对大学生消费选择的引导</span><br><span class="line">网红借助广告植入、品牌合作等形式进行商品推广，这种隐性且易于接受的营销手段在很大程度上左右了大学生的消费选择。</span><br><span class="line"></span><br><span class="line">V. 大学生网红消费行为的社会文化影响</span><br><span class="line">A. 对大学生价值观塑造的影响</span><br><span class="line">大学生网红消费行为促进了他们对美的追求、个性化意识的觉醒以及对品质生活的向往，进一步塑造了新一代消费者的消费价值观。</span><br><span class="line"></span><br><span class="line">B. 社会审美趋势与消费观念的变化</span><br><span class="line">随着大学生对网红消费的积极参与，他们的审美情趣和消费观念逐渐成为社会审美趋势的重要组成部分，进一步推动着社会整体消费观念的变革与发展。</span><br><span class="line"></span><br><span class="line">C. 对校园文化和市场经济发展的启示</span><br><span class="line">大学生网红消费行为不仅反映了当前市场经济环境下消费结构和消费行为的新变化，也为校园文化的多元化发展提供了新的视角与启示。</span><br><span class="line"></span><br><span class="line">VI. 结论</span><br><span class="line">A. 大学生网红消费行为的主要特点及其成因总结</span><br><span class="line">通过对大学生网红消费行为的研究，我们发现其主要特点包括高度活跃的社交媒体参与、强烈的情感驱动消费、紧跟潮流且兼顾个性化的消费需求以及深受网红营销策略的影响。这些特点的背后成因主要包括大学生独特的年龄特征、网络环境下的信息接收方式以及网红影响力的多重作用。</span><br><span class="line"></span><br><span class="line">B. 对教育部门、企业、网红自身以及社会各方面应对大学生网红消费行为进行合理引导和规范的建议</span><br><span class="line">教育部门应加强对大学生消费观的引导教育，培养他们的理性消费意识；企业应充分认识到网红营销的价值，合理利用网红资源，同时严格遵守相关法律法规，确保营销活动的合法合规；网红自身则需保持职业操守，传递正能量，发挥好榜样作用；社会各界也应对网红经济持开放包容态度，强化监管与自律相结合，共同营造健康有序的网红消费环境。</span><br><span class="line"></span><br><span class="line">C. 展望未来研究方向与可能性</span><br><span class="line">未来的研究可以从更微观的层面深入剖析大学生网红消费行为的内在机理，探究不同个体之间消费差异的具体原因；也可以着眼于全球视野，对比国内外大学生网红消费现象的异同和发展趋势；此外，还可以探讨如何结合新技术应用，如大数据、人工智能等，更好地理解和引导大学生网红消费行为。</span><br></pre></td></tr></table></figure><h2 id="多链组合">多链组合</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains import LLMChain, SequentialChain</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms.tongyi import Tongyi</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts import ChatPromptTemplate</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1903ddb520ac4637a1d36b2f93e0aa4c&quot;</span></span><br><span class="line"></span><br><span class="line">llm = Tongyi()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子链1</span></span><br><span class="line"><span class="comment"># prompt模板 1: 翻译成英语（把下面的review翻译成英语）</span></span><br><span class="line">first_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;把下面的评论review翻译成中文:&quot;</span></span><br><span class="line">    <span class="string">&quot;\n\n&#123;Review&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># chain 1: 输入：Review    输出：中文的 Review</span></span><br><span class="line">chain_one = LLMChain(<span class="attribute">llm</span>=llm, <span class="attribute">prompt</span>=first_prompt, <span class="attribute">output_key</span>=<span class="string">&quot;Chinese_Review&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子链2</span></span><br><span class="line"><span class="comment"># prompt模板 2: 用一句话总结下面的 review</span></span><br><span class="line">second_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;请你用一句话来总结下面的评论review:&quot;</span></span><br><span class="line">    <span class="string">&quot;\n\n&#123;Chinese_Review&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># chain 2: 输入：中文的Review   输出：总结</span></span><br><span class="line">chain_two = LLMChain(<span class="attribute">llm</span>=llm, <span class="attribute">prompt</span>=second_prompt, <span class="attribute">output_key</span>=<span class="string">&quot;summary&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子链3</span></span><br><span class="line"><span class="comment"># prompt模板 3: 下面review使用的什么语言</span></span><br><span class="line">third_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;下面的评论review使用的什么语言:\n\n&#123;Review&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># chain 3: 输入：Review  输出：语言</span></span><br><span class="line">chain_three = LLMChain(<span class="attribute">llm</span>=llm, <span class="attribute">prompt</span>=third_prompt, <span class="attribute">output_key</span>=<span class="string">&quot;language&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子链4</span></span><br><span class="line"><span class="comment"># prompt模板 4: 使用特定的语言对下面的总结写一个后续回复</span></span><br><span class="line">fourth_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;使用特定的语言对下面的总结写一个后续回复:&quot;</span></span><br><span class="line">    <span class="string">&quot;\n\n总结: &#123;summary&#125;\n\n语言: &#123;language&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># chain 4: 输入： 总结, 语言    输出： 后续回复</span></span><br><span class="line">chain_four = LLMChain(<span class="attribute">llm</span>=llm, <span class="attribute">prompt</span>=fourth_prompt, <span class="attribute">output_key</span>=<span class="string">&quot;followup_message&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入：review</span></span><br><span class="line"><span class="comment">#输出：中文review，总结，后续回复</span></span><br><span class="line">overall_chain = SequentialChain(</span><br><span class="line">    chains=[chain_one, chain_two, chain_three, chain_four],</span><br><span class="line">    input_variables=[<span class="string">&quot;Review&quot;</span>],</span><br><span class="line">    output_variables=[<span class="string">&quot;Chinese_Review&quot;</span>, <span class="string">&quot;summary&quot;</span>, <span class="string">&quot;followup_message&quot;</span>, <span class="string">&quot;language&quot;</span>],</span><br><span class="line">    <span class="attribute">verbose</span>=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text = input(<span class="string">&quot;请输入内容：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(overall_chain.invoke(&#123;<span class="string">&quot;Review&quot;</span>: text&#125;))</span><br></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/02/24/pFUftjf.png" alt=""></p><h2 id="路由链">路由链</h2><ul><li>前面的链的输入顺序基本上都是固定的，如果想做更复杂的事情，就需要根据输入将其路由到特定的链。假设你有多个子链，每个子链都专门用于特定类型的输入，那么可以组成一个路由链</li><li>路由器由两个组件组成：<ol><li>路由链（Router Chain）：路由器链本身，负责选择要调用的下一个链</li><li>destination_chains：路由器链可以路由到的链</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain, MultiPromptChain</span><br><span class="line"><span class="keyword">from</span> langchain.chains.router.llm_router <span class="keyword">import</span> RouterOutputParser, LLMRouterChain</span><br><span class="line"><span class="keyword">from</span> langchain.chains.router.multi_prompt_prompt <span class="keyword">import</span> MULTI_PROMPT_ROUTER_TEMPLATE</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms.tongyi <span class="keyword">import</span> Tongyi</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate, PromptTemplate</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1903ddb520ac4637a1d36b2f93e0aa4c&quot;</span></span><br><span class="line"></span><br><span class="line">llm = Tongyi()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义多种提示模板</span></span><br><span class="line"><span class="comment"># 第一个提示适合回答物理问题</span></span><br><span class="line">physics_template = <span class="string">&quot;&quot;&quot;你是一个非常聪明的物理专家。 \</span></span><br><span class="line"><span class="string">你擅长用一种简洁并且易于理解的方式去回答问题。\</span></span><br><span class="line"><span class="string">当你不知道问题的答案时，你承认\</span></span><br><span class="line"><span class="string">你不知道.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这是一个问题:</span></span><br><span class="line"><span class="string">&#123;input&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个提示适合回答数学问题</span></span><br><span class="line">math_template = <span class="string">&quot;&quot;&quot;你是一个非常优秀的数学家。 \</span></span><br><span class="line"><span class="string">你擅长回答数学问题。 \</span></span><br><span class="line"><span class="string">你之所以如此优秀， \</span></span><br><span class="line"><span class="string">是因为你能够将棘手的问题分解为组成部分，\</span></span><br><span class="line"><span class="string">回答组成部分，然后将它们组合在一起，回答更广泛的问题。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这是一个问题：</span></span><br><span class="line"><span class="string">&#123;input&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个适合回答历史问题</span></span><br><span class="line">history_template = <span class="string">&quot;&quot;&quot;你是以为非常优秀的历史学家。 \</span></span><br><span class="line"><span class="string">你对一系列历史时期的人物、事件和背景有着极好的学识和理解\</span></span><br><span class="line"><span class="string">你有能力思考、反思、辩证、讨论和评估过去。\</span></span><br><span class="line"><span class="string">你尊重历史证据，并有能力利用它来支持你的解释和判断。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这是一个问题:</span></span><br><span class="line"><span class="string">&#123;input&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四个适合回答计算机问题</span></span><br><span class="line">computerscience_template = <span class="string">&quot;&quot;&quot; 你是一个成功的计算机科学专家。\</span></span><br><span class="line"><span class="string">你有创造力、协作精神、\</span></span><br><span class="line"><span class="string">前瞻性思维、自信、解决问题的能力、\</span></span><br><span class="line"><span class="string">对理论和算法的理解以及出色的沟通技巧。\</span></span><br><span class="line"><span class="string">你非常擅长回答编程问题。\</span></span><br><span class="line"><span class="string">你之所以如此优秀，是因为你知道  \</span></span><br><span class="line"><span class="string">如何通过以机器可以轻松解释的命令式步骤描述解决方案来解决问题，\</span></span><br><span class="line"><span class="string">并且你知道如何选择在时间复杂性和空间复杂性之间取得良好平衡的解决方案。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这还是一个问题：</span></span><br><span class="line"><span class="string">&#123;input&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每个模板命名，并且给出具体描述，将这些信息传递给路由链，路由链决定何时调用子链</span></span><br><span class="line">prompt_infos = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;名字&quot;</span>: <span class="string">&quot;物理学&quot;</span>,</span><br><span class="line">        <span class="string">&quot;描述&quot;</span>: <span class="string">&quot;擅长回答关于物理学的问题&quot;</span>,</span><br><span class="line">        <span class="string">&quot;提示模板&quot;</span>: physics_template</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;名字&quot;</span>: <span class="string">&quot;数学&quot;</span>,</span><br><span class="line">        <span class="string">&quot;描述&quot;</span>: <span class="string">&quot;擅长回答数学问题&quot;</span>,</span><br><span class="line">        <span class="string">&quot;提示模板&quot;</span>: math_template</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;名字&quot;</span>: <span class="string">&quot;历史&quot;</span>,</span><br><span class="line">        <span class="string">&quot;描述&quot;</span>: <span class="string">&quot;擅长回答历史问题&quot;</span>,</span><br><span class="line">        <span class="string">&quot;提示模板&quot;</span>: history_template</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;名字&quot;</span>: <span class="string">&quot;计算机科学&quot;</span>,</span><br><span class="line">        <span class="string">&quot;描述&quot;</span>: <span class="string">&quot;擅长回答计算机科学问题&quot;</span>,</span><br><span class="line">        <span class="string">&quot;提示模板&quot;</span>: computerscience_template</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于提示模版信息创建相应目标链</span></span><br><span class="line">destination_chains = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> p_info <span class="keyword">in</span> prompt_infos:</span><br><span class="line">    name = p_info[<span class="string">&quot;名字&quot;</span>]</span><br><span class="line">    prompt_template = p_info[<span class="string">&quot;提示模板&quot;</span>]</span><br><span class="line">    prompt = ChatPromptTemplate.from_template(template=prompt_template)</span><br><span class="line">    chain = LLMChain(llm=llm, prompt=prompt)</span><br><span class="line">    destination_chains[name] = chain</span><br><span class="line"></span><br><span class="line">destinations = [<span class="string">f&quot;<span class="subst">&#123;p[<span class="string">&#x27;名字&#x27;</span>]&#125;</span>: <span class="subst">&#123;p[<span class="string">&#x27;描述&#x27;</span>]&#125;</span>&quot;</span> <span class="keyword">for</span> p <span class="keyword">in</span> prompt_infos]</span><br><span class="line">destinations_str = <span class="string">&quot;\n&quot;</span>.join(destinations)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建默认目标链，当路由器无法决定使用哪个子链时调用的链。</span></span><br><span class="line">default_prompt = ChatPromptTemplate.from_template(<span class="string">&quot;&#123;input&#125;&quot;</span>)</span><br><span class="line">default_chain = LLMChain(llm=llm, prompt=default_prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建路由链</span></span><br><span class="line">router_template = MULTI_PROMPT_ROUTER_TEMPLATE.<span class="built_in">format</span>(destinations=destinations_str)</span><br><span class="line"></span><br><span class="line">router_prompt = PromptTemplate(</span><br><span class="line">    template=router_template,</span><br><span class="line">    input_variables=[<span class="string">&quot;input&quot;</span>],</span><br><span class="line">    output_parser=RouterOutputParser(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">router_chain = LLMRouterChain.from_llm(llm, router_prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建整体链路</span></span><br><span class="line">chain = MultiPromptChain(router_chain=router_chain,  <span class="comment"># 路由链路</span></span><br><span class="line">                         destination_chains=destination_chains,  <span class="comment"># 目标链路</span></span><br><span class="line">                         default_chain=default_chain,  <span class="comment"># 默认链路</span></span><br><span class="line">                         verbose=<span class="literal">True</span></span><br><span class="line">                         )</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    que = <span class="built_in">input</span>(<span class="string">&quot;请输入问题：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: que&#125;))</span><br></pre></td></tr></table></figure><ul><li>后续我们可以预定义非常多的prompt，然后通过路由链来进行任务分发，尽可能把任务细分，这样出现问题时，只需要关注对应的某一个prompt，而不需要整体的改动。</li></ul><h1>代理的概念（补充）</h1><ul><li><p>大型语言模型（LLMs）非常强大，但它们缺乏“最笨”的计算机程序可以轻松处理的特定能力。LLM 对逻辑推理、计算和检索外部信息的能力较弱，这与最简单的计算机程序形成对比。例如，语言模型无法准确回答简单的计算问题，还有当询问最近发生的事件时，其回答也可能过时或错误，因为无法主动获取最新信息。这是由于当前语言模型仅依赖预训练数据，与外界“断开”。要克服这一缺陷，LangChain框架提出了“代理”(Agent)的解决方案。</p></li><li><p>代理作为语言模型的外部模块，可提供计算、逻辑、检索等功能的支持，使语言模型获得异常强大的推理和获取信息的超能力。</p></li><li><p>要使用代理 (Agents) ，我们需要三样东西：</p><ol><li>一个基本的 LLM</li><li>我们将要进行交互的工具 Tools</li><li>一个控制交互的代理 (Agents) 。</li></ol><ul><li>现在尝试使用代理来解决数学问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> load_tools, initialize_agent, AgentType</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms.tongyi <span class="keyword">import</span> Tongyi</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1903ddb520ac4637a1d36b2f93e0aa4c&quot;</span></span><br><span class="line"></span><br><span class="line">llm = Tongyi()</span><br><span class="line"></span><br><span class="line">tools = load_tools(</span><br><span class="line">    [<span class="string">&quot;llm-math&quot;</span>, <span class="string">&quot;wikipedia&quot;</span>],</span><br><span class="line">    llm=llm</span><br><span class="line">)</span><br><span class="line">agent = initialize_agent(</span><br><span class="line">    tools,  <span class="comment"># 第二步加载的工具</span></span><br><span class="line">    llm,  <span class="comment"># 第一步初始化的模型</span></span><br><span class="line">    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,  <span class="comment"># 代理类型</span></span><br><span class="line">    handle_parsing_errors=<span class="literal">True</span>,  <span class="comment"># 处理解析错误</span></span><br><span class="line">    verbose=<span class="literal">True</span>  <span class="comment"># 输出中间步骤</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">agent.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;2084的25%是多少？还有，你知道Palworld这款游戏吗&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>输出</p><blockquote><p>Thought: 第一个问题需要计算2084的25%，可以使用计算器工具；第二个问题询问关于Palworld这款游戏的信息，需要用到Wikipedia工具。</p><p>Action:</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Calculator&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action_input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2084 * 25%&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Observation: Answer: 521.0<br>Thought:对于第二个问题，我需要使用Wikipedia工具来查询Palworld这款游戏的信息。<br>Action:</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wikipedia&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action_input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Palworld&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Observation: Page: Palworld<br>Summary: Palworld is an action-adventure survival game by Japanese developer Pocket Pair. The game is set in an open world populated with animal-like creatures known as “Pals”. The players can battle and capture Pals in order to use them for base building, traversal, and combat. Palworld can be played either solo, or online by up to 32 players on one server. Announced in 2021, it was launched via early access for Windows, Xbox One, and Xbox Series X/S in January 2024.<br>The game’s comedic premise, which involves using firearms and equipping Pals with them, earned it the nickname “Pokémon with guns”. Other elements, such as using creatures for food or placing them to work in mines and factories, have also garnered attention. It was generally well received, with praise for its gameplay, content, and satirical premise, but criticism for its reliance on shock humor and use of unoriginal designs and mechanics.Palworld sold eight million units in the first six days of early access and reached two million concurrent players on Steam, making it the second-highest played game of all time on the platform.</p><p>Page: Brotato<br>Summary: Brotato is a 2023 shoot 'em up video game created by French independent developer Thomas Gervraud under the studio name Blobfish. It was first released via Steam early access in 2022, during which it sold over one million copies. Brotato received positive reviews from critics and players, and it was later ported to multiple platforms.</p><p>Page: List of video games in development<br>Summary: This is a confirmed list of video games in development, but are scheduled for release beyond 2024 or currently carry no release date at all.</p></blockquote></li><li><p>总结一下上面的流程<br><img src="https://s11.ax1x.com/2024/02/24/pFUfYgP.png" alt=""></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;什么是LangChain&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;LangChain是一个强大的框架，旨在帮助开发人员使用语言模型构建端到端的应用程序。它提供了一套工具、组件和接口，可简化创建由大型语言模型 (LLM) 和聊天模型提供支持的应用程序的过程。LangChain 可以轻松</summary>
      
    
    
    
    <category term="实用教程" scheme="https://cyborg2077.github.io/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="LangChain" scheme="https://cyborg2077.github.io/tags/LangChain/"/>
    
  </entry>
  
  <entry>
    <title>SELECT FOR UPDATE的锁粒度</title>
    <link href="https://cyborg2077.github.io/2023/12/31/SelectForUpdate/"/>
    <id>https://cyborg2077.github.io/2023/12/31/SelectForUpdate/</id>
    <published>2023-12-31T14:59:55.000Z</published>
    <updated>2024-01-14T12:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>在数据库事务处理中，处理数据库并发访问的请求一个复杂且重要的问题，当多个事务同时访问并尝试修改同一行数据时，可能会导致数据的一致性问题，例如丢失更新或脏读的情况。为了解决这些问题，数据库提供了一些机处理并发事务，其中之一便是<code>SELECT ... FOR UPDATE</code>语句。</li><li>在并发访问的环境中，<code>SELECT ... FOR UPDATE</code>允许事务在选择数据的同时，锁定这些数据，防止其他事务<code>修改</code>这些数据，直到当前事务完成并释放锁。从本质上，<code>SELECT ... FOR UPDATE</code>是一种悲锁的用法，一般情况下，只会锁住一行数据，但是如果没有正确使用的话，会把整张表都锁住的。</li><li>我也在实际项目中使用过，例如免费字数抵扣金额下单的场景。</li></ul><h1>实践</h1><ul><li>虽然在MySQL中是通过<code>SELECT ... FOR UPDATE</code>语句来实现的行锁的功能。但是如果你在实际工作中使用不正确，也容易把整张表锁住，严重影响性能。<code>SELECT ... FOR UPDATE</code>语句的用法是否正确，跟<code>WHERE条件</code>中的参数有很大的关系。我们先来简单建个表，然后分析一下下面几种情况。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_info (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,             <span class="comment">-- 主键</span></span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">UNIQUE</span>,   <span class="comment">-- 唯一索引</span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    <span class="comment">-- 普通索引</span></span><br><span class="line">    amount <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),          <span class="comment">-- 普通字段</span></span><br><span class="line">    INDEX idx_email (email)         </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (id, username, email, amount)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;john_doe&#x27;</span>, <span class="string">&#x27;john.doe@example.com&#x27;</span>, <span class="number">500.00</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;alice_smith&#x27;</span>, <span class="string">&#x27;alice.smith@example.com&#x27;</span>, <span class="number">1000.00</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;bob_jones&#x27;</span>, <span class="string">&#x27;bob.jones@example.com&#x27;</span>, <span class="number">1500.00</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">&#x27;lisa_davis&#x27;</span>, <span class="string">&#x27;lisa.davis@example.com&#x27;</span>, <span class="number">2000.00</span>),</span><br><span class="line">  (<span class="number">5</span>, <span class="string">&#x27;charlie_brown&#x27;</span>, <span class="string">&#x27;charlie.brown@example.com&#x27;</span>, <span class="number">2500.00</span>);</span><br></pre></td></tr></table></figure><h2 id="主键字段">主键字段</h2><ul><li>当<code>WHERE</code>条件使用主键时</li></ul><div class="tabs" id="主键"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主键-1">事务一</button></li><li class="tab"><button type="button" data-href="#主键-2">事务二</button></li><li class="tab"><button type="button" data-href="#主键-3">事务三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主键-1"><ul><li>在事务一中使用<code>FOR UPDATE</code>，加一个行锁，注意此时没有<code>COMMIT</code>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;  <span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;  <span class="comment">-- 加行锁</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-2"><ul><li>在事务二中尝试修改该行，那么在执行的过程中，会一直等待事务一释放锁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>如果事务一，一直都不释放锁，那么事务二最终会报这个异常</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_info SET amount = 10000 WHERE id = 1</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1205</span> - <span class="title class_">Lock</span> wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">查询时间: <span class="number">50.</span>086s</span></span><br></pre></td></tr></table></figure><ul><li>当事务一提交事务后，事务二才能正常执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-3"><ul><li>如果此时开启一个事务三，修改其他行的值，那么是可以正常执行的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_info SET amount = 10000 WHERE id = 2</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Affected</span> <span class="attr">rows</span>: <span class="number">1</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">查询时间: <span class="number">0.</span>009s</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="唯一索引">唯一索引</h2><ul><li>当<code>WHERE</code>条件使用唯一索引时</li></ul><div class="tabs" id="主键"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主键-1">事务一</button></li><li class="tab"><button type="button" data-href="#主键-2">事务二</button></li><li class="tab"><button type="button" data-href="#主键-3">事务三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主键-1"><ul><li>在事务一中使用<code>FOR UPDATE</code>，加一个行锁，注意此时没有<code>COMMIT</code>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;john_doe&#x27;</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-2"><ul><li>在事务二中尝试修改该行，那么在执行的过程中，会一直等待事务一释放锁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;john_doe&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>如果事务一，一直都不释放锁，那么事务二最终会报这个异常</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount = <span class="number">10000</span> <span class="keyword">WHERE</span> username = <span class="string">&#x27;john_doe&#x27;</span></span><br><span class="line">&gt; <span class="number">1205</span> - <span class="keyword">Lock</span> wait timeout exceeded; try restarting <span class="keyword">transaction</span></span><br><span class="line">&gt; 查询时间: <span class="number">50.084</span>s</span><br></pre></td></tr></table></figure><ul><li>当事务一提交事务后，事务二才能正常执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-3"><ul><li>如果此时开启一个事务三，修改其他行的值，那么是可以正常执行的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;alice_smith&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;alice_smith&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> Affected <span class="keyword">rows</span>: <span class="number">1</span></span><br><span class="line"><span class="operator">&gt;</span> 查询时间: <span class="number">0.002</span>s</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="普通索引">普通索引</h2><ul><li>当<code>WHERE</code>条件使用普通索引时</li></ul><div class="tabs" id="主键"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主键-1">事务一</button></li><li class="tab"><button type="button" data-href="#主键-2">事务二</button></li><li class="tab"><button type="button" data-href="#主键-3">事务三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主键-1"><ul><li>在事务一中使用<code>FOR UPDATE</code>，加一个行锁，注意此时没有<code>COMMIT</code>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;john.doe@example.com&#x27;</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-2"><ul><li>在事务二中尝试修改该行，那么在执行的过程中，会一直等待事务一释放锁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;john.doe@example.com&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>如果事务一，一直都不释放锁，那么事务二最终会报这个异常</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount = <span class="number">1000</span> <span class="keyword">WHERE</span> email = <span class="string">&#x27;john.doe@example.com&#x27;</span></span><br><span class="line">&gt; <span class="number">1205</span> - <span class="keyword">Lock</span> wait timeout exceeded; try restarting <span class="keyword">transaction</span></span><br><span class="line">&gt; 查询时间: <span class="number">50.082</span>s</span><br></pre></td></tr></table></figure><ul><li>当事务一提交事务后，事务二才能正常执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-3"><ul><li>如果此时开启一个事务三，修改其他行的值，那么是可以正常执行的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;alice.smith@example.com&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;alice.smith@example.com&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> Affected <span class="keyword">rows</span>: <span class="number">1</span></span><br><span class="line"><span class="operator">&gt;</span> 查询时间: <span class="number">0.003</span>s</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="普通字段">普通字段</h2><ul><li>当<code>WHERE</code>条件使用普通字段时</li></ul><div class="tabs" id="主键"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主键-1">事务一</button></li><li class="tab"><button type="button" data-href="#主键-2">事务二</button></li><li class="tab"><button type="button" data-href="#主键-3">事务三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主键-1"><ul><li>在事务一中使用<code>FOR UPDATE</code>，加一个行锁，注意此时没有<code>COMMIT</code>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> amount <span class="operator">=</span> <span class="number">2500</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-2"><ul><li>在事务二中尝试修改该行，那么在执行的过程中，会一直等待事务一释放锁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> amount <span class="operator">=</span> <span class="number">2500</span>;</span><br></pre></td></tr></table></figure><ul><li>如果事务一，一直都不释放锁，那么事务二最终会报这个异常</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_info SET amount = 1000 WHERE amount = 2500</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1205</span> - <span class="title class_">Lock</span> wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">查询时间: <span class="number">50.</span>17s</span></span><br></pre></td></tr></table></figure><ul><li>当事务一提交事务后，事务二才能正常执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-3"><ul><li>如果此时开启一个事务三，修改其他行的值，会发现也是被阻塞了的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> amount <span class="operator">=</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_info SET amount = 1000 WHERE amount = 2000</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1205</span> - <span class="title class_">Lock</span> wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">查询时间: <span class="number">50.</span>083s</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>结论</h1><ul><li>总结一下<code>SELECT ... FOR UPDATE</code>加锁的情况：<ul><li>主键字段：加行锁。</li><li>唯一索引字段：加行锁。</li><li>普通索引字段：加行锁。</li><li>普通字段：加表锁。</li></ul></li><li>如果事务一加了<code>行锁</code>，一直没有释放锁，事务二操作相同行的数据时，会一直等待直到超时。</li><li>如果事务一加了<code>表锁</code>，一直没有释放锁，事务二不管操作的是哪一行数据，都会一直等待直到超时。</li></ul>]]></content>
    
    
    <summary type="html">SELECT ... FOR UPDATE 到底是加了行锁还是表锁？</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="MySQL" scheme="https://cyborg2077.github.io/tags/MySQL/"/>
    
    <category term="知识分享" scheme="https://cyborg2077.github.io/tags/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>模拟ChatGPT流式数据传输--SSE最佳实践（附可运行实例）</title>
    <link href="https://cyborg2077.github.io/2023/11/25/ServerSendEvents/"/>
    <id>https://cyborg2077.github.io/2023/11/25/ServerSendEvents/</id>
    <published>2023-11-25T04:21:49.000Z</published>
    <updated>2024-08-17T05:29:03.613Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>在使用ChatGPT的时候，发现输入prompt后，是使用流式的效果返回数据，给用户的是一个打字机的效果。查看其网络请求，发现这个接口的通响应类型是<code>text/event-stream</code>，一种基于EventStream的事件流。<br><img src="https://z1.ax1x.com/2023/11/25/piwzPk8.png" alt=""></li><li>那么为什么要这样传输呢？从使用场景上来说，ChatGPT是一个基于深度学习的大型语言模型，处理自然语言需要大量的计算资源和时间，那么响应速度肯定是比一般业务要慢的，那么接口等待时间过长，显然也不合适，那么对于这种对话场景，采用SSE技术边计算边返回，避免用户因为等待时间过长而关闭页面。</li></ul><h1>概述</h1><div class="note info no-icon flat"><p>SSE(Server Sent Event)，直译为服务器发送事件，也就是服务器主动发送事件，客户端可以获取到服务器发送的事件。</p></div><ul><li>常见的HTTP交互方式主要是客户端发起请求，然后服务端响应，然后一次性请求完毕。但是在SSE的使用场景下，客户端发起请求，然后建立SSE连接一直保持，服务端就可以返回数据给客户端。</li><li>SSE简单来说就是服务器主动向前端推送数据的一种技术，它是单向的。SSE适用于消息推送、监控等只需要服务端推送数据的场景中。</li></ul><h1>特点</h1><ul><li>服务端主动推送<ol><li>HTML5新标准，用于从服务端试试推送数据到浏览器端。</li><li>直接建立在当前HTTP连接上，本质上是一个HTTP长连接。</li></ol></li></ul><h1>SSE与WebSocket的区别</h1><ul><li>SSE是单工的，只能由服务端想客户端发送消息，而WebSocket是双工的</li></ul><table><thead><tr><th style="text-align:center">SSE</th><th style="text-align:center">WebScoket</th></tr></thead><tbody><tr><td style="text-align:center">http 协议</td><td style="text-align:center">独立的 websocket 协议</td></tr><tr><td style="text-align:center">轻量，使用简单</td><td style="text-align:center">相对复杂</td></tr><tr><td style="text-align:center">默认支持断线重连</td><td style="text-align:center">需要自己实现断线重连</td></tr><tr><td style="text-align:center">文本传输</td><td style="text-align:center">二进制传输</td></tr><tr><td style="text-align:center">支持自定义发送的消息类型</td><td style="text-align:center">-</td></tr></tbody></table><h1>SSE规范</h1><ul><li>在HTML5中，服务端SSE一般要遵循以下要求<ol><li>请求头：开启长连接 + 流式传递</li></ol>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-<span class="keyword">Type</span>: <span class="type">text</span>/event-stream;charset=UTF<span class="number">-8</span></span><br><span class="line"><span class="keyword">Cache</span>-Control: no-<span class="keyword">cache</span></span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><ol start="2"><li>数据格式：服务端发送的消息，由message组成，其格式如下</li></ol>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">field:</span>value</span><br></pre></td></tr></table></figure></li></ul><h1>SSE实践</h1><ul><li>这里简单做一个时钟效果，有服务端主动推送当前时间数据给前端，前端页面接收后展示。</li></ul><h2 id="SseEmitter类简介">SseEmitter类简介</h2><ul><li>SpringBoot使用SseEmitter来支持SSE，并对SSE规范做了一些封装，使用起来非常简单。我们在操作SseEmitter对象时，只需要关注发送的消息文本即可。</li><li>SseEmittter类的几个方法：<ol><li>send()：发送数据，如果传入的是一个非SseEventBuilder对象，那么传递参数会被封装到data中。</li><li>complete()：表示执行完成，会断开连接（如果是一些轮询进度的任务，我们可以在任务进度完成时，主动断开连接）</li><li>onTimeout()：连接超时时回调触发。</li><li>onCompletion()：结束之后的回调触发。</li><li>onError()：报错时的回调触发。</li></ol></li></ul><h2 id="示例Demo">示例Demo</h2><div class="tabs" id="sse时钟demo"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sse时钟demo-1">前端HTML</button></li><li class="tab"><button type="button" data-href="#sse时钟demo-2">后端接口</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sse时钟demo-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg_from_server&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> sse = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&quot;http://localhost/sse/hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    sse.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> eventVal = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg_from_server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        eventVal.<span class="property">innerHTML</span> = event.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sse时钟demo-2"><ul><li>后端接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.SseEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sse&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SseEmitter <span class="title function_">helloworld</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/event-stream&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                    sseEmitter.send(SseEmitter.event().data(LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>))));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Error in SSE: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">                sseEmitter.completeWithError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>大功告成<br><img src="https://z1.ax1x.com/2023/11/25/pi0EfLF.png" alt=""></li></ul><h2 id="注意事项">注意事项</h2><ul><li>这里的协议是<code>http/1.1</code>，仅支持6个连接数，而<code>HTTP/2</code>默认支持100个连接数，同时这里每30秒重新建立了一个新连接，这是SSE默认的连接超时时间，我们可以通过配置连接超时时间来达到不过期的目的，那么就需要我们在业务逻辑里<code>手动关闭连接</code>。</li><li>同时，每建立一个SSE连接的时候，都需要一个线程，那么这里就需要创建一个线程池来处理并发问题，同时也要根据自身的业务需求来做好压测。<br><img src="https://z1.ax1x.com/2023/11/25/pi0VFQf.png" alt=""></li><li>但是<code>HTTP/2</code>仅支持<code>HTTPS</code>，我这里就不演示了，感兴趣的小伙伴可以去了解一下使用OpenSSL生成一个<code>自签名的SSL证书</code></li></ul><h2 id="工具类封装">工具类封装</h2><ul><li>下面是我封装的一个简单的SseUtils</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.SseEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SseUtils</span> &#123;</span><br><span class="line">    <span class="comment">// timeout -&gt; 0表示不过期，默认是30秒，超过时间未完成（断开）会抛出异常</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEFAULT_TIME_OUT</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">// 会话map, 方便管理连接数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, SseEmitter&gt; conversationMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SseEmitter <span class="title function_">getConnect</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建SSE</span></span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>(DEFAULT_TIME_OUT);</span><br><span class="line">        <span class="comment">// 异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置前端重试时5s</span></span><br><span class="line">            sseEmitter.send(SseEmitter.event().reconnectTime(<span class="number">5_000L</span>).data(<span class="string">&quot;SSE建立成功&quot;</span>));</span><br><span class="line">            <span class="comment">// 连接超时</span></span><br><span class="line">            sseEmitter.onTimeout(() -&gt; SseUtils.timeout(conversationId));</span><br><span class="line">            <span class="comment">// 连接断开</span></span><br><span class="line">            sseEmitter.onCompletion(() -&gt; SseUtils.completion(conversationId));</span><br><span class="line">            <span class="comment">// 错误</span></span><br><span class="line">            sseEmitter.onError((e) -&gt; SseUtils.error(conversationId, e.getMessage()));</span><br><span class="line">            <span class="comment">// 添加sse</span></span><br><span class="line">            conversationMap.put(conversationId, sseEmitter);</span><br><span class="line">            <span class="comment">// 连接成功</span></span><br><span class="line">            log.info(<span class="string">&quot;创建sse连接成功 ==&gt; 当前连接总数=&#123;&#125;， 会话Id=&#123;&#125;&quot;</span>, conversationMap.size(), conversationId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 日志</span></span><br><span class="line">            log.error(<span class="string">&quot;前端重连异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取消息实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SseEmitter <span class="title function_">getInstance</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.get(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 断开连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        SseUtils.getInstance(conversationId).complete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给指定会话发送消息，如果发送失败，返回false</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonMsg        - 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(String conversationId, String jsonMsg)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断该会话是否已建立连接</span></span><br><span class="line">        <span class="comment">// 已建立连接</span></span><br><span class="line">        <span class="keyword">if</span> (SseUtils.getIsExistClientId(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                SseUtils.getInstance(conversationId).send(jsonMsg, MediaType.APPLICATION_JSON);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// 日志</span></span><br><span class="line">                SseUtils.removeClientId(conversationId);</span><br><span class="line">                log.error(<span class="string">&quot;发送消息异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未建立连接</span></span><br><span class="line">            log.error(<span class="string">&quot;连接不存在或者超时 ==&gt; 会话Id=&#123;&#125;会话自动关闭&quot;</span>, conversationId);</span><br><span class="line">            SseUtils.removeClientId(conversationId);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除会话Id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeClientId</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 不存在存在会话</span></span><br><span class="line">        <span class="keyword">if</span> (!SseUtils.getIsExistClientId(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除该会话</span></span><br><span class="line">        conversationMap.remove(conversationId);</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.info(<span class="string">&quot;移除会话成功 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取是否存在会话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getIsExistClientId</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.containsKey(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前连接总数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> - 连接总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getConnectTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;当前连接数：&#123;&#125;&quot;</span>, conversationMap.size());</span><br><span class="line">        <span class="keyword">for</span> (String s : conversationMap.keySet()) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;输出SSE-Map：&#123;&#125;&quot;</span>, conversationMap.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">timeout</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.error(<span class="string">&quot;sse连接超时 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtils.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">completion</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.info(<span class="string">&quot;sse连接已断开 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtils.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(String conversationId, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.error(<span class="string">&quot;sse服务异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, message);</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtils.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>还是用刚刚推送当前时间的例子，这里我们做一下主动关闭连接，我这里简单的逻辑就是遍历到一个整分，就停止推送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">timeStamp</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/event-stream&quot;</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 生成会话ID</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">conversationId</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">// 建立连接</span></span><br><span class="line">    <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> SseUtils.getConnect(conversationId);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                <span class="comment">// 向会话发送消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">timeStamp</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">                SseUtils.sendMessage(conversationId, timeStamp);</span><br><span class="line">                <span class="keyword">if</span> (timeStamp.endsWith(<span class="string">&quot;00&quot;</span>)) &#123;</span><br><span class="line">                    SseUtils.removeClientId(conversationId);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error in SSE: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            sseEmitter.completeWithError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">return</span> sseEmitter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>SSE实战</h1><ul><li>我这里也是在我项目里的轮询订单进度的时候尝试用了一下，因为我这个项目也是文本生成方向的，之前是前端定时轮询我这边的接口，现在换成我主动向前端推送数据，然后前端拿到数据自己解析内容就好了。这里用的工具类就是我刚刚封装的那个</li></ul><div class="tabs" id="实战"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#实战-1">Controller层</button></li><li class="tab"><button type="button" data-href="#实战-2">Service层</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="实战-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getOrderDetail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">getOrderDetailById</span><span class="params">(String orderId, HttpServletResponse httpServletResponse)</span> &#123;</span><br><span class="line">    httpServletResponse.setContentType(<span class="string">&quot;text/event-stream&quot;</span>);</span><br><span class="line">    httpServletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> orderService.getOrderDetailById(orderId, httpServletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="实战-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单来个线程池</span></span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">getOrderDetailById</span><span class="params">(String orderId, HttpServletResponse httpServletResponse)</span> &#123;</span><br><span class="line">    <span class="comment">// 建立连接</span></span><br><span class="line">    <span class="type">SseEmitter</span> <span class="variable">emitter</span> <span class="operator">=</span> SseUtils.getConnect(orderId);</span><br><span class="line">    executor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;=========SSE轮询中=========&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 每5秒推送一次数据</span></span><br><span class="line">                Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 查询订单数据</span></span><br><span class="line">            <span class="type">Torder</span> <span class="variable">torder</span> <span class="operator">=</span> orderMapper.selectOne(Wrappers.lambdaQuery(Torder.class).eq(Torder::getOrderId, orderId));</span><br><span class="line">            <span class="keyword">if</span> (torder == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果订单不存在，返回错误，主动断开连接</span></span><br><span class="line">                SseUtils.sendMessage(orderId, JSON.toJSONString(ErrorCodeEnum.ORDER_ID_NOT_EXIST));</span><br><span class="line">                SseUtils.removeClientId(orderId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">OrderDetailVO</span> <span class="variable">detailVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetailVO</span>();</span><br><span class="line">            detailVO.setIsExpire(stringRedisTemplate.opsForValue().get(orderId) == <span class="literal">null</span>);</span><br><span class="line">            detailVO.setOrderId(orderId);</span><br><span class="line">            detailVO.setCreateTime(torder.getCreateTime());</span><br><span class="line">            detailVO.setOrderType(torder.getPolishType());</span><br><span class="line">            detailVO.setAmount(torder.getAmount().doubleValue());</span><br><span class="line">            <span class="comment">// 根据不同的订单类型来封装不同的参数（这里为了满足产品的需求，想用一个接口显示不同种类订单的信息，用了SQL反模式设计数据库，导致代码很不优雅）</span></span><br><span class="line">            <span class="keyword">if</span> (torder.getOrderType() == <span class="number">0</span>) &#123;</span><br><span class="line">                Wrapper&lt;Object&gt; statusByOrderId = getStatusByOrderId(orderId);</span><br><span class="line">                <span class="keyword">if</span> (statusByOrderId.getCode() != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 订单状态查询异常，返回错误，主动断开连接</span></span><br><span class="line">                    SseUtils.sendMessage(orderId, JSON.toJSONString(ErrorCodeEnum.ASYNC_SERVICE_ERROR));</span><br><span class="line">                    SseUtils.removeClientId(orderId);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (torder.getPolishType() == Common.POLISH_TYPE_WITH_PAPER) &#123;</span><br><span class="line">                    <span class="type">PaperStatusByOrderIdVO</span> <span class="variable">paperVO</span> <span class="operator">=</span> (PaperStatusByOrderIdVO) statusByOrderId.getResult();</span><br><span class="line">                    BeanUtils.copyProperties(paperVO, detailVO);</span><br><span class="line">                    detailVO.setProgress(Double.valueOf(paperVO.getProgress()));</span><br><span class="line">                    detailVO.setTitle(paperVO.getPaperTitle());</span><br><span class="line">                    detailVO.setOrderStatus(paperVO.getStatus());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">TextStatusByOrderIdVO</span> <span class="variable">textVO</span> <span class="operator">=</span> (TextStatusByOrderIdVO) statusByOrderId.getResult();</span><br><span class="line">                    BeanUtils.copyProperties(textVO, detailVO);</span><br><span class="line">                    detailVO.setProgress(Double.valueOf(textVO.getProgress()));</span><br><span class="line">                    detailVO.setTitle(textVO.getPaperTitle());</span><br><span class="line">                    detailVO.setOrderStatus(textVO.getStatus());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (torder.getOrderType() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">CheckpassOrder</span> <span class="variable">checkpassOrder</span> <span class="operator">=</span> checkpassOrderMapper.selectOne(Wrappers.lambdaQuery(CheckpassOrder.class).eq(CheckpassOrder::getOrderId, orderId));</span><br><span class="line">                <span class="type">CheckpassReport</span> <span class="variable">checkpassReport</span> <span class="operator">=</span> checkpassReportMapper.selectOne(Wrappers.lambdaQuery(CheckpassReport.class).eq(CheckpassReport::getPaperId, checkpassOrder.getPaperId()));</span><br><span class="line">                detailVO.setOrderStatus(checkpassOrder.getStatus());</span><br><span class="line">                detailVO.setAuthor(checkpassReport.getAuthor());</span><br><span class="line">                detailVO.setTitle(checkpassReport.getTitle());</span><br><span class="line">                detailVO.setProgress(checkpassReport.getCopyPercent() == <span class="literal">null</span> ? <span class="number">0</span> : checkpassReport.getCopyPercent());</span><br><span class="line">                detailVO.setCheckVersion(CommonUtil.getCheckVersion(checkpassOrder.getJaneName()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> SseUtils.sendMessage(orderId, JSON.toJSONString(detailVO));</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (torder.getStatus() == Common.ORDER_FINISH_STATUS) &#123;</span><br><span class="line">                <span class="comment">// 订单完成，主动关闭连接</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    emitter.send(SseEmitter.event().reconnectTime(<span class="number">5000L</span>).data(<span class="string">&quot;SSE关闭连接&quot;</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                SseUtils.removeClientId(orderId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>使用过程中的一些坑</h1><ol><li>在使用过程中，浏览器中查看接口一直显示待处理状态，但我的Java服务确确实实已经推送了数据。<ul><li>如果你等待了一会儿，发现请求响应成功，但是一次性推送了很多条消息，那么大概率是缓冲区的问题，因为SSE是流式输出，流式输出通常会涉及到缓冲区的使用。在Java Servlet中，HttpServletResponse对象的输出流会有一个缓冲区。当使用Servlet的输出流写入数据时，这些数据首先会被写入缓冲区，然后才会被发送到客户端。所以我们需要再代码中禁用掉。</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpServletResponse.setHeader(<span class="string">&quot;X-Accel-Buffering&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>同时Nginx里也要加上同样的配置，如果你中间经过了多级Nginx，需要每一级Nginx都禁用此项。</li></ul> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure></li><li>如果你使用了阿里云的CDN服务，那么请设置为动态加速</li><li>服务端无法到客户端网络中断：客户端网络中断后，服务端无法感知到客户端断开连接，就会导致服务端的线程中的任务一直在运行，不断地给这个客户端推送消息。解决方案如下：<ol><li>通过给不同的业务场景给服务端设置不同的最大连接时长，超过这个时长，服务端会主动地去断开这个连接。</li><li>客户端感知断开连接的通知之后，如果当前订单任务还未结束，那么客户端会重新建立连接，直到订单任务结束，这样做能避免一些无效会话一直在推送消息的问题。</li></ol></li><li>客户端重连机制：如果客户端因为网络问题或者其他问题进行了断线，那么客户端会根据服务端发送的retry参数设置的时间间隔进行重连，而这个时候服务端是暂时无法感知到客户端已经断线了，所以还是会在持续地去给客户端推送消息。假如客户端重连成功之后，就会出现以下两种场景：<ol><li>服务端未断开连接：复用之前的连接线路，客户端会一次性收到多条断线期间未收到的消息内容，这个时候客户端使用限流，只更新最后一条消息，减少DOM渲染。</li><li>服务端主动断开了连接（订单任务结束断开/达到最大连接时长）：重新建立一条线路（之前的那条线路其实还是存在的），因为是一条新线路所以之前断线时，服务端发送的消息，是收不到的。</li></ol></li><li>如何保证用户在同一个业务场景下只会建立一条连接？<ol><li>这也就是上面标黄处提到的问题，之前的会话id都是服务端来生成，最后修改为客户端来生成会话id并且临时保存在本地策略就是（业务ID - 用户token后20位 - 页面RUNTIME_ID），这个样做的原因主要还是确保用户在同一个业务场景下或者在断线重连时 客户端每次向服务端建立连接的会话id都是相同的，从而方便后面 服务端断开之前的线路。</li><li>由于服务端采用的是HashMap来存储每个SSE对象，所以在插入id相同的会话的时候，会直接替换map中已经存在的会话，虽然之前的会话已经不存在了，但是其建立的连接并没有真正的断开，所以服务端在新的会话插入之前，先去显式地去将之前的会话执行一次断开连接的操作，然后再去执行创建连接操作。否则，当多余的线路达到一定的数量之后，客户端会出现线路阻塞的问题。</li></ol></li><li>新的会话加入之后，如何中断旧会话占用的线程？<ul><li>一开始的逻辑是将会话id保留在线程之中，具体流程是：判断当前会话是否存在 -&gt; 存在就推送消息 -&gt; sleep n秒。这样的处理的话就会出现一个问题，虽然我们在这里判断了会话id是否存在，但是由于上面我们在替换旧会话的时候，又重新创建了一个相同id的新会话（在同一个业务场景下多次建立连接，每次的会话id是一样的），所以当前线程sleep结束之后，会发现这个会话是存在的，从而会继续给这个会话推送消息。这个时候客户端会收到多个不同线程发送来的消息的问题。解决方案如下：<ol><li>在每次建立连接的时候将会话和该会话的所属线程关联在一起，也就是将管理会话的map由原来的 <code>Map&lt;String, SseEmitter&gt;</code>类型，修改为： <code>Map&lt;String, SseEmitterInfo&gt;</code>   类型，其中SseEmitterInfo是我们自己封装的一个类，其中包含SseEmitter对象和建立该连接时的线程名。</li><li>在发送消息之前，需要判断当前会话是否存在，并且判断该会话所属的线程是否是当前线程，如果满足上面两个条件的话，就推送消息；否则，中断线程；这样就可以保证每一个会话只会有一个线程在推送消息。</li></ol></li></ul></li></ol><p><img src="https://s11.ax1x.com/2024/02/24/pFUyKFP.png" alt=""></p><h1>一些补充</h1><ul><li>后续实际使用的时候，我又对SseUtils进行了改进，最终版本如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aimc.paperreduction.common.wrapper.RWrappers;</span><br><span class="line"><span class="keyword">import</span> com.aimc.paperreduction.model.enums.ErrorCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.SseEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SseUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 为了避免内存泄露，这里最好设置一个超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEFAULT_TIME_OUT</span> <span class="operator">=</span> <span class="number">30L</span> * <span class="number">60</span> *  <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">// 会话map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, SseEmitterInfo&gt; conversationMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 断开连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="type">SseEmitterInfo</span> <span class="variable">instance</span> <span class="operator">=</span> SseUtil.getInstance(conversationId);</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">            instance.getEmitter().complete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SseEmitter <span class="title function_">getConnect</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 SseEmitterInfo</span></span><br><span class="line">        <span class="type">SseEmitterInfo</span> <span class="variable">sseEmitterInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitterInfo</span>(conversationId);</span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>(DEFAULT_TIME_OUT);</span><br><span class="line">        sseEmitterInfo.setEmitter(sseEmitter);</span><br><span class="line">        <span class="comment">// 异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置前端重试时5s</span></span><br><span class="line">            sseEmitter.send(SseEmitter.event().reconnectTime(<span class="number">5_000L</span>).data(JSONObject.toJSONString(RWrappers.Fail(ErrorCodeEnum.SSE_CONNECT_SUCCESS))));</span><br><span class="line">            <span class="comment">// 连接超时</span></span><br><span class="line">            sseEmitter.onTimeout(() -&gt; SseUtil.timeout(conversationId));</span><br><span class="line">            <span class="comment">// 连接断开</span></span><br><span class="line">            sseEmitter.onCompletion(() -&gt; SseUtil.completion(conversationId));</span><br><span class="line">            <span class="comment">// 错误</span></span><br><span class="line">            sseEmitter.onError((e) -&gt; SseUtil.error(conversationId, e.getMessage()));</span><br><span class="line">            <span class="comment">// 添加sse</span></span><br><span class="line">            conversationMap.put(conversationId, sseEmitterInfo);</span><br><span class="line">            <span class="comment">// 连接成功</span></span><br><span class="line">            log.info(<span class="string">&quot;创建sse连接成功 ==&gt; 当前连接总数=&#123;&#125;， 会话Id=&#123;&#125;&quot;</span>, conversationMap.size(), conversationId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 日志</span></span><br><span class="line">            log.error(<span class="string">&quot;前端重连异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取消息实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SseEmitterInfo <span class="title function_">getInstance</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.get(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给指定会话发送消息，如果发送失败，返回false</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonMsg        - 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(String conversationId, String jsonMsg)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断该会话是否还在Map中，不存在则删除</span></span><br><span class="line">        <span class="keyword">if</span> (!conversationMap.containsKey(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已建立连接</span></span><br><span class="line">        <span class="keyword">if</span> (SseUtil.getIsExistClientId(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                SseUtil.getInstance(conversationId).getEmitter().send(jsonMsg, MediaType.APPLICATION_JSON);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// 日志</span></span><br><span class="line">                SseUtil.removeClientId(conversationId);</span><br><span class="line">                log.error(<span class="string">&quot;发送消息异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未建立连接</span></span><br><span class="line">            log.error(<span class="string">&quot;连接不存在或者超时 ==&gt; 会话Id=&#123;&#125;会话自动关闭&quot;</span>, conversationId);</span><br><span class="line">            SseUtil.removeClientId(conversationId);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并断开会话Id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeClientId</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 不存在存在会话</span></span><br><span class="line">        <span class="keyword">if</span> (!SseUtil.getIsExistClientId(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除该会话</span></span><br><span class="line">        conversationMap.remove(conversationId);</span><br><span class="line">        SseUtil.disconnect(conversationId);</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">         log.info(<span class="string">&quot;移除会话成功 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取是否存在会话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getIsExistClientId</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.containsKey(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前连接总数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> - 连接总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getConnectTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;当前连接数：&#123;&#125;&quot;</span>, conversationMap.size());</span><br><span class="line">        <span class="keyword">return</span> conversationMap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">timeout</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.error(<span class="string">&quot;sse连接超时 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtil.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">completion</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.info(<span class="string">&quot;sse连接已断开 ==&gt; 会话Id：&#123;&#125;，当前剩余连接数：&#123;&#125;&quot;</span>, conversationId, conversationMap.size());</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtil.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(String conversationId, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line"><span class="comment">//        log.error(&quot;sse服务异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;, conversationId, message);</span></span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtil.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SseEmitterInfo</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> SseEmitter emitter;</span><br><span class="line">        <span class="keyword">private</span> String threadName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SseEmitterInfo</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.emitter = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.threadName = Thread.currentThread().getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> SseEmitter <span class="title function_">getEmitter</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> emitter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmitter</span><span class="params">(SseEmitter emitter)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.emitter = emitter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getThreadName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> threadName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setThreadName</span><span class="params">(String threadName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.threadName = threadName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实际使用如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/connSse&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">connSse</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">    <span class="type">SseEmitter</span> <span class="variable">emitter</span> <span class="operator">=</span> SseUtil.getConnect(conversationId);</span><br><span class="line">    executor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 这里需要保证同一个会话ID只有一个线程处理</span></span><br><span class="line">        SseUtil.getInstance(conversationId).setThreadName(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted() &amp;&amp; SseUtil.getInstance(conversationId) != <span class="literal">null</span> &amp;&amp; SseUtil.getInstance(conversationId).getThreadName().equals(Thread.currentThread().getName())) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">sendSuccess</span> <span class="operator">=</span> SseUtil.sendMessage(conversationId, JSONObject.toJSONString(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">10</span>]));</span><br><span class="line">            log.info(<span class="string">&quot;向会话：&#123;&#125;，推送&quot;</span>, conversationId);</span><br><span class="line">            <span class="keyword">if</span> (!sendSuccess) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;=========连接不存在，服务端主动关闭SSE连接=========&quot;</span>);</span><br><span class="line">                SseUtil.removeClientId(conversationId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 每一秒推送一次数据</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于我这里的业务限制，只能这么用SSE。原有的业务逻辑是，我轮询算法接口，更新数据，然后前端轮询我的接口，更新页面状态。使用了SSE之后变成了，我轮询算法接口，更新数据，然后向前端推送数据。</li><li>但是更好的处理方式是，我这边给算法提供一个回调的接口，当算法有进度更新时，调用我这个回调接口，然后我在这个回调逻辑里向前端推送数据，这样逻辑上其实是更顺的，后续有时间，打算和算法侧聊聊这块，进一步优化。</li></ul>]]></content>
    
    
    <summary type="html">Server-Sent Events 服务器推送事件，简称 SSE，是一种服务端实时主动向浏览器推送消息的技术。</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SSE" scheme="https://cyborg2077.github.io/tags/SSE/"/>
    
  </entry>
  
  <entry>
    <title>Redisson延迟队列实现倒计时任务</title>
    <link href="https://cyborg2077.github.io/2023/10/28/RDelayedQueue/"/>
    <id>https://cyborg2077.github.io/2023/10/28/RDelayedQueue/</id>
    <published>2023-10-28T12:14:25.000Z</published>
    <updated>2023-10-28T14:37:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景">问题背景</h2><ul><li>项目里刚好需要实现一个延迟订单取消任务。具体而言，如果一份订单在生成后的15分钟内未完成支付，系统需要自动取消该订单，并返还相关订单所使用的优惠券或免费额度等资源。</li><li>虽然引入MQ或者Kafka也是一种解决方法，但出于最大程度减少系统复杂性的角度考虑，强烈建议充分利用已有的Redis组件（例如Redisson）来解决这一问题，而不引入新组件。这样可以提高效率、减少维护负担，并确保充分发挥已有技术的潜力。</li></ul><h2 id="延迟队列">延迟队列</h2><ul><li>Redisson中定义了分布式延迟队列RDelayedQueue，是一种基于zset结构实现的延时队列，，它允许以指定的延迟时长，将任务放到目标队列中。</li><li>其实就是在zset的基础上增加了一个基于内存的延迟队列，当我们要添加一个数据到延迟队列的时候，Redission会把数据和超时时间放到zset中，并且起一个延时任务，当任务到期时，再去zset中把数据取出来，返回给客户端使用。</li></ul><h2 id="解决方案">解决方案</h2><ul><li>其实这里的实现和我之前写的消息队列差不多，感兴趣的可以去看我前面那篇文</li></ul><div class="tag link"><a class="link-card" title="手写一个消息队列" href="https://cyborg2077.github.io/2023/10/03/DIYTaskQueue/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">手写一个消息队列</p><p class="url">https://cyborg2077.github.io/2023/10/03/DIYTaskQueue/</p></div></a></div><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String REDIS_HOST;  <span class="comment">//地址配置在配置文件上</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String REDIS_PORT;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String REDIS_PASSWORD;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">createRedisAPi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">redissonConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        redissonConfig.setCodec(<span class="keyword">new</span> <span class="title class_">org</span>.redisson.client.codec.StringCodec());</span><br><span class="line">        <span class="comment">//我这里单节点演示一下</span></span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">singleServerConfig</span> <span class="operator">=</span> redissonConfig.useSingleServer();</span><br><span class="line">        singleServerConfig.setAddress(String.format(<span class="string">&quot;redis://%s:%s&quot;</span>, REDIS_HOST, REDIS_PORT));</span><br><span class="line">        singleServerConfig.setPassword(REDIS_PASSWORD);</span><br><span class="line">        <span class="comment">//设置几号数据库</span></span><br><span class="line">        singleServerConfig.setDatabase(<span class="number">0</span>);</span><br><span class="line">        singleServerConfig.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line">        singleServerConfig.setConnectionPoolSize(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(redissonConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>延迟队列执行器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayTaskQueueExecutor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> RBlockingQueue&lt;T&gt; queue;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Thread msgLooper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DelayTaskQueueExecutor.Processor&lt;T&gt; processor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(T task)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DelayTaskQueueExecutor</span><span class="params">(String threadName, RBlockingQueue&lt;T&gt; queue, DelayTaskQueueExecutor.Processor&lt;T&gt; processor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">        <span class="built_in">this</span>.processor = processor;</span><br><span class="line">        <span class="built_in">this</span>.msgLooper = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>::looper);</span><br><span class="line">        <span class="built_in">this</span>.msgLooper.setName(threadName);</span><br><span class="line">        <span class="built_in">this</span>.msgLooper.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">looper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">task</span> <span class="operator">=</span> queue.take();</span><br><span class="line">                processor.process(task);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(String.format(<span class="string">&quot;TaskQueueExecutor %s run task exception&quot;</span>,</span><br><span class="line">                        <span class="built_in">this</span>.msgLooper.getName()), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>服务类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayQueueService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoMapper userInfoMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BonusInfoMapper bonusInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redisson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RDelayedQueue&lt;String&gt; delayedQueue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDelayQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        RBlockingQueue&lt;String&gt; blockingQueue = redisson.getBlockingQueue(<span class="string">&quot;orderDelayQueue&quot;</span>);</span><br><span class="line">        delayedQueue = redisson.getDelayedQueue(blockingQueue);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DelayTaskQueueExecutor</span>&lt;&gt;(<span class="string">&quot;ORDER_DELAY&quot;</span>, blockingQueue, <span class="built_in">this</span>::processOrder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将订单信息加入到延迟队列中，并设置TTL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId 订单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToDelayQueue</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        delayedQueue.offer(orderId, <span class="number">2</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="type">Torder</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectOne(Wrappers.lambdaQuery(Torder.class).eq(Torder::getOrderId, orderId));</span><br><span class="line">        <span class="keyword">if</span> (order != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> order.getStatus();</span><br><span class="line">            <span class="comment">// 如果订单仍然是未支付状态，并且字数已经预扣了，则返还预扣的字数，并且关闭订单</span></span><br><span class="line">            <span class="keyword">if</span> (status == Common.ORDER_ORIGINAL_STATUS) &#123;</span><br><span class="line">                order.setStatus(Common.ORDER_CLOSED_STATUS);</span><br><span class="line">                <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> order.getToken();</span><br><span class="line">                <span class="comment">// 查询是否是登录用户</span></span><br><span class="line">                <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userInfoMapper.selectOneForUpdate(userId);</span><br><span class="line">                <span class="keyword">if</span> (userInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">UsedWordsBonusInfo</span> <span class="variable">wordsBonusInfo</span> <span class="operator">=</span> usedWordsBonusInfoMapper.selectOne(Wrappers.lambdaQuery(UsedWordsBonusInfo.class).eq(UsedWordsBonusInfo::getOrderId, order.getOrderId()));</span><br><span class="line">                    <span class="comment">// 判断是否已经预扣了</span></span><br><span class="line">                    <span class="keyword">if</span> (wordsBonusInfo.getSelfWordsDeducted() == Common.ALREADY_DEDUCTION) &#123;</span><br><span class="line">                        userInfo.setRegisterBonusWords(userInfo.getRegisterBonusWords() + wordsBonusInfo.getUsedRegisterBonus());</span><br><span class="line">                        userInfo.setInviteBonusWords(userInfo.getInviteBonusWords() + wordsBonusInfo.getUsedInviteBonus());</span><br><span class="line">                        log.info(<span class="string">&quot;订单：&#123;&#125;，返还注册字数：&#123;&#125;，邀请字数：&#123;&#125;&quot;</span>, orderId, wordsBonusInfo.getUsedRegisterBonus(), wordsBonusInfo.getUsedInviteBonus());</span><br><span class="line">                        wordsBonusInfo.setSelfWordsDeducted(Common.ORIGIN_STATUS);</span><br><span class="line">                        usedWordsBonusInfoMapper.updateById(wordsBonusInfo);</span><br><span class="line">                        userInfoMapper.updateById(userInfo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            orderMapper.updateById(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>使用方法，创建订单的时候将订单号加入到队列中，到期后会自动执行关闭订单的对应逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delayQueueService.addToDelayQueue(orderId);</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><ul><li>细心的同学可能注意到了我这里的事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">      <span class="type">Torder</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectOne(Wrappers.lambdaQuery(Torder.class).eq(Torder::getOrderId, orderId));</span><br><span class="line">      <span class="keyword">if</span> (order != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> order.getStatus();</span><br><span class="line">          <span class="comment">// 如果订单仍然是未支付状态，并且字数已经预扣了，则返还预扣的字数，并且关闭订单</span></span><br><span class="line">          <span class="keyword">if</span> (status == Common.ORDER_ORIGINAL_STATUS) &#123;</span><br><span class="line">              order.setStatus(Common.ORDER_CLOSED_STATUS);</span><br><span class="line">              <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> order.getToken();</span><br><span class="line">              <span class="comment">// 查询是否是登录用户</span></span><br><span class="line">              <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userInfoMapper.selectOneForUpdate(userId);</span><br><span class="line">              <span class="keyword">if</span> (userInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="type">UsedWordsBonusInfo</span> <span class="variable">wordsBonusInfo</span> <span class="operator">=</span> usedWordsBonusInfoMapper.selectOne(Wrappers.lambdaQuery(UsedWordsBonusInfo.class).eq(UsedWordsBonusInfo::getOrderId, order.getOrderId()));</span><br><span class="line">                  <span class="comment">// 判断是否已经预扣了</span></span><br><span class="line">                  <span class="keyword">if</span> (wordsBonusInfo.getSelfWordsDeducted() == Common.ALREADY_DEDUCTION) &#123;</span><br><span class="line">                      userInfo.setRegisterBonusWords(userInfo.getRegisterBonusWords() + wordsBonusInfo.getUsedRegisterBonus());</span><br><span class="line">                      userInfo.setInviteBonusWords(userInfo.getInviteBonusWords() + wordsBonusInfo.getUsedInviteBonus());</span><br><span class="line">                      log.info(<span class="string">&quot;订单：&#123;&#125;，返还注册字数：&#123;&#125;，邀请字数：&#123;&#125;&quot;</span>, orderId, wordsBonusInfo.getUsedRegisterBonus(), wordsBonusInfo.getUsedInviteBonus());</span><br><span class="line">                      wordsBonusInfo.setSelfWordsDeducted(Common.ORIGIN_STATUS);</span><br><span class="line">                      usedWordsBonusInfoMapper.updateById(wordsBonusInfo);</span><br><span class="line">                      userInfoMapper.updateById(userInfo);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          orderMapper.updateById(order);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>重点是我这里的<code>userInfoMapper.selectOneForUpdate(userId);</code>，这句其实是我手写的一个SQL，<code>SELECT XXX FROM user WHERE userId = xxx FOR UPDATE</code>，主要是为了手动触发行锁。这里是使用的默认的事务隔离级别，可重复读。因为事务里的读操作默认是不会触发行锁的，所以这里可能会出现另一个事务将用户信息改了，并且提交了，由于可重复读的问题，当前事务中读取到的仍是修改前的数据，那么当前事务提交的时候，就会将另一个事务的提交结果覆盖掉，如果这里不触发行锁，会导致数据的不一致性。</li><li>加了行锁之后，可以确保只有一个会话可以访问该订单数据，从而避免并发问题。但是也不是所有在事务里的读操作都要加行锁，毕竟那样的执行效率就太慢了，只有涉及到读取信息，并且后续需要对该信息进行修改的时候，才加上行锁。</li></ul>]]></content>
    
    
    <summary type="html">项目里有个场景需要做延迟任务</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="Redis" scheme="https://cyborg2077.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>手写一个消息队列</title>
    <link href="https://cyborg2077.github.io/2023/10/03/DIYTaskQueue/"/>
    <id>https://cyborg2077.github.io/2023/10/03/DIYTaskQueue/</id>
    <published>2023-10-03T15:30:34.000Z</published>
    <updated>2023-10-05T03:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li>本文涉及到了大量JDK 8的新特性，对这部分不太了解的，可以参考我之前写的这篇文章</li></ul><div class="tag link"><a class="link-card" title="Java8 新特性" href="https://cyborg2077.github.io/2022/11/05/NewFeaturesOfJava8/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">Java8 新特性</p><p class="url">https://cyborg2077.github.io/2022/11/05/NewFeaturesOfJava8/</p></div></a></div><h2 id="背景">背景</h2><ul><li>项目里原本是使用Kafka当消息队列的，但是组内大师觉得Kafka太重了，只要确保订单信息都持久化到数据库里，每次重启的时候重新加载任务，那么其实是可以自己写一个消息队列来替代Kafka的</li></ul><div class="tabs" id="消息队列"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#消息队列-1">任务队列执行器</button></li><li class="tab"><button type="button" data-href="#消息队列-2">QueueService</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="消息队列-1"><ul><li>下面是我自己写的一个任务队列执行器，使用了<code>ArrayBlockingQueue</code>来存储任务，并创建一个单独的线程来处理队列中的任务。并且允许指定处理任务的处理器（Processor），可以根据需要执行不同的任务。</li><li>关于TaskQueueExecutor的构造函数，我这里自定义了一个函数式接口，但是其实也可以直接用Java内置的函数式接口：Function，写法类似于<code>public TaskQueueExecutor(String threadName, int queueSize, Function&lt;T, R&gt; processor) {}</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskQueueExecutor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 为记录消息和错误信息定义一个日志记录器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于存储类型为T的任务的阻塞队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayBlockingQueue&lt;T&gt; queue;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于处理任务的独立线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Thread msgLooper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于处理任务的处理器接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Processor&lt;T&gt; processor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于跟踪队列中任务的数量的AtomicInteger是原子整数类型，可以避免并发环境下的线程安全问题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger taskNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个处理任务的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(T task)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数用于初始化TaskQueueExecutor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskQueueExecutor</span><span class="params">(String threadName, <span class="type">int</span> queueSize, Processor&lt;T&gt; processor)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用给定的大小初始化阻塞队列</span></span><br><span class="line">        <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;T&gt;(queueSize);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 存储用于处理任务的处理器</span></span><br><span class="line">        <span class="built_in">this</span>.processor = processor;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新线程用于消息处理</span></span><br><span class="line">        <span class="built_in">this</span>.msgLooper = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>::looper);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置线程名称，我这里是根据业务名称来设置的，这样排查问题会比较方便</span></span><br><span class="line">        <span class="built_in">this</span>.msgLooper.setName(threadName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动消息处理线程</span></span><br><span class="line">        <span class="built_in">this</span>.msgLooper.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化taskNum</span></span><br><span class="line">        taskNum = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法用于将消息（任务）发送到队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(T task)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将任务放入队列</span></span><br><span class="line">            <span class="built_in">this</span>.queue.put(task);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 增加任务计数</span></span><br><span class="line">            taskNum.incrementAndGet();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法用于获取队列中的任务数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTaskNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskNum.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主要的消息处理循环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">looper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 从队列中获取任务（如果队列为空，则阻塞）</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">task</span> <span class="operator">=</span> queue.take();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 使用提供的处理器处理任务</span></span><br><span class="line">                processor.process(task);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// 如果线程被中断，则中断循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 处理任务处理过程中出现的任何异常</span></span><br><span class="line">                log.error(String.format(<span class="string">&quot;TaskQueueExecutor %s run task exception&quot;</span>,</span><br><span class="line">                        <span class="built_in">this</span>.msgLooper.getName()), e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 即使发生异常，也会在finally块中减少任务计数</span></span><br><span class="line">                taskNum.decrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="消息队列-2"><ul><li><code>QueueService</code>：是用于管理不同类型的任务队列。<del>（我这里目前就俩任务队列）</del></li><li><code>@PostConstruct init()</code>：使用注解来标记初始化方法，该方法在类实例化后自动调用，主要是初始化了两个<code>ArrayList</code>，分别用于存储不同类型的任务队列执行器，同时可以通过配置项来判断是否需要从数据库加载未完成任务。</li><li><code>sendMessage()</code>：用于将订单添加到适当的队列执行器，根据订单的类型选择合适的执行器列表，计算任务最少的分区并添加订单。</li><li><code>getQueueSize()</code>: 用于获取特定订单的队列大小，根据订单类型选择相应的队列执行器列表并返回队列大小。</li><li><code>getTaskQueueExecutors()</code>：根据订单类型返回相应的任务队列执行器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入依赖的服务和组件</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ThirdManager thirdManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> QueueConfig queueConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderConsumerService orderConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义两个ArrayList，用于存储不同类型的任务队列执行器，这里可以根据自身业务需求来定义多个。</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;TaskQueueExecutor&lt;Torder&gt;&gt; paperTaskExecutors;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;TaskQueueExecutor&lt;Torder&gt;&gt; textTaskExecutors;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化方法，在类实例化后自动调用，创建信息从配置文件中读取。</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 加载配置，设置队列大小和处理器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>; idx &lt; queueConfig.getPaperTopicPartitionsNum(); idx++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> idx;</span><br><span class="line">            paperTaskExecutors.add(<span class="keyword">new</span> <span class="title class_">TaskQueueExecutor</span>&lt;&gt;(</span><br><span class="line">                String.format(<span class="string">&quot;%s-%d&quot;</span>, queueConfig.getPaperTopic(), partition),</span><br><span class="line">                <span class="number">1000</span>,</span><br><span class="line">                torder -&gt; &#123;</span><br><span class="line">                    orderConsumerService.paperConsumeMessage(torder, partition);</span><br><span class="line">                &#125;</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载配置，设置队列大小和处理器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>; idx &lt; queueConfig.getTextTopicPartitionsNum(); idx++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> idx;</span><br><span class="line">            textTaskExecutors.add(<span class="keyword">new</span> <span class="title class_">TaskQueueExecutor</span>&lt;&gt;(</span><br><span class="line">                String.format(<span class="string">&quot;%s-%d&quot;</span>, queueConfig.getTextTopic(), partition),</span><br><span class="line">                <span class="number">1000</span>,</span><br><span class="line">                torder -&gt; &#123;</span><br><span class="line">                    orderConsumerService.textConsumeMessage(torder, partition);</span><br><span class="line">                &#125;</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次重启的时候，从数据库加载未完成订单，可以通过配置项配置，生产环境加载未完成任务，开发环境不加载</span></span><br><span class="line">        <span class="keyword">if</span> (queueConfig.isNeedLoadFromDB()) &#123;</span><br><span class="line">            <span class="comment">// 查询数据库中未处理的订单。</span></span><br><span class="line">            List&lt;Torder&gt; orders = orderMapper.selectList(Wrappers.lambdaQuery(Torder.class).eq(Torder::getStatus, <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (Torder torder : orders) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;添加未处理订单：&#123;&#125;&quot;</span>, torder);</span><br><span class="line">                <span class="comment">// 将这些订单添加到适当的消息队列，以便后续处理。</span></span><br><span class="line">                sendMessage(torder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于将订单消息发送到适当的队列执行器。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Torder torder)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">executorOptional</span> <span class="operator">=</span> getTaskQueueExecutors(torder);</span><br><span class="line">        executorOptional.ifPresent(executors -&gt; &#123;</span><br><span class="line">            <span class="comment">// stream操作，用于寻找任务数最少的队列，默认值为0</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, executors.size())</span><br><span class="line">                    .reduce((i, j) -&gt; executors.get(i).getTaskNum() &gt; executors.get(j).getTaskNum() ? j : i)</span><br><span class="line">                    .orElse(<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">taskNum</span> <span class="operator">=</span> executors.get(partition).getTaskNum();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里是我的业务逻辑</span></span><br><span class="line">            torder.setZone(partition);</span><br><span class="line">            orderMapper.updateById(torder);</span><br><span class="line">            log.info(<span class="string">&quot;当前消息入队列，所在分区&#123;&#125;, 当前订单号为&#123;&#125;, 前面还有&#123;&#125;人在排队&quot;</span>,</span><br><span class="line">                    partition, torder.getOrderId(), executors.get(partition).getTaskNum());</span><br><span class="line">            <span class="keyword">if</span> (taskNum &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                thirdManager.sendExceptionToFeiShu(<span class="string">&quot;报告降重，分区：【&quot;</span> + partition + <span class="string">&quot;】当前排队人数已达：【&quot;</span> + taskNum + <span class="string">&quot;】人次&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加订单到选定的队列执行器。</span></span><br><span class="line">            executors.get(partition).sendMessage(torder);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法用于获取特定订单的队列大小（即队列中等待处理的订单数量）。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueueSize</span><span class="params">(Torder torder)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">executorOptional</span> <span class="operator">=</span> getTaskQueueExecutors(torder);</span><br><span class="line">        <span class="keyword">return</span> executorOptional.map(taskQueueExecutors -&gt;</span><br><span class="line">                        taskQueueExecutors.get(torder.getZone()).getTaskNum())</span><br><span class="line">                .orElse(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法用于根据订单类型获取相应的任务队列执行器列表。</span></span><br><span class="line">    <span class="keyword">private</span> Optional&lt;ArrayList&lt;TaskQueueExecutor&lt;Torder&gt;&gt;&gt; <span class="title function_">getTaskQueueExecutors</span><span class="params">(Torder torder)</span> &#123;</span><br><span class="line">        ArrayList&lt;TaskQueueExecutor&lt;Torder&gt;&gt; executors;</span><br><span class="line">        <span class="keyword">if</span> (torder.getPolishType().equals(Common.POLISH_TYPE_WITH_PAPER)) &#123;</span><br><span class="line">            executors = paperTaskExecutors;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (torder.getPolishType().equals(Common.POLISH_TYPE_WITH_TEXT)) &#123;</span><br><span class="line">            executors = textTaskExecutors;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (torder.getPolishType().equals(Common.POLISH_TYPE_WITH_EXPAND)) &#123;</span><br><span class="line">            executors = textTaskExecutors;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (torder.getPolishType().equals(Common.POLISH_TYPE_WITH_RELINE)) &#123;</span><br><span class="line">            executors = textTaskExecutors;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error PolishType: &#123;&#125;&quot;</span>, torder.getPolishType());</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(executors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">手写消息队列替代Kafka</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SpringBoot" scheme="https://cyborg2077.github.io/tags/SpringBoot/"/>
    
    <category term="消息队列" scheme="https://cyborg2077.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>AOP、MDC实现日志追踪</title>
    <link href="https://cyborg2077.github.io/2023/10/03/MDCTraceLog/"/>
    <id>https://cyborg2077.github.io/2023/10/03/MDCTraceLog/</id>
    <published>2023-10-03T13:36:49.000Z</published>
    <updated>2023-10-03T15:17:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li>在实际开发中，日志输出是非常重要的，在生产环境中，如果 日志打得好，可以快速地排查问题，为了更好的查看日志，我们需要将这些日志串联起来，这样会使排查问题变得更加轻松。正好我前一篇文介绍了ELK的搭建，那么现在我们再来看看AOP+MDC如何实现日志追踪。</li><li>如果我们可以在日志中记录用户的IP，那么我们就能分析该用户的所有操作日志。如果我们可以在日志中记录订单ID，那么如果我们的订单出现了问题，我们可以很快的来根据订单ID在Kibana中搜索与该订单ID关联的所有日志信息。</li></ul><h2 id="实现思路">实现思路</h2><ul><li>串联的核心在于要把ID作为一个请求必传参数，例如我们手动打印日志的时候，可以在日志中加上我们的业务ID，例如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;提交订单开始：&#123;&#125;&quot;</span>, orderId);</span><br></pre></td></tr></table></figure><ul><li>但是此种方式较为繁琐，我们需要在每条日志中都手动加上orderId的输出，那么有没有更简单的方式呢？首先想到的是AOP，因为AOP可以将日志记录的行为从业务的核心逻辑中分离出来，而MDC是一个线程安全的存放诊断日志的容器，在处理请求前将请求的唯一标示放到MDC容器中，这个唯一标示会随着日志一起输出，以此来区分该条日志是属于那个请求的。并在请求处理完成之后清除MDC容器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MDCAdapter</span> &#123;</span><br><span class="line">    <span class="comment">// 将一个k-v键值对放到容器，其实是放到当前线程的ThreadLocalMap中</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String var1, String var2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据key在当前线程的MDC容器中获取对应的值</span></span><br><span class="line">    String <span class="title function_">get</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据key移除容器中的值</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空当前线程的MDC容器</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; <span class="title function_">getCopyOfContextMap</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setContextMap</span><span class="params">(Map&lt;String, String&gt; var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Logback配置：使用MDC机制，我们需要在logback.xml日志模板中进行一些配置，通过使用占位符<code>%X&#123;&#125;</code>来占位，替换到对应MDC中key的值。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value=&quot;%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr([$&#123;springAppName:-&#125;])&#123;yellow&#125; %clr(%X&#123;TRACE_ID&#125;)&#123;cyan&#125; %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %green([%X&#123;userIp&#125;]) %cyan([%X&#123;requestURI&#125;]) %green([%X&#123;orderId&#125;]) %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li>我们可以通过拦截器，将用户IP信息记录到日志中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserIpFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_IP_MDC_KEY</span> <span class="operator">=</span> <span class="string">&quot;userIp&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_REQUEST_URI_MDC_KEY</span> <span class="operator">=</span> <span class="string">&quot;requestURI&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取用户IP并添加到MDC</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">userIp</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">            MDC.put(USER_IP_MDC_KEY, userIp);</span><br><span class="line">            MDC.put(USER_REQUEST_URI_MDC_KEY, requestURI);</span><br><span class="line">            <span class="comment">// 继续请求处理</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 清除MDC，确保不会影响其他请求</span></span><br><span class="line">            MDC.remove(USER_IP_MDC_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MDC结合AOP">MDC结合AOP</h2><ul><li>因为这部分其实是半道里加进来的，所以写的比较粗糙，但是实现思路就是用切点表达式来匹配订单相关信息，主要就是Order这个实体类和orderId这个参数，但是切点不支持匹配参数名，所以匹配String orderId的时候会比较麻烦，需要一个一个手动匹配（因为不支持参数名匹配，按类型匹配会匹配第一个参数是Sting的方法，所以会匹配错）。</li><li>我这里的建议是通过方法名进行匹配，那么就需要订单相关的方法名的后缀进行统一，然后切点表达式按方法名后缀匹配就好了 <del>（后期有空再重构重构代码吧，毕竟这里写的实在不太好）</del></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderIdAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;(execution(* xxx.xxxx.xxx.service.OrderConsumerService.processText(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.getPaperJsonContent(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.getTextJsonObject(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.TextConsumeMessage*(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.PaperConsumeMessage*(..)))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp; args(torder, ..)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderMethod1</span><span class="params">(Torder torder)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;orderMethod1(torder)&quot;, argNames = &quot;joinPoint,torder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logMethod1</span><span class="params">(ProceedingJoinPoint joinPoint, Torder torder)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Accessed method: &#123;&#125;&quot;</span>, joinPoint.getSignature().toShortString());</span><br><span class="line">        MDC.put(<span class="string">&quot;orderId&quot;</span>, torder.getOrderId());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            MDC.remove(<span class="string">&quot;orderId&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;(execution(* xxx.xxxx.xxx.web.controller.CommonController.commitJCInformation(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.impl.OrderServiceImpl.getAsyncErrorStatusOrder(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.web.controller.CommonController.getStatusByOrderId(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.web.controller.CommonController.userComment(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.impl.OrderServiceImpl.commitJCInformation(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.getTextStatusByOrderId(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.getPaperStatusByOrderId(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.manager.ThirdManager.getTaskProcessStatus(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.manager.ThirdManager.getTextTaskProcessStatus(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.manager.ThirdManager.createTextAlgorithmTask(..)))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp; args(orderId, ..)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderMethod2</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;orderMethod2(orderId)&quot;, argNames = &quot;joinPoint,orderId&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logMethod2</span><span class="params">(ProceedingJoinPoint joinPoint, String orderId)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Accessed method: &#123;&#125;&quot;</span>, joinPoint.getSignature().toShortString());</span><br><span class="line">        MDC.put(<span class="string">&quot;orderId&quot;</span>, orderId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            MDC.remove(<span class="string">&quot;orderId&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前面已经搭建了ELK，那现在再来讲讲怎么实现日志追踪</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SpringBoot" scheme="https://cyborg2077.github.io/tags/SpringBoot/"/>
    
    <category term="AOP" scheme="https://cyborg2077.github.io/tags/AOP/"/>
    
    <category term="日志分析" scheme="https://cyborg2077.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
    <category term="MDC" scheme="https://cyborg2077.github.io/tags/MDC/"/>
    
  </entry>
  
  <entry>
    <title>AOP封装一个记录耗时的注解</title>
    <link href="https://cyborg2077.github.io/2023/10/03/TakeTimeLog/"/>
    <id>https://cyborg2077.github.io/2023/10/03/TakeTimeLog/</id>
    <published>2023-10-03T07:16:34.000Z</published>
    <updated>2023-10-03T08:38:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述">简述</h2><ul><li>上篇文章说的是使用Arthas来分析耗时，但是整体流程还是挺繁琐的，那这篇文章我们就用AOP来封装一个记录耗时的注解吧，虽然做不到分析整个调用链路上的耗时情况，但是我们可以在我们希望记录耗时的方法上加上对应的注解，来记录对应的耗时。</li></ul><h2 id="代码实现">代码实现</h2><ul><li>那现在我们来从头编写一个TakeTimeAspect类，该类通过AOP的方式来监控方法的执行时间，并且记录相关的日志信息。首先导入AOP的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>代码实现  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TakeTimeAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ThreadLocal变量用于存储开始时间和结束时间</span></span><br><span class="line">    ThreadLocal&lt;Long&gt; startTime = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    ThreadLocal&lt;Long&gt; endTime = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个切入点，匹配带有@TakeTimeLog注解的方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.aimc.paperreduction.common.annotation.TakeTimeLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TakeTime</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置增强方法，在方法执行前记录开始时间</span></span><br><span class="line">    <span class="meta">@Before(&quot;TakeTime()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 获得注解</span></span><br><span class="line">        <span class="type">TakeTimeLog</span> <span class="variable">timeLog</span> <span class="operator">=</span> getAnnotationLog(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (timeLog == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        startTime.set(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回后增强方法，在方法执行后记录结束时间和执行时间，并记录日志</span></span><br><span class="line">    <span class="meta">@AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;TakeTime()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(JoinPoint joinPoint, Object ret)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        String[] names = ((CodeSignature) joinPoint.getSignature()).getParameterNames();</span><br><span class="line">        <span class="keyword">if</span> (names.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(joinPoint.getArgs()[i] <span class="keyword">instanceof</span> HttpServletRequest)) &#123;</span><br><span class="line">                    resultMap.put(names[i], joinPoint.getArgs()[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理完请求后，返回内容</span></span><br><span class="line">        log.info(<span class="string">&quot;Return:&quot;</span> + JSON.toJSONString(ret));</span><br><span class="line">        endTime.set(System.currentTimeMillis());</span><br><span class="line">        log.info(<span class="string">&quot;Execution Time:&quot;</span> + (endTime.get() - startTime.get()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于获取方法上的注解</span></span><br><span class="line">    <span class="keyword">private</span> TakeTimeLog <span class="title function_">getAnnotationLog</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) signature;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.getAnnotation(TakeTimeLog.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ThreadLocal&lt;Long&gt; startTime</code> 和 <code>ThreadLocal&lt;Long&gt; endTime</code>：这两个是ThreadLocal变量，用于存储方法执行的开始时间和结束时间，用于计算方法的执行时间。ThreadLocal允许存储每个线程特定的数据，确保线程安全性。</li><li>切点表达式：<code>@Pointcut(&quot;@annotation(com.aimc.paperreduction.common.annotation.TakeTimeLog)&quot;)</code>，匹配带有@TakeTimeLog注解的方法。</li><li>增强方法<ol><li><code>@Before(&quot;TakeTime()&quot;)</code>：在匹配TakeTime切入点的方法之前执行。它捕获方法执行开始的时间，当然这里也可以获取更多的信息，例如方法参数之类的信息都可以拿到，这里我们根据自身项目的需求来编写。</li><li>@<code>AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;TakeTime()&quot;)</code>：这是一个返回后增强方法。它捕获方法的结束时间，记录返回值，并计算并记录执行时间。</li></ol></li><li><code>getAnnotationLog</code>：这是一个私有方法，用于从目标方法中获取TakeTimeLog注解（如果存在）。</li></ul></li></ul><h2 id="使用方式">使用方式</h2><ul><li>我们在需要记录耗时的方法上加上此注解即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TakeTimeLog</span></span><br><span class="line"><span class="keyword">public</span> Wrapper&lt;UploadPaperDTO&gt; <span class="title function_">uploadDoc</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  你的代码逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">简单写个小玩意</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SpringBoot" scheme="https://cyborg2077.github.io/tags/SpringBoot/"/>
    
    <category term="性能分析" scheme="https://cyborg2077.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    <category term="AOP" scheme="https://cyborg2077.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Arthas排查SpringBoot的耗时</title>
    <link href="https://cyborg2077.github.io/2023/09/07/ArthasAnalyzing/"/>
    <id>https://cyborg2077.github.io/2023/09/07/ArthasAnalyzing/</id>
    <published>2023-09-07T07:16:34.000Z</published>
    <updated>2023-09-07T07:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述">简述</h2><ul><li>Arthas官网：<a href="https://arthas.aliyun.com/">https://arthas.aliyun.com/</a></li><li>Arthas（Alibaba Java Diagnostic Tool）是一个强大的Java诊断工具，它可以监控和分析运行中的Java应用程序。它采用了字节码注入的方式来实现监控和调试功能。</li></ul><h2 id="底层原理">底层原理</h2><ol><li>字节码注入：Arthas使用字节码注入技术，通过修改目标Java程序的字节码来动态注入监控代码和收集性能信息，这种方式不需要对应用程序进行重新编译或者重启，因为重启之后问题可能不容易复现，因此可以在运行时对其进行诊断和分析。</li><li>Instrumentation API：Arthas使用Java的Instrumentation API来实现字节码注入。这个API运行类加载器会在加载类时，对类的字节码进行修改，Arthas通过这个API来注入自己的监控代码，以便捕获方法执行、性能统计等信息。</li><li>Agent方式：Arthas以Java Agent的形式运行，通过JVM的Agent机制加载到目标应用程序中。Java Agent是一种运行在Java程序之外的Java程序，可以在目标应用运行时被动态地附加到应用程序进程中，并与之交互。</li></ol><h2 id="基本使用">基本使用</h2><ul><li><p>由于执行Arthas程序的用户需要与目标进程具有相同的权限，目前公司的项目都是通过容器启动的，所以我们首先要进入Java服务容器的内部，然后下载Arthas的jar包，然后再启动（Windows环境下直接在CMD窗口运行即可）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure></li><li><p>启动之后就会列出当前所有的Java进程，我们根据自身需求来选择要监控的Java进程</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@ff3c3ed00ac8:/data<span class="comment"># java -jar arthas-boot.jar </span></span><br><span class="line">    [INFO] JAVA_HOME: /usr/local/openjdk-8/jre</span><br><span class="line">    [INFO] arthas-boot version: 3.7.1</span><br><span class="line">    [INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.</span><br><span class="line">    * [1]: 7 /data/PaperReduction.jar</span><br><span class="line">    <span class="comment"># 找到一个Java进程，按下对应的数字键来进行监控</span></span><br><span class="line">    1</span><br><span class="line">    [INFO] arthas home: /root/.arthas/lib/3.7.1/arthas</span><br><span class="line">    [INFO] The target process already listen port 3658, skip attach.</span><br><span class="line">    [INFO] arthas-client connect 127.0.0.1 3658</span><br><span class="line">    ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           </span><br><span class="line">    /  O  \ |  .--. <span class="string">&#x27;&#x27;</span>--.  .--<span class="string">&#x27;|  &#x27;</span>--<span class="string">&#x27;  | /  O  \ &#x27;</span>   .-<span class="string">&#x27;                          </span></span><br><span class="line"><span class="string">    |  .-.  ||  &#x27;</span>--<span class="string">&#x27;.&#x27;</span>   |  |   |  .--.  ||  .-.  |`.  `-.                          </span><br><span class="line">    |  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-<span class="string">&#x27;    |                         </span></span><br><span class="line"><span class="string">    `--&#x27;</span> `--<span class="string">&#x27;`--&#x27;</span> <span class="string">&#x27;--&#x27;</span>   `--<span class="string">&#x27;   `--&#x27;</span>  `--<span class="string">&#x27;`--&#x27;</span> `--<span class="string">&#x27;`-----&#x27;</span>                          </span><br><span class="line">    </span><br><span class="line">    wiki       https://arthas.aliyun.com/doc                                        </span><br><span class="line">    tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  </span><br><span class="line">    version    3.7.1                                                                </span><br><span class="line">    main_class                                                                      </span><br><span class="line">    pid        7                                                                    </span><br><span class="line">    time       2023-09-06 19:15:06        </span><br><span class="line"></span><br><span class="line">[arthas@7]$                                           </span><br></pre></td></tr></table></figure></li><li><p>那么现在的需求是分析从Spring框架接收到HTTP请求，然后分派到对应的Controller方法之间的耗时，这里我们只需要使用Arthas的一个小功能trace，它可以动态地计算方法调用路径和耗时。</p><ol><li>trace方法内部调用路径，并输出方法路径上每个节点的耗时。</li><li>trace命令能主动搜索class-pattern/method-pattern，对应的方法带哦用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</li></ol></li><li><p>再了解两个小概念</p><ol><li>DispatcherServlet（org.springframework.web.servlet.DispatcherServlet）：DispatcherServlet 是Spring MVC的核心，它负责接收HTTP请求并将请求分派给相应的Controller。我们可以从DispatcherServlet的请求处理方法入手，分析请求的调用链和处理时间。</li><li>HandlerMapping（org.springframework.web.servlet.HandlerMapping）：HandlerMapping 负责将请求映射到具体的Controller方法。您可以分析不同的HandlerMapping实现，以了解请求到Controller方法的映射过程。</li></ol></li><li><p>那我们现在执行 <code>trace org.springframework.web.servlet.DispatcherServlet *</code> 来分析一下调用链上都经过了什么</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">`---ts=2023-09-07 10:27:40;thread_name=http-nio-80-exec-5;<span class="built_in">id</span>=33;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[5.59488ms] org.springframework.web.servlet.DispatcherServlet:doService()</span><br><span class="line">        +---[0.63% 0.035364ms ] org.springframework.web.servlet.DispatcherServlet:logRequest() <span class="comment">#926</span></span><br><span class="line">        |   `---[59.32% 0.020979ms ] org.springframework.web.servlet.DispatcherServlet:logRequest()</span><br><span class="line">        |       `---[28.81% 0.006045ms ] org.springframework.core.log.LogFormatUtils:traceDebug() <span class="comment">#980</span></span><br><span class="line">        +---[0.12% 0.006831ms ] org.springframework.web.util.WebUtils:isIncludeRequest() <span class="comment">#931</span></span><br><span class="line">        +---[0.10% 0.005813ms ] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() <span class="comment">#943</span></span><br><span class="line">        +---[0.07% 0.004058ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#943</span></span><br><span class="line">        +---[0.06% 0.003624ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#944</span></span><br><span class="line">        +---[0.06% 0.003435ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#945</span></span><br><span class="line">        +---[0.61% 0.034354ms ] org.springframework.web.servlet.DispatcherServlet:getThemeSource() <span class="comment">#946</span></span><br><span class="line">        |   `---[61.47% 0.021117ms ] org.springframework.web.servlet.DispatcherServlet:getThemeSource()</span><br><span class="line">        |       `---[46.43% min=0.0046ms,max=0.005205ms,total=0.009805ms,count=2] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() <span class="comment">#806</span></span><br><span class="line">        +---[0.06% 0.003434ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#946</span></span><br><span class="line">        +---[0.22% 0.012272ms ] org.springframework.web.servlet.FlashMapManager:retrieveAndUpdate() <span class="comment">#949</span></span><br><span class="line">        +---[0.16% 0.008744ms ] org.springframework.web.servlet.FlashMap:&lt;init&gt;() <span class="comment">#953</span></span><br><span class="line">        +---[0.12% 0.006509ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#953</span></span><br><span class="line">        +---[0.09% 0.004867ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#954</span></span><br><span class="line">        +---[0.07% 0.003641ms ] javax.servlet.http.HttpServletRequest:getAttribute() <span class="comment">#959</span></span><br><span class="line">        +---[2.51% 0.140331ms ] org.springframework.web.util.ServletRequestPathUtils:parseAndCache() <span class="comment">#960</span></span><br><span class="line">        +---[92.44% 5.172017ms ] org.springframework.web.servlet.DispatcherServlet:doDispatch() <span class="comment">#964</span></span><br><span class="line">        |   `---[99.30% 5.136033ms ] org.springframework.web.servlet.DispatcherServlet:doDispatch()</span><br><span class="line">        |       +---[0.13% 0.006484ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#1036</span></span><br><span class="line">        |       +---[0.72% 0.036845ms ] org.springframework.web.servlet.DispatcherServlet:checkMultipart() <span class="comment">#1043</span></span><br><span class="line">        |       |   `---[55.87% 0.020586ms ] org.springframework.web.servlet.DispatcherServlet:checkMultipart()</span><br><span class="line">        |       |       `---[55.39% 0.011402ms ] org.springframework.web.multipart.MultipartResolver:isMultipart() <span class="comment">#1197</span></span><br><span class="line">        |       +---[5.09% 0.261359ms ] org.springframework.web.servlet.DispatcherServlet:getHandler() <span class="comment">#1047</span></span><br><span class="line">        |       |   `---[94.84% 0.247868ms ] org.springframework.web.servlet.DispatcherServlet:getHandler()</span><br><span class="line">        |       |       `---[94.99% 0.235439ms ] org.springframework.web.servlet.HandlerMapping:getHandler() <span class="comment">#1265</span></span><br><span class="line">        |       +---[0.11% 0.005579ms ] org.springframework.web.servlet.HandlerExecutionChain:getHandler() <span class="comment">#1054</span></span><br><span class="line">        |       +---[0.62% 0.031705ms ] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter() <span class="comment">#1054</span></span><br><span class="line">        |       |   `---[56.86% 0.018028ms ] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter()</span><br><span class="line">        |       |       `---[32.95% 0.005941ms ] org.springframework.web.servlet.HandlerAdapter:supports() <span class="comment">#1301</span></span><br><span class="line">        |       +---[0.06% 0.003195ms ] javax.servlet.http.HttpServletRequest:getMethod() <span class="comment">#1057</span></span><br><span class="line">        |       +---[0.11% 0.00577ms ] org.springframework.http.HttpMethod:matches() <span class="comment">#1058</span></span><br><span class="line">        |       +---[0.05% 0.00277ms ] org.springframework.http.HttpMethod:matches() <span class="comment">#1059</span></span><br><span class="line">        |       +---[40.64% 2.08729ms ] org.springframework.web.servlet.HandlerExecutionChain:applyPreHandle() <span class="comment">#1066</span></span><br><span class="line">        |       +---[0.08% 0.004206ms ] org.springframework.web.servlet.HandlerExecutionChain:getHandler() <span class="comment">#1071</span></span><br><span class="line">        |       +---[47.64% 2.44697ms ] org.springframework.web.servlet.HandlerAdapter:handle() <span class="comment">#1071</span></span><br><span class="line">        |       +---[0.11% 0.00578ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1073</span></span><br><span class="line">        |       +---[0.77% 0.039313ms ] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName() <span class="comment">#1077</span></span><br><span class="line">        |       |   `---[34.47% 0.01355ms ] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName()</span><br><span class="line">        |       +---[0.16% 0.008038ms ] org.springframework.web.servlet.HandlerExecutionChain:applyPostHandle() <span class="comment">#1078</span></span><br><span class="line">        |       +---[1.41% 0.072602ms ] org.springframework.web.servlet.DispatcherServlet:processDispatchResult() <span class="comment">#1088</span></span><br><span class="line">        |       |   `---[66.42% 0.04822ms ] org.springframework.web.servlet.DispatcherServlet:processDispatchResult()</span><br><span class="line">        |       |       +---[6.78% 0.003268ms ] org.apache.commons.logging.Log:isTraceEnabled() <span class="comment">#1155</span></span><br><span class="line">        |       |       +---[10.20% 0.004917ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#1160</span></span><br><span class="line">        |       |       +---[5.81% 0.0028ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1160</span></span><br><span class="line">        |       |       `---[16.01% 0.007718ms ] org.springframework.web.servlet.HandlerExecutionChain:triggerAfterCompletion() <span class="comment">#1167</span></span><br><span class="line">        |       `---[0.11% 0.00572ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1098</span></span><br><span class="line">        +---[0.09% 0.004919ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#967</span></span><br><span class="line">        +---[0.05% 0.002756ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#967</span></span><br><span class="line">        `---[0.20% 0.011002ms ] org.springframework.web.util.ServletRequestPathUtils:setParsedRequestPath() <span class="comment">#974</span></span><br></pre></td></tr></table></figure><ol><li><code>doService()</code> 方法：首先，请求进入 <code>DispatcherServlet</code> 的 <code>doService()</code> 方法。这是请求处理的入口点。在这个方法中，会进行以下一些重要的操作：<ol><li><code>logRequest()</code> 方法：这个方法用于记录请求的信息，例如请求的HTTP方法、URI等。它通常用于调试和日志记录目的。</li><li><code>isIncludeRequest()</code> 方法：检查当前请求是否是包含（include）请求。包含请求是指一个Servlet可以包含另一个Servlet的响应内容。</li><li><code>getWebApplicationContext()</code> 方法：获取Spring的Web应用程序上下文，该上下文包含了Spring应用程序中的各种bean定义和配置。</li><li><code>setAttribute()</code> 方法：在 <code>HttpServletRequest</code> 对象中设置一些属性，以便后续的处理可以访问这些属性。这通常用于在请求处理过程中传递数据。</li><li><code>getThemeSource()</code> 方法：获取主题资源，主题通常用于定制应用程序的外观。</li></ol></li><li><code>doDispatch()</code> 方法：在 <code>doService()</code> 中，<code>DispatcherServlet</code> 调用 <code>doDispatch()</code> 方法，这是实际的请求分发和处理的关键方法。在这个方法中，会进行以下操作：<ol><li><code>getAsyncManager()</code> 方法：获取异步请求管理器，用于处理异步请求。</li><li><code>checkMultipart()</code> 方法：检查请求是否包含多部分（multipart）内容，通常用于文件上传。</li><li><code>getHandler()</code> 方法：获取用于处理请求的处理器（Handler）。这个方法是决定如何处理请求的关键点。<ul><li><code>getHandlerMapping()</code> 方法：获取用于查找处理器的Handler Mapping。Handler Mapping 根据请求的URL或其他条件，将请求映射到适当的处理器方法。</li><li>一旦找到了合适的处理器，它会被返回，以便后续的请求处理。</li></ul></li></ol></li></ol><ul><li>下面是我上传了一个文件，可以看到耗时绝大部分都是在checkMultipart()方法上，等下次上传文件异常缓慢的时候，可以结合Nginx日志中的响应耗时和这里的耗时来分析到底是哪个步骤慢</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">`---ts=2023-09-07 11:00:24;thread_name=http-nio-80-exec-7;<span class="built_in">id</span>=35;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[725.449628ms] org.springframework.web.servlet.DispatcherServlet:doService()</span><br><span class="line">        +---[0.17% 1.209254ms ] org.springframework.web.servlet.DispatcherServlet:logRequest() <span class="comment">#926</span></span><br><span class="line">        |   `---[97.75% 1.182007ms ] org.springframework.web.servlet.DispatcherServlet:logRequest()</span><br><span class="line">        |       `---[6.82% 0.080573ms ] org.springframework.core.log.LogFormatUtils:traceDebug() <span class="comment">#980</span></span><br><span class="line">        +---[0.00% 0.014693ms ] org.springframework.web.util.WebUtils:isIncludeRequest() <span class="comment">#931</span></span><br><span class="line">        +---[0.00% 0.012721ms ] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() <span class="comment">#943</span></span><br><span class="line">        +---[0.00% 0.016321ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#943</span></span><br><span class="line">        +---[0.00% 0.003773ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#944</span></span><br><span class="line">        +---[0.00% 0.005059ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#945</span></span><br><span class="line">        +---[0.01% 0.06607ms ] org.springframework.web.servlet.DispatcherServlet:getThemeSource() <span class="comment">#946</span></span><br><span class="line">        |   `---[62.24% 0.041121ms ] org.springframework.web.servlet.DispatcherServlet:getThemeSource()</span><br><span class="line">        |       `---[28.35% min=0.004431ms,max=0.007225ms,total=0.011656ms,count=2] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() <span class="comment">#806</span></span><br><span class="line">        +---[0.00% 0.005496ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#946</span></span><br><span class="line">        +---[0.00% 0.021549ms ] org.springframework.web.servlet.FlashMapManager:retrieveAndUpdate() <span class="comment">#949</span></span><br><span class="line">        +---[0.00% 0.018169ms ] org.springframework.web.servlet.FlashMap:&lt;init&gt;() <span class="comment">#953</span></span><br><span class="line">        +---[0.00% 0.004453ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#953</span></span><br><span class="line">        +---[0.00% 0.007301ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#954</span></span><br><span class="line">        +---[0.00% 0.010647ms ] javax.servlet.http.HttpServletRequest:getAttribute() <span class="comment">#959</span></span><br><span class="line">        +---[0.09% 0.633634ms ] org.springframework.web.util.ServletRequestPathUtils:parseAndCache() <span class="comment">#960</span></span><br><span class="line">        +---[99.66% 722.964056ms ] org.springframework.web.servlet.DispatcherServlet:doDispatch() <span class="comment">#964</span></span><br><span class="line">        |   `---[100.00% 722.939122ms ] org.springframework.web.servlet.DispatcherServlet:doDispatch()</span><br><span class="line">        |       +---[0.00% 0.011085ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#1036</span></span><br><span class="line">        |       +---[4.74% 34.255344ms ] org.springframework.web.servlet.DispatcherServlet:checkMultipart() <span class="comment">#1043</span></span><br><span class="line">        |       |   `---[99.94% 34.235142ms ] org.springframework.web.servlet.DispatcherServlet:checkMultipart()</span><br><span class="line">        |       |       +---[0.05% 0.017859ms ] org.springframework.web.multipart.MultipartResolver:isMultipart() <span class="comment">#1197</span></span><br><span class="line">        |       |       +---[0.03% 0.010256ms ] org.springframework.web.util.WebUtils:getNativeRequest() <span class="comment">#1198</span></span><br><span class="line">        |       |       +---[0.13% 0.046108ms ] org.springframework.web.servlet.DispatcherServlet:hasMultipartException() <span class="comment">#1203</span></span><br><span class="line">        |       |       |   `---[65.16% 0.030045ms ] org.springframework.web.servlet.DispatcherServlet:hasMultipartException()</span><br><span class="line">        |       |       |       `---[18.36% 0.005515ms ] javax.servlet.http.HttpServletRequest:getAttribute() <span class="comment">#1230</span></span><br><span class="line">        |       |       `---[99.65% 34.116944ms ] org.springframework.web.multipart.MultipartResolver:resolveMultipart() <span class="comment">#1209</span></span><br><span class="line">        |       +---[0.12% 0.836273ms ] org.springframework.web.servlet.DispatcherServlet:getHandler() <span class="comment">#1047</span></span><br><span class="line">        |       |   `---[96.10% 0.803643ms ] org.springframework.web.servlet.DispatcherServlet:getHandler()</span><br><span class="line">        |       |       `---[88.91% 0.714557ms ] org.springframework.web.servlet.HandlerMapping:getHandler() <span class="comment">#1265</span></span><br><span class="line">        |       +---[0.00% 0.011929ms ] org.springframework.web.servlet.HandlerExecutionChain:getHandler() <span class="comment">#1054</span></span><br><span class="line">        |       +---[0.01% 0.05063ms ] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter() <span class="comment">#1054</span></span><br><span class="line">        |       |   `---[63.99% 0.032397ms ] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter()</span><br><span class="line">        |       |       `---[37.22% 0.012058ms ] org.springframework.web.servlet.HandlerAdapter:supports() <span class="comment">#1301</span></span><br><span class="line">        |       +---[0.00% 0.008964ms ] javax.servlet.http.HttpServletRequest:getMethod() <span class="comment">#1057</span></span><br><span class="line">        |       +---[0.00% 0.017054ms ] org.springframework.http.HttpMethod:matches() <span class="comment">#1058</span></span><br><span class="line">        |       +---[0.00% 0.003344ms ] org.springframework.http.HttpMethod:matches() <span class="comment">#1059</span></span><br><span class="line">        |       +---[0.63% 4.578389ms ] org.springframework.web.servlet.HandlerExecutionChain:applyPreHandle() <span class="comment">#1066</span></span><br><span class="line">        |       +---[0.00% 0.005151ms ] org.springframework.web.servlet.HandlerExecutionChain:getHandler() <span class="comment">#1071</span></span><br><span class="line">        |       +---[94.22% 681.164697ms ] org.springframework.web.servlet.HandlerAdapter:handle() <span class="comment">#1071</span></span><br><span class="line">        |       +---[0.00% 0.022867ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1073</span></span><br><span class="line">        |       +---[0.01% 0.046345ms ] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName() <span class="comment">#1077</span></span><br><span class="line">        |       |   `---[19.75% 0.009155ms ] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName()</span><br><span class="line">        |       +---[0.00% 0.023564ms ] org.springframework.web.servlet.HandlerExecutionChain:applyPostHandle() <span class="comment">#1078</span></span><br><span class="line">        |       +---[0.02% 0.122935ms ] org.springframework.web.servlet.DispatcherServlet:processDispatchResult() <span class="comment">#1088</span></span><br><span class="line">        |       |   `---[76.98% 0.09464ms ] org.springframework.web.servlet.DispatcherServlet:processDispatchResult()</span><br><span class="line">        |       |       +---[24.65% 0.023328ms ] org.apache.commons.logging.Log:isTraceEnabled() <span class="comment">#1155</span></span><br><span class="line">        |       |       +---[16.65% 0.015762ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#1160</span></span><br><span class="line">        |       |       +---[6.36% 0.006018ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1160</span></span><br><span class="line">        |       |       `---[14.57% 0.013792ms ] org.springframework.web.servlet.HandlerExecutionChain:triggerAfterCompletion() <span class="comment">#1167</span></span><br><span class="line">        |       +---[0.00% 0.004283ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1098</span></span><br><span class="line">        |       `---[0.23% 1.628707ms ] org.springframework.web.servlet.DispatcherServlet:cleanupMultipart() <span class="comment">#1107</span></span><br><span class="line">        |           `---[98.68% 1.607223ms ] org.springframework.web.servlet.DispatcherServlet:cleanupMultipart()</span><br><span class="line">        |               +---[0.50% 0.008005ms ] org.springframework.web.util.WebUtils:getNativeRequest() <span class="comment">#1248</span></span><br><span class="line">        |               `---[97.93% 1.574022ms ] org.springframework.web.multipart.MultipartResolver:cleanupMultipart() <span class="comment">#1250</span></span><br><span class="line">        +---[0.00% 0.009553ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#967</span></span><br><span class="line">        +---[0.00% 0.006599ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#967</span></span><br><span class="line">        `---[0.01% 0.10787ms ] org.springframework.web.util.ServletRequestPathUtils:setParsedRequestPath() <span class="comment">#974</span></span><br></pre></td></tr></table></figure><ul><li>分析特定方法的耗时，我们只需要明确指定一下类的全限定名以及方法名即可，例如 <code>trace com.aimc.paperreduction.web.controller.CommonController uploadPaper</code>，这里是分析CommonController包下的<code>uploadPaper</code>方法，正好之前加了阿里云的文本检测，可以看一下对性能的影响</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7]$ trace com.aimc.paperreduction.web.controller.CommonController uploadPaper</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 2) cost <span class="keyword">in</span> 292 ms, listenerId: 20</span><br><span class="line">`---ts=2023-09-07 11:45:12;thread_name=http-nio-80-exec-5;<span class="built_in">id</span>=33;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[931.752981ms] com.aimc.paperreduction.web.controller.CommonController$$EnhancerBySpringCGLIB$<span class="variable">$864d4ba2</span>:uploadPaper()</span><br><span class="line">        `---[99.94% 931.15232ms ] org.springframework.cglib.proxy.MethodInterceptor:intercept()</span><br><span class="line">            `---[97.68% 909.537879ms ] com.aimc.paperreduction.web.controller.CommonController:uploadPaper()</span><br><span class="line">                +---[0.02% 0.160456ms ] org.slf4j.Logger:info() <span class="comment">#221</span></span><br><span class="line">                +---[0.00% 0.043686ms ] org.springframework.web.multipart.MultipartFile:isEmpty() <span class="comment">#224</span></span><br><span class="line">                +---[99.91% 908.687093ms ] com.aimc.paperreduction.service.OrderService:uploadPaper() <span class="comment">#227</span></span><br><span class="line">                +---[0.00% 0.021838ms ] com.aimc.paperreduction.common.wrapper.Wrapper:getCode() <span class="comment">#228</span></span><br><span class="line">                +---[0.04% 0.325031ms ] org.slf4j.Logger:info() <span class="comment">#232</span></span><br><span class="line">                +---[0.00% 0.017715ms ] com.aimc.paperreduction.common.wrapper.Wrapper:getResult() <span class="comment">#233</span></span><br><span class="line">                `---[0.00% 0.028309ms ] com.aimc.paperreduction.web.controller.CommonController:success() <span class="comment">#233</span></span><br><span class="line"></span><br><span class="line">[arthas@7]$ trace  com.aimc.paperreduction.service.OrderService uploadPaper</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 4 , method count: 3) cost <span class="keyword">in</span> 659 ms, listenerId: 21</span><br><span class="line">`---ts=2023-09-07 11:46:32;thread_name=http-nio-80-exec-9;<span class="built_in">id</span>=37;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[871.142915ms] com.aimc.paperreduction.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$<span class="variable">$a91e94c</span>:uploadPaper()</span><br><span class="line">        `---[99.98% 871.000878ms ] org.springframework.cglib.proxy.MethodInterceptor:intercept()</span><br><span class="line">            `---[99.99% 870.908438ms ] com.aimc.paperreduction.service.impl.OrderServiceImpl:uploadPaper()</span><br><span class="line">                +---[0.01% 0.049453ms ] com.aimc.paperreduction.common.wrapper.Wrapper:&lt;init&gt;() <span class="comment">#1243</span></span><br><span class="line">                +---[0.00% 0.010567ms ] org.springframework.web.multipart.MultipartFile:getOriginalFilename() <span class="comment">#1246</span></span><br><span class="line">                +---[0.01% 0.064652ms ] com.aimc.paperreduction.utils.StringUtil:extractPathExt() <span class="comment">#1246</span></span><br><span class="line">                +---[0.01% 0.099063ms ] com.aimc.paperreduction.utils.PathUtil:getRealDiskPath() <span class="comment">#1263</span></span><br><span class="line">                +---[0.81% 7.026517ms ] com.aimc.paperreduction.service.impl.OrderServiceImpl:transferToDisk() <span class="comment">#1264</span></span><br><span class="line">                +---[6.17% 53.694128ms ] com.aspose.words.Document:&lt;init&gt;() <span class="comment">#1272</span></span><br><span class="line">                +---[41.01% 357.150979ms ] com.aspose.words.Document:save() <span class="comment">#1274</span></span><br><span class="line">                +---[0.22% 1.918176ms ] com.aspose.words.Document:cleanup() <span class="comment">#1277</span></span><br><span class="line">                +---[0.00% 0.010126ms ] com.aimc.paperreduction.model.entity.PaperInfo:&lt;init&gt;() <span class="comment">#1284</span></span><br><span class="line">                +---[14.27% 124.293242ms ] com.aimc.paperreduction.utils.CommonUtil:countWords() <span class="comment">#1286</span></span><br><span class="line">                +---[34.64% 301.714162ms ] com.aimc.paperreduction.utils.CommonUtil:isGreenDoc() <span class="comment">#1287</span></span><br><span class="line">                +---[0.01% 0.05563ms ] org.apache.commons.lang3.StringUtils:isNotBlank() <span class="comment">#1288</span></span><br></pre></td></tr></table></figure><ul><li>从上面的结果中，我们看到，阿里的文本检测占了三分之一的时长，我们可以继续使用trace命令来看为什么耗时这么久</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 233 ms, listenerId: 22</span><br><span class="line">`---ts=2023-09-07 11:49:51;thread_name=http-nio-80-exec-10;<span class="built_in">id</span>=38;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[294.261119ms] com.aimc.paperreduction.utils.CommonUtil:isGreenDoc()</span><br><span class="line">        +---[25.88% 76.155345ms ] org.apache.poi.xwpf.usermodel.XWPFDocument:&lt;init&gt;() <span class="comment">#1700</span></span><br><span class="line">        +---[0.00% 0.006894ms ] org.apache.poi.xwpf.usermodel.XWPFDocument:getParagraphs() <span class="comment">#1701</span></span><br><span class="line">        +---[0.44% min=0.001325ms,max=0.124972ms,total=1.306473ms,count=39] org.apache.poi.xwpf.usermodel.XWPFParagraph:getText() <span class="comment">#1702</span></span><br><span class="line">        +---[73.52% 216.339053ms ] com.aimc.paperreduction.utils.TextReview:textReview() <span class="comment">#1709</span></span><br><span class="line">        +---[0.00% 0.012255ms ] com.aimc.paperreduction.utils.TextReview:textReview() <span class="comment">#1715</span></span><br><span class="line">        `---[0.02% 0.048882ms ] org.apache.poi.xwpf.usermodel.XWPFDocument:close() <span class="comment">#1717</span></span><br></pre></td></tr></table></figure><ul><li>可以看到主要是TextReview耗时较长，同时XWPFDocument对象的创建也很吃性能，代码中要避免频繁创建销毁此对象，继续看TextReview</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7]$ trace com.aimc.paperreduction.utils.TextReview textReview</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 202 ms, listenerId: 23</span><br><span class="line">`---ts=2023-09-07 11:53:18;thread_name=http-nio-80-exec-1;<span class="built_in">id</span>=2f;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[209.523489ms] com.aimc.paperreduction.utils.TextReview:textReview()</span><br><span class="line">        +---[0.03% 0.0623ms ] org.apache.commons.lang3.StringUtils:isBlank() <span class="comment">#17</span></span><br><span class="line">        +---[0.01% 0.01229ms ] com.aliyun.teaopenapi.models.Config:&lt;init&gt;() <span class="comment">#21</span></span><br><span class="line">        +---[0.01% 0.011889ms ] com.aliyun.teaopenapi.models.Config:setAccessKeyId() <span class="comment">#22</span></span><br><span class="line">        +---[0.00% 0.007757ms ] com.aliyun.teaopenapi.models.Config:setAccessKeySecret() <span class="comment">#23</span></span><br><span class="line">        +---[0.00% 0.007802ms ] com.aliyun.teaopenapi.models.Config:setEndpoint() <span class="comment">#25</span></span><br><span class="line">        +---[0.00% 0.006391ms ] com.aliyun.teaopenapi.models.Config:setConnectTimeout() <span class="comment">#26</span></span><br><span class="line">        +---[0.00% 0.006966ms ] com.aliyun.teaopenapi.models.Config:setReadTimeout() <span class="comment">#27</span></span><br><span class="line">        +---[0.07% 0.154858ms ] com.aliyun.green20220302.Client:&lt;init&gt;() <span class="comment">#28</span></span><br><span class="line">        +---[0.01% 0.011248ms ] com.alibaba.fastjson.JSONObject:&lt;init&gt;() <span class="comment">#30</span></span><br><span class="line">        +---[0.01% 0.012672ms ] com.alibaba.fastjson.JSONObject:put() <span class="comment">#31</span></span><br><span class="line">        +---[0.01% 0.01861ms ] com.aliyun.green20220302.models.TextModerationRequest:&lt;init&gt;() <span class="comment">#33</span></span><br><span class="line">        +---[0.01% 0.012414ms ] com.aliyun.green20220302.models.TextModerationRequest:setService() <span class="comment">#34</span></span><br><span class="line">        +---[0.08% 0.160351ms ] com.alibaba.fastjson.JSONObject:toJSONString() <span class="comment">#35</span></span><br><span class="line">        +---[0.00% 0.009442ms ] com.aliyun.green20220302.models.TextModerationRequest:setServiceParameters() <span class="comment">#35</span></span><br><span class="line">        +---[99.33% 208.114925ms ] com.aliyun.green20220302.Client:textModeration() <span class="comment">#36</span></span><br><span class="line">        +---[0.01% 0.028103ms ] com.aliyun.green20220302.models.TextModerationResponse:getBody() <span class="comment">#37</span></span><br><span class="line">        +---[0.01% 0.013397ms ] com.aliyun.green20220302.models.TextModerationResponseBody:getCode() <span class="comment">#38</span></span><br><span class="line">        +---[0.01% 0.018539ms ] com.aliyun.green20220302.models.TextModerationResponseBody:getData() <span class="comment">#40</span></span><br><span class="line">        `---[0.02% 0.031569ms ] com.aliyun.green20220302.models.TextModerationResponseBody<span class="variable">$TextModerationResponseBodyData</span>:getLabels() <span class="comment">#41</span></span><br></pre></td></tr></table></figure><ul><li>定位到代码中</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextModerationResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.textModeration(textModerationRequest);</span><br></pre></td></tr></table></figure><ul><li>这是一个同步调用，会等待服务器返回结果，等待期间会阻塞，如果服务端处理时间较长，这个代码会导致程序在这里一直阻塞。优化方案就是把这里改成了异步处理</li><li>其实解决很简单，关键在于怎么定位并找到解决问题的方法，特意写了篇文章来记录一下</li></ul></li></ul>]]></content>
    
    
    <summary type="html">之前闲的时候，让我分析一下耗时的问题，然后就找到了Arthas</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SpringBoot" scheme="https://cyborg2077.github.io/tags/SpringBoot/"/>
    
    <category term="Arthas" scheme="https://cyborg2077.github.io/tags/Arthas/"/>
    
    <category term="性能分析" scheme="https://cyborg2077.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>注解封装公平读写锁</title>
    <link href="https://cyborg2077.github.io/2023/09/02/FairRWLock/"/>
    <id>https://cyborg2077.github.io/2023/09/02/FairRWLock/</id>
    <published>2023-09-02T10:10:01.000Z</published>
    <updated>2023-10-01T13:43:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求">需求</h2><ul><li>项目里有个场景，读的并发很大，但仅仅涉及到很少的写操作。那么此时采用读写锁就是个不错的选择，但是默认的读写锁是非公平锁，如果读并发很大，写请求到达时可能抢不到锁，所以此时需要使用公平读写锁，为了提升复用性，采取注解的形式进行封装。</li><li>如果一个class的object需要这个能力，加入注解<code>@ReadWriteResource</code></li><li>具体的函数，如果加<code>@ReadOnlyOperator</code>注解，那么表明这是一个读任务，可以并发执行；</li><li>如果加<code>@WriteOperator</code>，那么表明这是一个写任务，和读任务、写任务互斥执行；</li></ul><div class="note info no-icon flat"><ul><li>需要注意的是，这里需要控制锁粒度为对象级别的锁。</li></ul></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码如下</span></span><br><span class="line"><span class="meta">@ReadWriteResource</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ManagedResource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOnlyOperator</span></span><br><span class="line">    String <span class="title function_">getResource</span><span class="params">(<span class="type">int</span> key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOnlyOperator</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getName</span><span class="params">(<span class="type">int</span> key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WriteOperator</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateResource</span><span class="params">(<span class="type">int</span> key, String resource)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体实现">具体实现</h2><ul><li><p>采用注解+动态代理的方式来实现，思路就是根据<code>@ReadWriteResource</code>判断该对象是否需要动态代理，然后拦截对象中的方法，在方法执行前后加锁释放。</p><ol><li>首先创建三个注解</li></ol>  <div class="tabs" id="注解封装公平读写锁"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注解封装公平读写锁-1">ReadWriteResource</button></li><li class="tab"><button type="button" data-href="#注解封装公平读写锁-2">ReadOnlyOperator</button></li><li class="tab"><button type="button" data-href="#注解封装公平读写锁-3">WriteOperator</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注解封装公平读写锁-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ReadWriteResource &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注解封装公平读写锁-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ReadOnlyOperator &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注解封装公平读写锁-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WriteOperator &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ol start="2"><li>然后编写一个代理工厂类，用于创建代理对象，首先判断对象的Class是否有<code>@ReadWriteResource</code>注解，以此判断是否要为该对象创建代理对象</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteResourceProxyFactory</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">createProxy</span><span class="params">(T target)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line">        <span class="comment">// 判断该类是否有ReadWriteResource注解</span></span><br><span class="line">        <span class="type">ReadWriteResource</span> <span class="variable">annotation</span> <span class="operator">=</span> clazz.getAnnotation(ReadWriteResource.class);</span><br><span class="line">        <span class="comment">// 如果有注解，则创建代理对象</span></span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里并不需要将target对象传入，因为拦截器拦截的是目标对象的方法，而不是目标对象本身</span></span><br><span class="line">            <span class="type">ReadWriteResourceInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadWriteResourceInterceptor</span>();</span><br><span class="line">            <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">            enhancer.setSuperclass(clazz);</span><br><span class="line">            enhancer.setCallback(interceptor);</span><br><span class="line">            <span class="keyword">return</span> (T) enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有注解，直接返回原对象</span></span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>构造函数先为对象初始化读写锁，拦截逻辑中判断方法上是否存在<code>@ReadOnlyOperator</code>或<code>WriteOperator</code>注解，来确定是读操作还是写操作，然后加上对应的锁。</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteResourceInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock readLock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock writeLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadWriteResourceInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ReentrantReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.readLock = readWriteLock.readLock();</span><br><span class="line">        <span class="built_in">this</span>.writeLock = readWriteLock.writeLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">ReadOnlyOperator</span> <span class="variable">readOnlyOperatorAnnotation</span> <span class="operator">=</span> method.getAnnotation(ReadOnlyOperator.class);</span><br><span class="line">        <span class="type">WriteOperator</span> <span class="variable">writeOperatorAnnotation</span> <span class="operator">=</span> method.getAnnotation(WriteOperator.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (readOnlyOperatorAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果包含ReadOnlyOperator注解，加读锁</span></span><br><span class="line">            readLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行原方法</span></span><br><span class="line">                <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放读锁</span></span><br><span class="line">                readLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (writeOperatorAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果包含WriteOperator注解，加写锁</span></span><br><span class="line">            writeLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行原方法</span></span><br><span class="line">                <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放写锁</span></span><br><span class="line">                writeLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没加注解的普通方法，返回直接调用原方法</span></span><br><span class="line">            <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>基本使用，伪代码如下，测试的时候可以在日志中打印出读写锁地址</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReadWriteResourceProxyFactory&lt;ManagedResource&gt; proxyFactory = <span class="keyword">new</span> <span class="title class_">ReadWriteResourceProxyFactory</span>&lt;&gt;();</span><br><span class="line"><span class="type">ManagedResource</span> <span class="variable">proxy</span> <span class="operator">=</span> proxyFactory.createProxy(<span class="keyword">new</span> <span class="title class_">ManagedResource</span>());</span><br><span class="line">proxy.getName();</span><br><span class="line">proxy.updateResource();</span><br></pre></td></tr></table></figure><ul><li>写完了打包上传至maven私服，以后就是封装自己的工具类了</li></ul></li></ul><h2 id="AOP实现">AOP实现</h2><ul><li>之前其实采用的是注解+AOP来封装的，然后写着写着就发现了点问题，这里也来和大家分享一下吧。</li><li>首先注解方面没有变化，不过我没用到<code>@ReadWriteResource</code>注解，因为找切点的时候可以直接根据方法上是否有<code>@ReadOnlyOperator</code>和<code>@WriteOperator</code>来判断。</li><li>AOP的逻辑如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 明天更</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">工作需要造了个小轮子</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="Java" scheme="https://cyborg2077.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
