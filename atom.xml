<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kyle&#39;s Blog</title>
  
  
  <link href="https://cyborg2077.github.io/atom.xml" rel="self"/>
  
  <link href="https://cyborg2077.github.io/"/>
  <updated>2024-02-25T12:34:05.630Z</updated>
  <id>https://cyborg2077.github.io/</id>
  
  <author>
    <name>Kyle Violet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现一个Cache，包括LRU和在X秒后过期的逻辑</title>
    <link href="https://cyborg2077.github.io/2024/02/25/LRUCacheExpire/"/>
    <id>https://cyborg2077.github.io/2024/02/25/LRUCacheExpire/</id>
    <published>2024-02-25T06:56:38.000Z</published>
    <updated>2024-02-25T12:34:05.630Z</updated>
    
    <content type="html"><![CDATA[<h1>LRU（Least Recently Used）</h1><ul><li>最近最少使用，它的设计原则借鉴了<code>时间局部性原理</code>，该算法认为如果数据最近被访问过，那么将来被访问的几率也更高，反之亦然。其原理是将数据按照其被访问的时间形成一个有序序列，最久未被使用的数据应该最早被淘汰掉，即当缓存空间被占满时，缓存内最长时间未被使用的数据将被淘汰掉。</li></ul><h1>大致思路</h1><ul><li>可以简单的维护一个双向链表来实现，每当数据被访问时，使用头插法插入到队首。空间占满时，先移除末尾元素，随后对新元素使用头插法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        Node pre, next;</span><br><span class="line">        <span class="type">int</span> key, value;</span><br><span class="line">        Node(<span class="type">int</span> key, <span class="type">int</span> value) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    Map&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供初始化缓存的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(size);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 命中缓存，将其移动到队首</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            remove(node);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">            res = node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">// 命中缓存，修改键值，并移动到队首</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 1. 修改键值</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="comment">// 移动到队首</span></span><br><span class="line">            remove(node);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未命中缓存，判断缓存是否已满</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mapSize</span> <span class="operator">=</span> map.size();</span><br><span class="line">            <span class="comment">// 已满则移除队尾元素</span></span><br><span class="line">            <span class="keyword">if</span> (mapSize == size) &#123;</span><br><span class="line">                map.remove(tail.pre.key);</span><br><span class="line">                remove(tail.pre);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 插入新元素</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">            map.put(key, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.pre.next = node.next;</span><br><span class="line">        node.next.pre = node.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertToHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">firstNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">        firstNode.pre = node;</span><br><span class="line">        node.next = firstNode;</span><br><span class="line">        node.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基本的缓存逻辑写好了，那么如何编写过期逻辑呢？这里采用的是惰性删除，如果查询该元素时，发现该元素已经过期，那么移除该元素。当插入元素时，需要遍历所有的key，然后删除，当然这个判断条件也可以是当缓存满了的时候再执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        Node pre, next;</span><br><span class="line">        <span class="type">int</span> key, value;</span><br><span class="line">        <span class="type">long</span> expireTime;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> key, <span class="type">int</span> value, <span class="type">long</span> expireTime) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.expireTime = expireTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    Map&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供初始化缓存的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(size);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 命中缓存，将其移动到队首</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            <span class="keyword">if</span> (node.expireTime &gt; System.currentTimeMillis()) &#123;</span><br><span class="line">                remove(node);</span><br><span class="line">                insertToHead(node);</span><br><span class="line">                res = node.value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前节点过期：&quot;</span> + key);</span><br><span class="line">                remove(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value, <span class="type">long</span> expireTime)</span> &#123;</span><br><span class="line">        <span class="comment">// 删除所有过期的key</span></span><br><span class="line">        map.entrySet().removeIf(entry -&gt; &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> entry.getValue().expireTime &lt;= System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (b) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;移除key：&quot;</span> + entry.getValue().key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 命中缓存，修改键值，并移动到队首</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 1. 修改键值</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="comment">// 移动到队首</span></span><br><span class="line">            remove(node);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未命中缓存，判断缓存是否已满</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mapSize</span> <span class="operator">=</span> map.size();</span><br><span class="line">            <span class="comment">// 已满则移除队尾元素</span></span><br><span class="line">            <span class="keyword">if</span> (mapSize == size) &#123;</span><br><span class="line">                map.remove(tail.pre.key);</span><br><span class="line">                remove(tail.pre);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 插入新元素</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value, expireTime);</span><br><span class="line">            insertToHead(node);</span><br><span class="line">            map.put(key, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.pre.next = node.next;</span><br><span class="line">        node.next.pre = node.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertToHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">firstNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">        firstNode.pre = node;</span><br><span class="line">        node.next = firstNode;</span><br><span class="line">        node.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面简单写个main方法验证一下，查看日志是否符合预期</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LRUCache</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LRUCache</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入操作：get 或 put&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;get&quot;</span>.equalsIgnoreCase(operation)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要获取的键：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                scanner.nextLine(); <span class="comment">// 清除缓冲区中的换行符</span></span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">                <span class="keyword">if</span> (value != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;键 &quot;</span> + key + <span class="string">&quot; 对应的值为：&quot;</span> + value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;键 &quot;</span> + key + <span class="string">&quot; 不存在或已过期&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;put&quot;</span>.equalsIgnoreCase(operation)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要放入的键：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要放入的值：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入过期时间（毫秒）：&quot;</span>);</span><br><span class="line">                <span class="type">long</span> <span class="variable">expireTime</span> <span class="operator">=</span> scanner.nextLong();</span><br><span class="line">                scanner.nextLine();</span><br><span class="line"></span><br><span class="line">                cache.put(key, value, System.currentTimeMillis() + expireTime);</span><br><span class="line">                System.out.println(<span class="string">&quot;键值对已放入缓存&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无效的操作，请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">最近有些懈怠了，刷刷题，这种底层实现还是挺有意思的</summary>
    
    
    
    <category term="踩坑日记" scheme="https://cyborg2077.github.io/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://cyborg2077.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Navicat在结构同步时的注意事项</title>
    <link href="https://cyborg2077.github.io/2024/02/07/NavicatSyncPit/"/>
    <id>https://cyborg2077.github.io/2024/02/07/NavicatSyncPit/</id>
    <published>2024-02-07T03:27:30.000Z</published>
    <updated>2024-02-24T05:54:31.066Z</updated>
    
    <content type="html"><![CDATA[<h1>涉及到列名修改时，不要使用Navicat结构同步工具</h1><ul><li>本地环境的表结构如下</li></ul><table><thead><tr><th>id</th><th>phone</th><th>invite_code</th></tr></thead><tbody><tr><td>1</td><td>123-456-789</td><td>ABC123</td></tr><tr><td>2</td><td>987-654-321</td><td>DEF456</td></tr><tr><td>3</td><td>555-555-555</td><td>GHI789</td></tr></tbody></table><ul><li>生产环境的表结构如下</li></ul><table><thead><tr><th>id</th><th>phone</th><th>user_id</th></tr></thead><tbody><tr><td>1</td><td>123-456-789</td><td>ABC123</td></tr><tr><td>2</td><td>987-654-321</td><td>DEF456</td></tr><tr><td>3</td><td>555-555-555</td><td>GHI789</td></tr></tbody></table><ul><li>若此时使用Navicat提供的结构同步工具，实际上执行的命令会是将原有的列删除，然后再新增，会导致该列的内容完全丢失</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `user_info` <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> `invite_code`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `user_info` <span class="keyword">DROP</span> INDEX `idx_invite_code`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `user_info` <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `user_id` <span class="type">varchar</span>(<span class="number">255</span>) AFTER `phone`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `user_info` <span class="keyword">ADD</span> INDEX `idx_invite_code`(`user_id` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE;</span><br></pre></td></tr></table></figure><ul><li>若仅修改字段名，建议使用RENAME命令</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info </span><br><span class="line">RENAME <span class="keyword">COLUMN</span> invite_code <span class="keyword">TO</span> user_id</span><br></pre></td></tr></table></figure><ul><li>若还涉及到字段定义修改，建议使用CHANGE COLUMN命令</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info</span><br><span class="line">CHANGE <span class="keyword">COLUMN</span> invite_code user_id <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在修改字段名时，Navicat提供的SQL是先删除这列再新增</summary>
    
    
    
    <category term="踩坑日记" scheme="https://cyborg2077.github.io/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://cyborg2077.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LangChain入门指南</title>
    <link href="https://cyborg2077.github.io/2024/01/26/LangChainPrimer/"/>
    <id>https://cyborg2077.github.io/2024/01/26/LangChainPrimer/</id>
    <published>2024-01-26T03:27:30.000Z</published>
    <updated>2024-02-24T05:54:06.954Z</updated>
    
    <content type="html"><![CDATA[<h1>什么是LangChain</h1><ul><li>LangChain是一个强大的框架，旨在帮助开发人员使用语言模型构建端到端的应用程序。它提供了一套工具、组件和接口，可简化创建由大型语言模型 (LLM) 和聊天模型提供支持的应用程序的过程。LangChain 可以轻松管理与语言模型的交互，将多个组件链接在一起，并集成额外的资源，例如 API 和数据库。</li><li>官方文档：<a href="https://python.langchain.com/en/latest/">https://python.langchain.com/en/latest/</a></li></ul><h1>如何使用LangChain</h1><ul><li>要使用 LangChain，开发人员首先要导入必要的组件和工具，例如 LLMs, chat models, agents, chains, 内存功能。这些组件组合起来创建一个可以理解、处理和响应用户输入的应用程序。</li><li>LangChain 为特定用例提供了多种组件，例如个人助理、文档问答、聊天机器人、查询表格数据、与 API 交互、提取、评估和汇总。</li></ul><h1>LangChain的模型</h1><ul><li>LangChain model 是一种抽象，表示框架中使用的不同类型的模型。LangChain 中的模型主要分为三类：<ol><li>LLM（大型语言模型）：这些模型将文本字符串作为输入并返回文本字符串作为输出。它们是许多语言模型应用程序的支柱。</li><li>聊天模型( Chat Model)：聊天模型由语言模型支持，但具有更结构化的 API。他们将聊天消息列表作为输入并返回聊天消息。这使得管理对话历史记录和维护上下文变得容易。</li><li>文本嵌入模型(Text Embedding Models)：这些模型将文本作为输入并返回表示文本嵌入的浮点列表。这些嵌入可用于文档检索、聚类和相似性比较等任务。</li></ol></li></ul><h1>LangChain 的主要特点</h1><ul><li>LangChain 旨在为六个主要领域的开发人员提供支持：<ol><li>LLM 和提示：LangChain 使管理提示、优化它们以及为所有 LLM 创建通用界面变得容易。此外，它还包括一些用于处理 LLM 的便捷实用程序。</li><li>链(Chain)：这些是对 LLM 或其他实用程序的调用序列。LangChain 为链提供标准接口，与各种工具集成，为流行应用提供端到端的链。</li><li>数据增强生成：LangChain 使链能够与外部数据源交互以收集生成步骤的数据。例如，它可以帮助总结长文本或使用特定数据源回答问题。</li><li>Agents：Agents 让 LLM 做出有关行动的决定，采取这些行动，检查结果，并继续前进直到工作完成。LangChain 提供了代理的标准接口，多种代理可供选择，以及端到端的代理示例。</li><li>内存：LangChain 有一个标准的内存接口，有助于维护链或代理调用之间的状态。它还提供了一系列内存实现和使用内存的链或代理的示例。</li><li>评估：很难用传统指标评估生成模型。这就是为什么 LangChain 提供提示和链来帮助开发者自己使用 LLM 评估他们的模型。</li></ol></li></ul><h1>使用示例</h1><h2 id="提示模板（PromptTemplate）">提示模板（PromptTemplate）</h2><ol><li>支持我们来自定义提示模板，不会将用户输入直接发送到 LLM，而是接收用户的输入，然后构造一个prompt将其发送给 LLM。</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts import PromptTemplate</span><br><span class="line"></span><br><span class="line">prompt = PromptTemplate(</span><br><span class="line">    input_variables=[<span class="string">&quot;paperTitle&quot;</span>, <span class="string">&quot;area&quot;</span>, <span class="string">&quot;nums&quot;</span>, <span class="string">&quot;keywords&quot;</span>],</span><br><span class="line">    <span class="attribute">template</span>=<span class="string">&quot;我想让你充当&#123;area&#125;领域的专家，针对于&#123;paperTitle&#125;这个主题，帮我撰写一篇&#123;nums&#125;字的文献综述。包含的关键字如下：&#123;keywords&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prompt.format(<span class="attribute">paperTitle</span>=<span class="string">&quot;大学生网红产品消费行为研究&quot;</span>, <span class="attribute">area</span>=<span class="string">&quot;经济学&quot;</span>, <span class="attribute">nums</span>=500, <span class="attribute">keywords</span>=<span class="string">&quot;大学生、网红、消费、行为研究&quot;</span>))</span><br><span class="line"><span class="comment"># 输出：我想让你充当经济学领域的专家，针对于大学生网红产品消费行为研究这个主题，帮我撰写一篇500字的文献综述。包含的关键字如下：大学生、网红、消费、行为研究</span></span><br></pre></td></tr></table></figure><h2 id="LLM-Chain">LLM Chain</h2><ul><li>我们可以把初始化好的LLM和Template，组合成一个chain</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 初始化llm</span></span><br><span class="line">llm = ChatOpenAI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里其实就可以直接调用llm了</span></span><br><span class="line">llm.invoke(<span class="string">&quot;how can langsmith help with testing?&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 这里可以初始化一个模板</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是世界上最好的科幻小说作者&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 采用这种方式可以将llm和template组合成一个chain</span></span><br><span class="line">chain = prompt | llm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 调用组合后的chain</span></span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你对LangSmith了解吗？&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="Retrieval-Chain（基于检索的chain）">Retrieval Chain（基于检索的chain）</h2><ul><li>当你需要让LLM回答一个问题时（比如 “how can langsmith help with testing?”），有时候你要提供的提示信息可能太多，直接传递给语言模型可能不够有效。为了提供更多上下文，LangChain提供了通过检索（retrieval）的方式获取相关的文档，并将这些文档传递给语言模型。</li><li>在这个过程中，我们使用一个检索器（Retriever）来查找相关的文档，然后将这些文档传递给提示模板。检索器可以由各种数据支持，比如一个 SQL 表、互联网上的数据等，但在官网的Demo里，将使用一个向量存储（vector store）来作为检索器。</li><li>首先，我们需要加载要索引的数据。为了做到这一点，我们将使用 WebBaseLoader（这个应该是LangChain内部实现的一个爬虫工具，要依赖于BeautifulSoup<br>pip install beautifulsoup4</li><li>引入WebBaseLocder来爬取内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> WebBaseLoader</span><br><span class="line"></span><br><span class="line">loader = WebBaseLoader(<span class="string">&quot;https://docs.smith.langchain.com/overview&quot;</span>)</span><br><span class="line">docs = loader.load()</span><br><span class="line"><span class="built_in">print</span>(docs)</span><br><span class="line"><span class="comment"># [Document(page_content=&#x27;\n\n\n\n\nLangSmith Overview and User Guide | 🦜️🛠️ LangSmith\n\n\n\n\n\nSkip to main content🦜️🛠️ LangSmith DocsPython DocsJS/TS DocsSearchGo to AppLangSmithOverviewTracingTesting &amp; EvaluationOrganizationsHubLangSmith CookbookOverviewOn this pageLangSmith Overview and User GuideBuilding reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.Over the past two months, we at LangChain have been building and using LangSmith with the goal of bridging this gap. This is our tactical user guide to outline effective ways to use LangSmith and maximize its benefits.On by default\u200bAt LangChain, all of us have LangSmith’s tracing running in the background by default. On the Python side, this is achieved by setting environment variables, which we establish whenever we launch a virtual environment or open our bash shell and leave them set. The same principle applies to most JavaScript environments through process.env1.The benefit here is that all calls to LLMs, chains, agents, tools, and retrievers are logged to LangSmith. Around 90% of the time we don’t even look at the traces, but the 10% of the time that we do… it’s so helpful. We can use LangSmith to debug:An unexpected end resultWhy an agent is loopingWhy a chain was slower than expectedHow many tokens an agent usedDebugging\u200bDebugging LLMs, chains, and agents can be tough. LangSmith helps solve the following pain points:What was the exact input to the LLM?\u200bLLM calls are often tricky and non-deterministic. The inputs/outputs may seem straightforward, given they are technically string → string (or chat messages → chat message), but this can be misleading as the input string is usually constructed from a combination of user input and auxiliary functions.Most inputs to an LLM call are a combination of some type of fixed template along with input variables. These input variables could come directly from user input or from an auxiliary function (like retrieval). By the time these input variables go into the LLM they will have been converted to a string format, but often times they are not naturally represented as a string (they could be a list, or a Document object). Therefore, it is important to have visibility into what exactly the final string going into the LLM is. This has helped us debug bugs in formatting logic, unexpected transformations to user input, and straight up missing user input.To a much lesser extent, this is also true of the output of an LLM. Oftentimes the output of an LLM is technically a string but that string may contain some structure (json, yaml) that is intended to be parsed into a structured representation. Understanding what the exact output is can help determine if there may be a need for different parsing.LangSmith provides a straightforward visualization of the exact inputs/outputs to all LLM calls, so you can easily understand them.If I edit the prompt, how does that affect the output?\u200bSo you notice a bad output, and you go into LangSmith to see what\&#x27;s going on. You find the faulty LLM call and are now looking at the exact input. You want to try changing a word or a phrase to see what happens -- what do you do?We constantly ran into this issue. Initially, we copied the prompt to a playground of sorts. But this got annoying, so we built a playground of our own! When examining an LLM call, you can click the Open in Playground button to access this playground. Here, you can modify the prompt and re-run it to observe the resulting changes to the output - as many times as needed!Currently, this feature supports only OpenAI and Anthropic models and works for LLM and Chat Model calls. We plan to extend its functionality to more LLM types, chains, agents, and retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what order? What are the inputs and outputs of each call?LangSmith\&#x27;s built-in tracing feature offers a visualization to clarify these sequences. This tool is invaluable for understanding intricate and lengthy chains and agents. For chains, it can shed light on the sequence of calls and how they interact. For agents, where the sequence of calls is non-deterministic, it helps visualize the specific sequence for a given run -- something that is impossible to know ahead of time.Why did my chain take much longer than expected?\u200bIf a chain takes longer than expected, you need to identify the cause. By tracking the latency of each step, LangSmith lets you identify and possibly eliminate the slowest components.How many tokens were used?\u200bBuilding and prototyping LLM applications can be expensive. LangSmith tracks the total token usage for a chain and the token usage of each step. This makes it easy to identify potentially costly parts of the chain.Collaborative debugging\u200bIn the past, sharing a faulty chain with a colleague for debugging was challenging when performed locally. With LangSmith, we\&#x27;ve added a “Share” button that makes the chain and LLM runs accessible to anyone with the shared link.Collecting examples\u200bMost of the time we go to debug, it\&#x27;s because something bad or unexpected outcome has happened in our application. These failures are valuable data points! By identifying how our chain can fail and monitoring these failures, we can test future chain versions against these known issues.Why is this so impactful? When building LLM applications, it’s often common to start without a dataset of any kind. This is part of the power of LLMs! They are amazing zero-shot learners, making it possible to get started as easily as possible. But this can also be a curse -- as you adjust the prompt, you\&#x27;re wandering blind. You don’t have any examples to benchmark your changes against.LangSmith addresses this problem by including an “Add to Dataset” button for each run, making it easy to add the input/output examples a chosen dataset. You can edit the example before adding them to the dataset to include the expected result, which is particularly useful for bad examples.This feature is available at every step of a nested chain, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model.End-to-end chain examples are excellent for testing the overall flow, while single, modular LLM Chain or LLM/Chat Model examples can be beneficial for testing the simplest and most directly modifiable components.Testing &amp; evaluation\u200bInitially, we do most of our evaluation manually and ad hoc. We pass in different\ninputs, and see what happens. At some point though, our application is performing\nwell and we want to be more rigorous about testing changes. We can use a dataset\nthat we’ve constructed along the way (see above). Alternatively, we could spend some\ntime constructing a small dataset by hand. For these situations, LangSmith simplifies\ndataset uploading.Once we have a dataset, how can we use it to test changes to a prompt or chain? The most basic approach is to run the chain over the data points and visualize the outputs. Despite technological advancements, there still is no substitute for looking at outputs by eye. Currently, running the chain over the data points needs to be done client-side. The LangSmith client makes it easy to pull down a dataset and then run a chain over them, logging the results to a new project associated with the dataset. From there, you can review them. We\&#x27;ve made it easy to assign feedback to runs and mark them as correct or incorrect directly in the web app, displaying aggregate statistics for each test project.We also make it easier to evaluate these runs. To that end, we\&#x27;ve added a set of evaluators to the open-source LangChain library. These evaluators can be specified when initiating a test run and will evaluate the results once the test run completes. If we’re being honest, most of these evaluators aren\&#x27;t perfect. We would not recommend that you trust them blindly. However, we do think they are useful for guiding your eye to examples you should look at. This becomes especially valuable as the number of data points increases and it becomes infeasible to look at each one manually.Human Evaluation\u200bAutomatic evaluation metrics are helpful for getting consistent and scalable information about model behavior;\nhowever, there is still no complete substitute for human review to get the utmost quality and reliability from your application.\nLangSmith makes it easy to manually review and annotate runs through annotation queues.These queues allow you to select any runs based on criteria like model type or automatic evaluation scores, and queue them up for human review. As a reviewer, you can then quickly step through the runs, viewing the input, output, and any existing tags before adding your own feedback.We often use this for a couple of reasons:To assess subjective qualities that automatic evaluators struggle with, like creativity or humorTo sample and validate a subset of runs that were auto-evaluated, ensuring the automatic metrics are still reliable and capturing the right informationAll the annotations made using the queue are assigned as &quot;feedback&quot; to the source runs, so you can easily filter and analyze them later.\nYou can also quickly edit examples and add them to datasets to expand the surface area of your evaluation sets or to fine-tune a model for improved quality or reduced costs.Monitoring\u200bAfter all this, your app might finally ready to go in production. LangSmith can also be used to monitor your application in much the same way that you used for debugging. You can log all traces, visualize latency and token usage statistics, and troubleshoot specific issues as they arise. Each run can also be assigned string tags or key-value metadata, allowing you to attach correlation ids or AB test variants, and filter runs accordingly.We’ve also made it possible to associate feedback programmatically with runs. This means that if your application has a thumbs up/down button on it, you can use that to log feedback back to LangSmith. This can be used to track performance over time and pinpoint under performing data points, which you can subsequently add to a dataset for future testing — mirroring the debug mode approach.We’ve provided several examples in the LangSmith documentation for extracting insights from logged runs. In addition to guiding you on performing this task yourself, we also provide examples of integrating with third parties for this purpose. We\&#x27;re eager to expand this area in the coming months! If you have ideas for either -- an open-source way to evaluate, or are building a company that wants to do analytics over these runs, please reach out.Exporting datasets\u200bLangSmith makes it easy to curate datasets. However, these aren’t just useful inside LangSmith; they can be exported for use in other contexts. Notable applications include exporting for use in OpenAI Evals or fine-tuning, such as with FireworksAI.To set up tracing in Deno, web browsers, or other runtime environments without access to the environment, check out the FAQs.↩PreviousLangSmithNextTracingOn by defaultDebuggingWhat was the exact input to the LLM?If I edit the prompt, how does that affect the output?What is the exact sequence of events?Why did my chain take much longer than expected?How many tokens were used?Collaborative debuggingCollecting examplesTesting &amp; evaluationHuman EvaluationMonitoringExporting datasetsCommunityDiscordTwitterGitHubDocs CodeLangSmith SDKPythonJS/TSMoreHomepageBlogCopyright © 2024 LangChain, Inc.\n\n\n\n&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;)]</span></span><br><span class="line"><span class="comment"># 这里输出的docs就是网页上的内容</span></span><br></pre></td></tr></table></figure><ul><li>然后我们需要将这些文档索引到一个向量存储中。这需要一些组件，包括嵌入模型（embedding model）和向量存储。<ol><li>检索器（Retriever）： 想象一下你在图书馆找书的时候，你可能不会把整个图书馆的书都拿去看。相反，你可能会咨询图书管理员或者查找图书馆的目录，找到与你问题相关的书籍。在这里，检索器就像图书馆的目录，它帮助我们找到与问题相关的信息。</li><li>向量存储（Vector Store）： 这就像一个大仓库，里面存放着各种各样的信息。每个信息都用一个向量表示，就像是仓库中的一个箱子。通过这些向量，我们可以快速找到存储库中与我们关心的主题相关的信息。</li><li>嵌入模型（Embedding Model）： 这就像是一个翻译工人，它将文档中的文字翻译成计算机能够理解的形式，也就是向量。这样，计算机就能够更好地处理和比较文档，找到最相关的信息。</li></ol></li></ul><h2 id="根据文档构建向量">根据文档构建向量</h2><ol><li>使用 OpenAIEmbeddings 初始化一个嵌入模型，用于将文档转化为向量。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"></span><br><span class="line">embeddings = OpenAIEmbeddings()</span><br></pre></td></tr></table></figure><ol start="2"><li>使用一个简单的本地向量存储 FAISS 来建立索引.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install faiss-cpu</span><br></pre></td></tr></table></figure><ol start="3"><li>构建向量存储</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本分割器</span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter()</span><br><span class="line"><span class="comment"># 将刚刚获取的docs分割，输出是一个List&lt;String&gt;的类型</span></span><br><span class="line">documents = text_splitter.split_documents(docs)</span><br><span class="line"><span class="comment"># 根据嵌入模型和分割后的文档，转换为向量</span></span><br><span class="line">vector = FAISS.from_documents(documents, embeddings)</span><br></pre></td></tr></table></figure><h2 id="构建链">构建链</h2><ol><li>构建一个链，该链接受问题和检索到的文档，生成答案：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains.combine_documents <span class="keyword">import</span> create_stuff_documents_chain</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line">prompt = ChatPromptTemplate.from_template(<span class="string">&quot;&quot;&quot;Answer the following question based only on the provided context:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;context&gt;</span></span><br><span class="line"><span class="string">&#123;context&#125;</span></span><br><span class="line"><span class="string">&lt;/context&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Question: &#123;input&#125;&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">document_chain = create_stuff_documents_chain(llm, prompt)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用检索器动态选择最相关的文档并传递给链：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_retrieval_chain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的vector是我们第一步构建的向量，将其转换为检索器</span></span><br><span class="line">retriever = vector.as_retriever()</span><br><span class="line">retrieval_chain = create_retrieval_chain(retriever, document_chain)</span><br></pre></td></tr></table></figure><ol start="3"><li>调用这个链，来获取响应结果，这个答案应该更加准确，因为它结合了检索到的相关文档和原始问题。这整个过程就是为了使得语言模型在回答问题时能够基于更全面的上下文信息。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = retrieval_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;how can langsmith help with testing?&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="完整demo">完整demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_retrieval_chain</span><br><span class="line"><span class="keyword">from</span> langchain.chains.combine_documents <span class="keyword">import</span> create_stuff_documents_chain</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> WebBaseLoader</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms.ollama <span class="keyword">import</span> Ollama</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores.faiss <span class="keyword">import</span> FAISS</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> OllamaEmbeddings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">llm = Ollama(model=<span class="string">&quot;llama2&quot;</span>)</span><br><span class="line"><span class="comment"># 初始化嵌入模型</span></span><br><span class="line"></span><br><span class="line">embeddings = OllamaEmbeddings()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取内容</span></span><br><span class="line">loader = WebBaseLoader(<span class="string">&quot;https://docs.smith.langchain.com/overview&quot;</span>)</span><br><span class="line">docs = loader.load()</span><br><span class="line"><span class="built_in">print</span>(docs)</span><br><span class="line"><span class="comment"># 文本分割器</span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter()</span><br><span class="line"><span class="comment"># 将刚刚获取的docs分割</span></span><br><span class="line">documents = text_splitter.split_documents(docs)</span><br><span class="line"><span class="built_in">print</span>(documents)</span><br><span class="line"><span class="comment"># 根据嵌入模型和分割后的文档，转换为向量</span></span><br><span class="line">vector = FAISS.from_documents(documents, embeddings)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换成向量完毕&quot;</span>)</span><br><span class="line"><span class="comment"># 将向量转换为检索器</span></span><br><span class="line">retriever = vector.as_retriever()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;将向量转换为检索器&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建问题链</span></span><br><span class="line">prompt = ChatPromptTemplate.from_template(<span class="string">&quot;&quot;&quot;Answer the following question based only on the provided context:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;context&gt;</span></span><br><span class="line"><span class="string">&#123;context&#125;</span></span><br><span class="line"><span class="string">&lt;/context&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Question: &#123;input&#125;&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">document_chain = create_stuff_documents_chain(llm, prompt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;构建问题完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用检索器动态选择最相关的文档并传递给链：</span></span><br><span class="line">retrieval_chain = create_retrieval_chain(retriever, document_chain)</span><br><span class="line"><span class="comment"># 最终调用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = retrieval_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;how can langsmith help with testing?&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Document(page_content=<span class="comment">&#x27;\n\n\n\n\nLangSmith Overview and User Guide | 🦜️🛠️ LangSmith\n\n\n\n\n\nSkip to main content🦜️🛠️ LangSmith DocsPython DocsJS/TS DocsSearchGo to AppLangSmithOverviewTracingTesting &amp; EvaluationOrganizationsHubLangSmith CookbookOverviewOn this pageLangSmith Overview and User GuideBuilding reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.Over the past two months, we at LangChain have been building and using LangSmith with the goal of bridging this gap. This is our tactical user guide to outline effective ways to use LangSmith and maximize its benefits.On by default\u200bAt LangChain, all of us have LangSmith’s tracing running in the background by default. On the Python side, this is achieved by setting environment variables, which we establish whenever we launch a virtual environment or open our bash shell and leave them set. The same principle applies to most JavaScript environments through process.env1.The benefit here is that all calls to LLMs, chains, agents, tools, and retrievers are logged to LangSmith. Around 90% of the time we don’t even look at the traces, but the 10% of the time that we do… it’s so helpful. We can use LangSmith to de<span class="doctag">bug:</span>An unexpected end resultWhy an agent is loopingWhy a chain was slower than expectedHow many tokens an agent usedDebugging\u200bDebugging LLMs, chains, and agents can be tough. LangSmith helps solve the following pain points:What was the exact input to the LLM?\u200bLLM calls are often tricky and non-deterministic. The inputs/outputs may seem straightforward, given they are technically string → string (or chat messages → chat message), but this can be misleading as the input string is usually constructed from a combination of user input and auxiliary functions.Most inputs to an LLM call are a combination of some type of fixed template along with input variables. These input variables could come directly from user input or from an auxiliary function (like retrieval). By the time these input variables go into the LLM they will have been converted to a string format, but often times they are not naturally represented as a string (they could be a list, or a Document object). Therefore, it is important to have visibility into what exactly the final string going into the LLM is. This has helped us debug bugs in formatting logic, unexpected transformations to user input, and straight up missing user input.To a much lesser extent, this is also true of the output of an LLM. Oftentimes the output of an LLM is technically a string but that string may contain some structure (json, yaml) that is intended to be parsed into a structured representation. Understanding what the exact output is can help determine if there may be a need for different parsing.LangSmith provides a straightforward visualization of the exact inputs/outputs to all LLM calls, so you can easily understand them.If I edit the prompt, how does that affect the output?\u200bSo you notice a bad output, and you go into LangSmith to see what\&#x27;s going on. You find the faulty LLM call and are now looking at the exact input. You want to try changing a word or a phrase to see what happens -- what do you do?We constantly ran into this issue. Initially, we copied the prompt to a playground of sorts. But this got annoying, so we built a playground of our own! When examining an LLM call, you can click the Open in Playground button to access this playground. Here, you can modify the prompt and re-run it to observe the resulting changes to the output - as many times as needed!Currently, this feature supports only OpenAI and Anthropic models and works for LLM and Chat Model calls. We plan to extend its functionality to more LLM types, chains, agents, and retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what order? What are the inputs and outputs of each call?LangSmith\&#x27;s built-in tracing feature offers a visualization to clarify these sequences. This tool is invaluable for understanding intricate and lengthy chains and agents. For chains, it can shed light on the sequence of calls and how they interact. For agents, where the sequence of calls is non-deterministic, it helps visualize the specific sequence for a given run -- something that is impossible to know ahead of time.Why did my chain take much longer than expected?\u200bIf a chain takes longer than expected, you need to identify the cause. By tracking the latency of each step, LangSmith lets you identify and possibly eliminate the slowest components.How many tokens were used?\u200bBuilding and prototyping LLM applications can be expensive. LangSmith tracks the total token usage for a chain and the token usage of each step. This makes it easy to identify potentially costly parts of the chain.Collaborative debugging\u200bIn the past, sharing a faulty chain with a colleague for debugging was challenging when performed locally. With LangSmith, we\&#x27;ve added a “Share” button that makes the chain and LLM runs accessible to anyone with the shared link.Collecting examples\u200bMost of the time we go to debug, it\&#x27;s because something bad or unexpected outcome has happened in our application. These failures are valuable data points! By identifying how our chain can fail and monitoring these failures, we can test future chain versions against these known issues.Why is this so impactful? When building LLM applications, it’s often common to start without a dataset of any kind. This is part of the power of LLMs! They are amazing zero-shot learners, making it possible to get started as easily as possible. But this can also be a curse -- as you adjust the prompt, you\&#x27;re wandering blind. You don’t have any examples to benchmark your changes against.LangSmith addresses this problem by including an “Add to Dataset” button for each run, making it easy to add the input/output examples a chosen dataset. You can edit the example before adding them to the dataset to include the expected result, which is particularly useful for bad examples.This feature is available at every step of a nested chain, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model.End-to-end chain examples are excellent for testing the overall flow, while single, modular LLM Chain or LLM/Chat Model examples can be beneficial for testing the simplest and most directly modifiable components.Testing &amp; evaluation\u200bInitially, we do most of our evaluation manually and ad hoc. We pass in different\ninputs, and see what happens. At some point though, our application is performing\nwell and we want to be more rigorous about testing changes. We can use a dataset\nthat we’ve constructed along the way (see above). Alternatively, we could spend some\ntime constructing a small dataset by hand. For these situations, LangSmith simplifies\ndataset uploading.Once we have a dataset, how can we use it to test changes to a prompt or chain? The most basic approach is to run the chain over the data points and visualize the outputs. Despite technological advancements, there still is no substitute for looking at outputs by eye. Currently, running the chain over the data points needs to be done client-side. The LangSmith client makes it easy to pull down a dataset and then run a chain over them, logging the results to a new project associated with the dataset. From there, you can review them. We\&#x27;ve made it easy to assign feedback to runs and mark them as correct or incorrect directly in the web app, displaying aggregate statistics for each test project.We also make it easier to evaluate these runs. To that end, we\&#x27;ve added a set of evaluators to the open-source LangChain library. These evaluators can be specified when initiating a test run and will evaluate the results once the test run completes. If we’re being honest, most of these evaluators aren\&#x27;t perfect. We would not recommend that you trust them blindly. However, we do think they are useful for guiding your eye to examples you should look at. This becomes especially valuable as the number of data points increases and it becomes infeasible to look at each one manually.Human Evaluation\u200bAutomatic evaluation metrics are helpful for getting consistent and scalable information about model behavior;\nhowever, there is still no complete substitute for human review to get the utmost quality and reliability from your application.\nLangSmith makes it easy to manually review and annotate runs through annotation queues.These queues allow you to select any runs based on criteria like model type or automatic evaluation scores, and queue them up for human review. As a reviewer, you can then quickly step through the runs, viewing the input, output, and any existing tags before adding your own feedback.We often use this for a couple of reasons:To assess subjective qualities that automatic evaluators struggle with, like creativity or humorTo sample and validate a subset of runs that were auto-evaluated, ensuring the automatic metrics are still reliable and capturing the right informationAll the annotations made using the queue are assigned as &quot;feedback&quot; to the source runs, so you can easily filter and analyze them later.\nYou can also quickly edit examples and add them to datasets to expand the surface area of your evaluation sets or to fine-tune a model for improved quality or reduced costs.Monitoring\u200bAfter all this, your app might finally ready to go in production. LangSmith can also be used to monitor your application in much the same way that you used for debugging. You can log all traces, visualize latency and token usage statistics, and troubleshoot specific issues as they arise. Each run can also be assigned string tags or key-value metadata, allowing you to attach correlation ids or AB test variants, and filter runs accordingly.We’ve also made it possible to associate feedback programmatically with runs. This means that if your application has a thumbs up/down button on it, you can use that to log feedback back to LangSmith. This can be used to track performance over time and pinpoint under performing data points, which you can subsequently add to a dataset for future testing — mirroring the debug mode approach.We’ve provided several examples in the LangSmith documentation for extracting insights from logged runs. In addition to guiding you on performing this task yourself, we also provide examples of integrating with third parties for this purpose. We\&#x27;re eager to expand this area in the coming months! If you have ideas for either -- an open-source way to evaluate, or are building a company that wants to do analytics over these runs, please reach out.Exporting datasets\u200bLangSmith makes it easy to curate datasets. However, these aren’t just useful inside LangSmith; they can be exported for use in other contexts. Notable applications include exporting for use in OpenAI Evals or fine-tuning, such as with FireworksAI.To set up tracing in Deno, web browsers, or other runtime environments without access to the environment, check out the FAQs.↩PreviousLangSmithNextTracingOn by defaultDebuggingWhat was the exact input to the LLM?If I edit the prompt, how does that affect the output?What is the exact sequence of events?Why did my chain take much longer than expected?How many tokens were used?Collaborative debuggingCollecting examplesTesting &amp; evaluationHuman EvaluationMonitoringExporting datasetsCommunityDiscordTwitterGitHubDocs CodeLangSmith SDKPythonJS/TSMoreHomepageBlogCopyright © 2024 LangChain, Inc.\n\n\n\n&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;)]</span></span><br><span class="line">[Document(page_content=<span class="comment">&#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&quot;Skip to main content🦜️🛠️ LangSmith DocsPython DocsJS/TS DocsSearchGo to AppLangSmithOverviewTracingTesting &amp; EvaluationOrganizationsHubLangSmith CookbookOverviewOn this pageLangSmith Overview and User GuideBuilding reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.Over the past two months, we at LangChain have been building and using LangSmith with the goal of bridging this gap. This is our tactical user guide to outline effective ways to use LangSmith and maximize its benefits.On by default\u200bAt LangChain, all of us have LangSmith’s tracing running in the background by default. On the Python side, this is achieved by setting environment variables, which we establish whenever we launch a virtual environment or open our bash shell and leave them set. The same principle applies to most JavaScript environments through process.env1.The benefit here is that all calls to LLMs, chains, agents, tools, and retrievers are logged to LangSmith. Around 90% of the time we don’t even look at the traces, but the 10% of the time that we do… it’s so helpful. We can use LangSmith to de<span class="doctag">bug:</span>An unexpected end resultWhy an agent is loopingWhy a chain was slower than expectedHow many tokens an agent usedDebugging\u200bDebugging LLMs, chains, and agents can be tough. LangSmith helps solve the following pain points:What was the exact input to the LLM?\u200bLLM calls are often tricky and non-deterministic. The inputs/outputs may seem straightforward, given they are technically string → string (or chat messages → chat message), but this can be misleading as the input string is usually constructed from a combination of user input and auxiliary functions.Most inputs to an LLM call are a combination of some type of fixed template along with input variables. These input variables could come directly from user input or from an auxiliary function (like retrieval). By the time these input variables go into the LLM they will have been converted to a string format, but often times they are not naturally represented as a string (they could be a list, or a Document object). Therefore, it is important to have visibility into what exactly the final string going into the LLM is. This has helped us debug bugs in formatting logic, unexpected transformations to user input, and straight up missing user input.To a much lesser extent, this is also true of the output of an LLM. Oftentimes the output of an LLM is technically a string but that string may contain some structure (json, yaml) that is intended to be parsed into a structured representation. Understanding what the exact output is can help determine if there may be a need for different parsing.LangSmith provides a straightforward visualization of the exact inputs/outputs to all LLM calls, so you can easily understand them.If I edit the prompt, how does that affect the output?\u200bSo you notice a bad output, and you go into LangSmith to see what&#x27;s going on. You find the faulty LLM call and are now looking at the exact input. You want to try changing a word or a phrase to see what happens -- what do you do?We constantly ran into this issue. Initially, we copied the prompt to a playground of sorts. But this got annoying, so we built a playground of our own! When examining an LLM call, you can click the Open in Playground button to access this playground. Here, you can modify the prompt and re-run it to observe the resulting changes to the output - as many times as needed!Currently, this feature supports only OpenAI and Anthropic models and works for LLM and Chat Model calls. We plan to extend its functionality to more LLM types, chains, agents, and retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&quot;retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what order? What are the inputs and outputs of each call?LangSmith&#x27;s built-in tracing feature offers a visualization to clarify these sequences. This tool is invaluable for understanding intricate and lengthy chains and agents. For chains, it can shed light on the sequence of calls and how they interact. For agents, where the sequence of calls is non-deterministic, it helps visualize the specific sequence for a given run -- something that is impossible to know ahead of time.Why did my chain take much longer than expected?\u200bIf a chain takes longer than expected, you need to identify the cause. By tracking the latency of each step, LangSmith lets you identify and possibly eliminate the slowest components.How many tokens were used?\u200bBuilding and prototyping LLM applications can be expensive. LangSmith tracks the total token usage for a chain and the token usage of each step. This makes it easy to identify potentially costly parts of the chain.Collaborative debugging\u200bIn the past, sharing a faulty chain with a colleague for debugging was challenging when performed locally. With LangSmith, we&#x27;ve added a “Share” button that makes the chain and LLM runs accessible to anyone with the shared link.Collecting examples\u200bMost of the time we go to debug, it&#x27;s because something bad or unexpected outcome has happened in our application. These failures are valuable data points! By identifying how our chain can fail and monitoring these failures, we can test future chain versions against these known issues.Why is this so impactful? When building LLM applications, it’s often common to start without a dataset of any kind. This is part of the power of LLMs! They are amazing zero-shot learners, making it possible to get started as easily as possible. But this can also be a curse -- as you adjust the prompt, you&#x27;re wandering blind. You don’t have any examples to benchmark your changes against.LangSmith addresses this problem by including an “Add to Dataset” button for each run, making it easy to add the input/output examples a chosen dataset. You can edit the example before adding them to the dataset to include the expected result, which is particularly useful for bad examples.This feature is available at every step of a nested chain, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model.End-to-end chain examples are excellent for testing the overall flow, while single, modular LLM Chain or LLM/Chat Model examples can be beneficial for testing the simplest and most directly modifiable components.Testing &amp; evaluation\u200bInitially, we do most of our evaluation manually and ad hoc. We pass in different&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&#x27;inputs, and see what happens. At some point though, our application is performing\nwell and we want to be more rigorous about testing changes. We can use a dataset\nthat we’ve constructed along the way (see above). Alternatively, we could spend some\ntime constructing a small dataset by hand. For these situations, LangSmith simplifies\ndataset uploading.Once we have a dataset, how can we use it to test changes to a prompt or chain? The most basic approach is to run the chain over the data points and visualize the outputs. Despite technological advancements, there still is no substitute for looking at outputs by eye. Currently, running the chain over the data points needs to be done client-side. The LangSmith client makes it easy to pull down a dataset and then run a chain over them, logging the results to a new project associated with the dataset. From there, you can review them. We\&#x27;ve made it easy to assign feedback to runs and mark them as correct or incorrect directly in the web app, displaying aggregate statistics for each test project.We also make it easier to evaluate these runs. To that end, we\&#x27;ve added a set of evaluators to the open-source LangChain library. These evaluators can be specified when initiating a test run and will evaluate the results once the test run completes. If we’re being honest, most of these evaluators aren\&#x27;t perfect. We would not recommend that you trust them blindly. However, we do think they are useful for guiding your eye to examples you should look at. This becomes especially valuable as the number of data points increases and it becomes infeasible to look at each one manually.Human Evaluation\u200bAutomatic evaluation metrics are helpful for getting consistent and scalable information about model behavior;\nhowever, there is still no complete substitute for human review to get the utmost quality and reliability from your application.\nLangSmith makes it easy to manually review and annotate runs through annotation queues.These queues allow you to select any runs based on criteria like model type or automatic evaluation scores, and queue them up for human review. As a reviewer, you can then quickly step through the runs, viewing the input, output, and any existing tags before adding your own feedback.We often use this for a couple of reasons:To assess subjective qualities that automatic evaluators struggle with, like creativity or humorTo sample and validate a subset of runs that were auto-evaluated, ensuring the automatic metrics are still reliable and capturing the right informationAll the annotations made using the queue are assigned as &quot;feedback&quot; to the source runs, so you can easily filter and analyze them later.&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&quot;You can also quickly edit examples and add them to datasets to expand the surface area of your evaluation sets or to fine-tune a model for improved quality or reduced costs.Monitoring\u200bAfter all this, your app might finally ready to go in production. LangSmith can also be used to monitor your application in much the same way that you used for debugging. You can log all traces, visualize latency and token usage statistics, and troubleshoot specific issues as they arise. Each run can also be assigned string tags or key-value metadata, allowing you to attach correlation ids or AB test variants, and filter runs accordingly.We’ve also made it possible to associate feedback programmatically with runs. This means that if your application has a thumbs up/down button on it, you can use that to log feedback back to LangSmith. This can be used to track performance over time and pinpoint under performing data points, which you can subsequently add to a dataset for future testing — mirroring the debug mode approach.We’ve provided several examples in the LangSmith documentation for extracting insights from logged runs. In addition to guiding you on performing this task yourself, we also provide examples of integrating with third parties for this purpose. We&#x27;re eager to expand this area in the coming months! If you have ideas for either -- an open-source way to evaluate, or are building a company that wants to do analytics over these runs, please reach out.Exporting datasets\u200bLangSmith makes it easy to curate datasets. However, these aren’t just useful inside LangSmith; they can be exported for use in other contexts. Notable applications include exporting for use in OpenAI Evals or fine-tuning, such as with FireworksAI.To set up tracing in Deno, web browsers, or other runtime environments without access to the environment, check out the FAQs.↩PreviousLangSmithNextTracingOn by defaultDebuggingWhat was the exact input to the LLM?If I edit the prompt, how does that affect the output?What is the exact sequence of events?Why did my chain take much longer than expected?How many tokens were used?Collaborative debuggingCollecting examplesTesting &amp; evaluationHuman EvaluationMonitoringExporting datasetsCommunityDiscordTwitterGitHubDocs CodeLangSmith SDKPythonJS/TSMoreHomepageBlogCopyright © 2024 LangChain, Inc.&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;)]</span></span><br><span class="line">转换成向量完毕</span><br><span class="line">将向量转换为检索器</span><br><span class="line">构建问题完毕</span><br><span class="line">开始调用</span><br><span class="line">调用完毕</span><br><span class="line">&#123;<span class="comment">&#x27;input&#x27;: &#x27;how can langsmith help with testing?&#x27;, &#x27;context&#x27;: [Document(page_content=&quot;You can also quickly edit examples and add them to datasets to expand the surface area of your evaluation sets or to fine-tune a model for improved quality or reduced costs.Monitoring\u200bAfter all this, your app might finally ready to go in production. LangSmith can also be used to monitor your application in much the same way that you used for debugging. You can log all traces, visualize latency and token usage statistics, and troubleshoot specific issues as they arise. Each run can also be assigned string tags or key-value metadata, allowing you to attach correlation ids or AB test variants, and filter runs accordingly.We’ve also made it possible to associate feedback programmatically with runs. This means that if your application has a thumbs up/down button on it, you can use that to log feedback back to LangSmith. This can be used to track performance over time and pinpoint under performing data points, which you can subsequently add to a dataset for future testing — mirroring the debug mode approach.We’ve provided several examples in the LangSmith documentation for extracting insights from logged runs. In addition to guiding you on performing this task yourself, we also provide examples of integrating with third parties for this purpose. We&#x27;re eager to expand this area in the coming months! If you have ideas for either -- an open-source way to evaluate, or are building a company that wants to do analytics over these runs, please reach out.Exporting datasets\u200bLangSmith makes it easy to curate datasets. However, these aren’t just useful inside LangSmith; they can be exported for use in other contexts. Notable applications include exporting for use in OpenAI Evals or fine-tuning, such as with FireworksAI.To set up tracing in Deno, web browsers, or other runtime environments without access to the environment, check out the FAQs.↩PreviousLangSmithNextTracingOn by defaultDebuggingWhat was the exact input to the LLM?If I edit the prompt, how does that affect the output?What is the exact sequence of events?Why did my chain take much longer than expected?How many tokens were used?Collaborative debuggingCollecting examplesTesting &amp; evaluationHuman EvaluationMonitoringExporting datasetsCommunityDiscordTwitterGitHubDocs CodeLangSmith SDKPythonJS/TSMoreHomepageBlogCopyright © 2024 LangChain, Inc.&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&#x27;inputs, and see what happens. At some point though, our application is performing\nwell and we want to be more rigorous about testing changes. We can use a dataset\nthat we’ve constructed along the way (see above). Alternatively, we could spend some\ntime constructing a small dataset by hand. For these situations, LangSmith simplifies\ndataset uploading.Once we have a dataset, how can we use it to test changes to a prompt or chain? The most basic approach is to run the chain over the data points and visualize the outputs. Despite technological advancements, there still is no substitute for looking at outputs by eye. Currently, running the chain over the data points needs to be done client-side. The LangSmith client makes it easy to pull down a dataset and then run a chain over them, logging the results to a new project associated with the dataset. From there, you can review them. We\&#x27;ve made it easy to assign feedback to runs and mark them as correct or incorrect directly in the web app, displaying aggregate statistics for each test project.We also make it easier to evaluate these runs. To that end, we\&#x27;ve added a set of evaluators to the open-source LangChain library. These evaluators can be specified when initiating a test run and will evaluate the results once the test run completes. If we’re being honest, most of these evaluators aren\&#x27;t perfect. We would not recommend that you trust them blindly. However, we do think they are useful for guiding your eye to examples you should look at. This becomes especially valuable as the number of data points increases and it becomes infeasible to look at each one manually.Human Evaluation\u200bAutomatic evaluation metrics are helpful for getting consistent and scalable information about model behavior;\nhowever, there is still no complete substitute for human review to get the utmost quality and reliability from your application.\nLangSmith makes it easy to manually review and annotate runs through annotation queues.These queues allow you to select any runs based on criteria like model type or automatic evaluation scores, and queue them up for human review. As a reviewer, you can then quickly step through the runs, viewing the input, output, and any existing tags before adding your own feedback.We often use this for a couple of reasons:To assess subjective qualities that automatic evaluators struggle with, like creativity or humorTo sample and validate a subset of runs that were auto-evaluated, ensuring the automatic metrics are still reliable and capturing the right informationAll the annotations made using the queue are assigned as &quot;feedback&quot; to the source runs, so you can easily filter and analyze them later.&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;), Document(page_content=&quot;retrievers in the future.What is the exact sequence of events?\u200bIn complicated chains and agents, it can often be hard to understand what is going on under the hood. What calls are being made? In what order? What are the inputs and outputs of each call?LangSmith&#x27;s built-in tracing feature offers a visualization to clarify these sequences. This tool is invaluable for understanding intricate and lengthy chains and agents. For chains, it can shed light on the sequence of calls and how they interact. For agents, where the sequence of calls is non-deterministic, it helps visualize the specific sequence for a given run -- something that is impossible to know ahead of time.Why did my chain take much longer than expected?\u200bIf a chain takes longer than expected, you need to identify the cause. By tracking the latency of each step, LangSmith lets you identify and possibly eliminate the slowest components.How many tokens were used?\u200bBuilding and prototyping LLM applications can be expensive. LangSmith tracks the total token usage for a chain and the token usage of each step. This makes it easy to identify potentially costly parts of the chain.Collaborative debugging\u200bIn the past, sharing a faulty chain with a colleague for debugging was challenging when performed locally. With LangSmith, we&#x27;ve added a “Share” button that makes the chain and LLM runs accessible to anyone with the shared link.Collecting examples\u200bMost of the time we go to debug, it&#x27;s because something bad or unexpected outcome has happened in our application. These failures are valuable data points! By identifying how our chain can fail and monitoring these failures, we can test future chain versions against these known issues.Why is this so impactful? When building LLM applications, it’s often common to start without a dataset of any kind. This is part of the power of LLMs! They are amazing zero-shot learners, making it possible to get started as easily as possible. But this can also be a curse -- as you adjust the prompt, you&#x27;re wandering blind. You don’t have any examples to benchmark your changes against.LangSmith addresses this problem by including an “Add to Dataset” button for each run, making it easy to add the input/output examples a chosen dataset. You can edit the example before adding them to the dataset to include the expected result, which is particularly useful for bad examples.This feature is available at every step of a nested chain, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model.End-to-end chain examples are excellent for testing the overall flow, while single, modular LLM Chain or LLM/Chat Model examples can be beneficial for testing the simplest and most directly modifiable components.Testing &amp; evaluation\u200bInitially, we do most of our evaluation manually and ad hoc. We pass in different&quot;, metadata=&#123;&#x27;source&#x27;: &#x27;https://docs.smith.langchain.com/overview&#x27;, &#x27;title&#x27;: &#x27;LangSmith Overview and User Guide | 🦜️🛠️ LangSmith&#x27;, &#x27;description&#x27;: &#x27;Building reliable LLM applications can be challenging. LangChain simplifies the initial setup, but there is still work needed to bring the performance of prompts, chains and agents up the level where they are reliable enough to be used in production.&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;)], &#x27;answer&#x27;: &#x27;LangSmith can assist with testing by providing various features to simplify dataset uploading, running chains over the data points, visualizing the outputs, and evaluating the results. Here are some ways LangSmith can help with testing:\n\n1. Easy dataset uploading: LangSmith simplifies dataset uploading, making it easier to construct a small dataset by hand or use an existing one.\n2. Running chains over data points: Once you have a dataset, LangSmith allows you to run the chain over the data points and visualize the outputs. You can review the outputs directly in the web app by assigning feedback to runs and marking them as correct or incorrect.\n3. Evaluating results: LangSmith adds a set of evaluators to the open-source LangChain library, which can be specified when initiating a test run. These evaluators will evaluate the results once the test run completes, providing valuable information for guiding your eye to examples you should look at.\n4. Manual testing and annotation: LangSmith makes it easy to manually review and annotate runs through a visualization of the sequence of events, helping identify subjective qualities that automatic evaluators struggle with.\n5. Tracking token usage: LangSmith tracks the total token usage for a chain and the token usage of each step, making it easier to identify potentially costly parts of the chain.\n6. Collecting examples: LangSmith includes an &quot;Add to Dataset&quot; button for each run, enabling you to add examples for an end-to-end chain, an intermediary chain (such as a LLM Chain), or simply the LLM or Chat Model. This feature is available at every step of a nested chain, making it easier to test the overall flow and individual components.\n\nBy leveraging these features, LangSmith can help streamline your testing process and provide valuable insights into your LLM application\&#x27;s performance.&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Conversation-Retrieval-Chain（对话检索链）">Conversation Retrieval Chain（对话检索链）</h2><ul><li>我们刚刚创建的链只能回答单一的问题，但有些应用场景需要构建对话型的聊天机器人。</li><li>为了实现这一点，我们仍然可以使用create_retrieval_chain函数，但是我们需要改变两件事：<ul><li>检索方法现在不应仅适用于最近的输入，而应考虑整个历史记录。</li><li>最终的 LLM 链同样应该考虑整个历史<br>更新检索（retrieval）<br>我们创建了一个新的链，这个链将接受最近的用户输入（input）和整个对话历史（chat_history），然后使用语言模型生成一个搜索查询。这里使用了 create_history_aware_retriever 函数来实现这个新链。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_history_aware_retriever</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> MessagesPlaceholder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个提示模板，用于根据对话历史生成搜索查询</span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    MessagesPlaceholder(variable_name=<span class="string">&quot;chat_history&quot;</span>),  <span class="comment"># 对话历史的占位符</span></span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),  <span class="comment"># 用户输入的占位符</span></span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;在上述对话的基础上，生成一个搜索查询，以获取与对话相关的信息&quot;</span>)  <span class="comment"># 生成搜索查询的指令，基于对话内容</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个检索器链，整合语言模型、检索器和定义的提示</span></span><br><span class="line">retriever_chain = create_history_aware_retriever(llm, retriever, prompt)</span><br></pre></td></tr></table></figure><ul><li>我们可以传入后续的问题实例来测试这一点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage, AIMessage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义对话历史，包括人类消息和AI消息</span></span><br><span class="line">chat_history = [HumanMessage(content=<span class="string">&quot;LangSmith可以帮助我测试App吗？&quot;</span>), AIMessage(content=<span class="string">&quot;Yes!&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用检索器链，传入对话历史和用户输入</span></span><br><span class="line">retriever_chain.invoke(&#123;</span><br><span class="line">    <span class="string">&quot;chat_history&quot;</span>: chat_history,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: <span class="string">&quot;告诉我怎么做&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>此时的输出应该是会返回有关 LangSmith 中测试的文档。这是因为LLM生成了一个新查询，将聊天历史记录与后续问题相结合。</li><li>现在我们有了这个新的检索器，我们可以创建一个新的链来继续与这些检索到的文档进行对话。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prompt</span> = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;根据上下文回答用户的问题\n\n&#123;context&#125;&quot;</span>),</span><br><span class="line">    MessagesPlaceholder(variable_name=<span class="string">&quot;chat_history&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="attr">document_chain</span> = create_stuff_documents_chain(llm, prompt)</span><br><span class="line"><span class="attr">retrieval_chain</span> = create_retrieval_chain(retriever_chain, document_chain)</span><br></pre></td></tr></table></figure><ul><li>现在进行整体的测试：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chat_history = [HumanMessage(content=<span class="string">&quot;LangSmith可以帮助我测试App吗？&quot;</span>), AIMessage(content=<span class="string">&quot;Yes!&quot;</span>)]</span><br><span class="line"></span><br><span class="line">retriever_chain.invoke(&#123;</span><br><span class="line">    <span class="string">&quot;chat_history&quot;</span>: chat_history,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: <span class="string">&quot;告诉我怎么做&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>会出了一个连贯的答案，表明我们已经成功地将检索链变成了聊天机器人</li></ul><h2 id="Agent">Agent</h2><ul><li>构建代理时要做的第一件事就是决定它应该有权访问哪些工具。在此示例中，我们将为代理提供两个工具的访问权限：<ol><li>我们刚刚创建的检索器。这将让它轻松回答有关 LangSmith 的问题</li></ol><ul><li>首先，让我们为刚刚创建的检索器设置一个工具：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.tools.retriever <span class="keyword">import</span> create_retriever_tool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个检索器就是刚刚爬取LongSmith文档的内容，生成的检索器</span></span><br><span class="line">retriever_tool = create_retriever_tool(</span><br><span class="line">    retriever,</span><br><span class="line">    <span class="string">&quot;langsmith_search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;搜索有关LangSmith的信息或者有关LangSmith的任何问题，必须使用这个工具！&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="2"><li>一个搜索工具。这将使它能够轻松回答需要最新信息的问题。<br>- 官网示例中使用的搜索工具是Tavily，需要一个 API 密钥（有免费套餐）。在他们的平台上创建后，需要将其设置为环境变量</li></ol><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.tools.tavily_search <span class="keyword">import</span> TavilySearchResults</span><br><span class="line"></span><br><span class="line">search = TavilySearchResults()</span><br></pre></td></tr></table></figure>- 我们现在可以创建我们想要使用的工具的列表：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools = [retriever_tool, search]</span><br></pre></td></tr></table></figure>- 现在我们有了工具，我们可以创建一个代理来使用它们。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个可以拉取预定义好的prompt</span></span><br><span class="line">pip install langchainhub</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> hub</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> create_openai_functions_agent</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取别人预定义好的prompt</span></span><br><span class="line">prompt = hub.pull(<span class="string">&quot;hwchase17/openai-functions-agent&quot;</span>)</span><br><span class="line">llm = ChatOpenAI(model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, temperature=<span class="number">0</span>)</span><br><span class="line">agent = create_openai_functions_agent(llm, tools, prompt)</span><br><span class="line">agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>- 调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">agent_executor.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;LangSmith可以帮助我测试App吗？&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></code></pre><h2 id="构建服务">构建服务</h2><ul><li>LangServe 可以帮助开发人员将 LangChain 链部署为 REST API。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> WebBaseLoader</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain.tools.retriever <span class="keyword">import</span> create_retriever_tool</span><br><span class="line"><span class="keyword">from</span> langchain_community.tools.tavily_search <span class="keyword">import</span> TavilySearchResults</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> hub</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> create_openai_functions_agent</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor</span><br><span class="line"><span class="keyword">from</span> langchain.pydantic_v1 <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> BaseMessage</span><br><span class="line"><span class="keyword">from</span> langserve <span class="keyword">import</span> add_routes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载检索器（Retriever）</span></span><br><span class="line"><span class="comment"># 首先，通过 WebBaseLoader 从 LangChain 文档网站加载文档数据。然后，使用 RecursiveCharacterTextSplitter 将文档分割为文档片段，并使用 OpenAIEmbeddings 将文档片段嵌入为向量。最后，使用 FAISS 创建一个向量存储作为检索器。</span></span><br><span class="line">loader = WebBaseLoader(<span class="string">&quot;https://docs.smith.langchain.com/overview&quot;</span>)</span><br><span class="line">docs = loader.load()</span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter()</span><br><span class="line">documents = text_splitter.split_documents(docs)</span><br><span class="line">embeddings = OpenAIEmbeddings()</span><br><span class="line">vector = FAISS.from_documents(documents, embeddings)</span><br><span class="line">retriever = vector.as_retriever()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建工具（Tools）</span></span><br><span class="line"><span class="comment"># 创建两个工具：一个是之前创建的检索器工具 retriever_tool，另一个是 Tavily 搜索工具 search。</span></span><br><span class="line">retriever_tool = create_retriever_tool(</span><br><span class="line">    retriever,</span><br><span class="line">    <span class="string">&quot;langsmith_search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;搜索有关LangSmith的信息或者有关LangSmith的任何问题，必须使用这个工具！&quot;</span>,</span><br><span class="line">)</span><br><span class="line">search = TavilySearchResults()</span><br><span class="line">tools = [retriever_tool, search]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建代理</span></span><br><span class="line"><span class="comment"># 使用 LangChain Hub 中提供的预定义提示（自己构建也可以），创建一个使用 OpenAI 模型和工具的代理。这个代理被设置为能够决定在处理问题时使用哪些工具。</span></span><br><span class="line">prompt = hub.pull(<span class="string">&quot;hwchase17/openai-functions-agent&quot;</span>)</span><br><span class="line">llm = ChatOpenAI(model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, temperature=<span class="number">0</span>)</span><br><span class="line">agent = create_openai_functions_agent(llm, tools, prompt)</span><br><span class="line">agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. FastAPI 定义</span></span><br><span class="line">app = FastAPI(</span><br><span class="line">  title=<span class="string">&quot;LangChain Server&quot;</span>,</span><br><span class="line">  version=<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">  description=<span class="string">&quot;A simple API server using LangChain&#x27;s Runnable interfaces&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 添加链路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过调用 add_routes 函数，将代理链添加为 FastAPI 应用的一个路由，从而可以通过 /agent 路径访问代理链。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">input</span>: <span class="built_in">str</span></span><br><span class="line">    chat_history: <span class="type">List</span>[BaseMessage] = Field(</span><br><span class="line">        ...,</span><br><span class="line">        extra=&#123;<span class="string">&quot;widget&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;chat&quot;</span>, <span class="string">&quot;input&quot;</span>: <span class="string">&quot;location&quot;</span>&#125;&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Output</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    output: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">add_routes(</span><br><span class="line">    app,</span><br><span class="line">    agent_executor.with_types(input_type=Input, output_type=Output),</span><br><span class="line">    path=<span class="string">&quot;/agent&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h1>链的概念（补充）</h1><ul><li>链（Chains）通常将大语言模型（LLM）与提示（Prompt）结合在一起，基于此，我们可以对文本或数据进行一系列操作。链（Chains）可以一次性接受多个输入。例如，我们可以创建一个链，该链接受用户输入，使用提示模板对其进行格式化，然后将格式化的响应传递给 LLM 。我们可以通过将多个链组合在一起，或者通过将链与其他组件组合在一起来构建更复杂的链。</li></ul><h2 id="顺序链（SequentialChains）">顺序链（SequentialChains）</h2><ul><li>是按预定义顺序执行其链接的链。具体来说，我们将使用简单顺序链（SimpleSequentialChain），这是顺序链的最简单类型，其中每个步骤都有一个输入/输出，一个步骤的输出是下一个步骤的输入。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms <span class="keyword">import</span> Tongyi</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain, SimpleSequentialChain</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1903ddb520ac4637a1d36b2f93e0aa4c&quot;</span></span><br><span class="line"></span><br><span class="line">llm = Tongyi()</span><br><span class="line"></span><br><span class="line">prompt1 = ChatPromptTemplate.from_template(<span class="string">&quot;你现在是写作领域的大师，现在为&#123;title&#125;这篇文章生成一些大纲吧。&quot;</span>)</span><br><span class="line"></span><br><span class="line">chain_one = LLMChain(llm=llm, prompt=prompt1)</span><br><span class="line"></span><br><span class="line">prompt2 = ChatPromptTemplate.from_template(<span class="string">&quot;根据这个大纲：&#123;toc&#125;，生成每个章节对应的内容吧。&quot;</span>)</span><br><span class="line"></span><br><span class="line">chain_two = LLMChain(llm=llm, prompt=prompt2)</span><br><span class="line"></span><br><span class="line">chain = SimpleSequentialChain(chains=[chain_one, chain_two], verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    title = <span class="built_in">input</span>(<span class="string">&quot;请输入题目：&quot;</span>)</span><br><span class="line">    res = chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: title&#125;)</span><br><span class="line">    <span class="built_in">print</span>(json.dumps(res, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">当然可以，以下是一个关于“大学生网红消费行为分析”的文章大纲：</span><br><span class="line"></span><br><span class="line">I. 引言</span><br><span class="line">   A. 网红经济的崛起与大学生消费者的概述</span><br><span class="line">   B. 大学生网红消费现象的重要性及研究背景</span><br><span class="line">   C. 文章的研究目的和意义</span><br><span class="line"></span><br><span class="line">II. 大学生网红消费者群体特征分析</span><br><span class="line">   A. 年龄、性别、专业等人口统计学特征</span><br><span class="line">   B. 大学生的网络使用习惯与社交媒体偏好</span><br><span class="line">   C. 大学生对网红的认可度与信任度</span><br><span class="line"></span><br><span class="line">III. 大学生网红消费行为的特点</span><br><span class="line">   A. 消费动机：从娱乐消遣到购物决策的影响</span><br><span class="line">   B. 消费品类偏向：时尚穿搭、美妆护肤、电子产品等方面的消费情况</span><br><span class="line">   C. 跟风消费与个性化消费需求的平衡</span><br><span class="line">   D. 情感因素在购买决策中的作用</span><br><span class="line"></span><br><span class="line">IV. 网红对大学生消费行为的影响机制</span><br><span class="line">   A. 网红的影响力来源：内容创作能力、人格魅力、口碑效应等</span><br><span class="line">   B. 网红营销策略对大学生消费心理的影响：情感共鸣、生活方式塑造、意见领袖角色</span><br><span class="line">   C. 网红广告与软性推广对大学生消费选择的引导</span><br><span class="line"></span><br><span class="line">V. 大学生网红消费行为的社会文化影响</span><br><span class="line">   A. 对大学生价值观塑造的影响</span><br><span class="line">   B. 社会审美趋势与消费观念的变化</span><br><span class="line">   C. 对校园文化和市场经济发展的启示</span><br><span class="line"></span><br><span class="line">VI. 结论</span><br><span class="line">   A. 大学生网红消费行为的主要特点及其成因总结</span><br><span class="line">   B. 对教育部门、企业、网红自身以及社会各方面应对大学生网红消费行为进行合理引导和规范的建议</span><br><span class="line">   C. 展望未来研究方向与可能性</span><br><span class="line"></span><br><span class="line">这个大纲旨在全面探讨大学生网红消费行为的现象、特点、成因以及其背后的社会文化影响，并针对相关各方提出有针对性的思考与建议。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面就是每个章节对应的内容</span></span><br><span class="line"></span><br><span class="line">I. 引言</span><br><span class="line">A. 网红经济的崛起与大学生消费者的概述</span><br><span class="line">随着互联网技术的发展和社交媒体平台的普及，网红经济作为一种新型商业模式在全球范围内迅速崛起。大学生作为网络主力军和新兴消费群体，他们对于网红的追捧和消费行为成为当前市场关注的热点。这一现象不仅反映出了网红经济的巨大潜力，也揭示了大学生在消费观念和行为上的新变化。</span><br><span class="line"></span><br><span class="line">B. 大学生网红消费现象的重要性及研究背景</span><br><span class="line">大学生网红消费现象日益普遍，其背后的消费心理、消费行为模式以及对社会文化的影响具有重要研究价值。通过深入探究这一现象，有助于理解新一代消费者的消费趋势，为相关企业和政策制定者提供针对性的策略指导。</span><br><span class="line"></span><br><span class="line">C. 文章的研究目的和意义</span><br><span class="line">本文旨在通过系统地研究大学生网红消费行为，揭示其特征、成因及其社会文化影响，为教育部门、企业、网红自身乃至整个社会提供理性应对这一现象的思路和建议，同时对未来相关研究领域的发展方向进行展望。</span><br><span class="line"></span><br><span class="line">II. 大学生网红消费者群体特征分析</span><br><span class="line">A. 年龄、性别、专业等人口统计学特征</span><br><span class="line">以在校大学生为主体的年轻消费人群主要集中在<span class="number">18</span>-<span class="number">24</span>岁年龄段，男女比例相对均衡，不同专业的学生可能由于兴趣爱好、审美取向等因素，在网红消费上表现出一定的差异。</span><br><span class="line"></span><br><span class="line">B. 大学生的网络使用习惯与社交媒体偏好</span><br><span class="line">当代大学生是互联网的重度使用者，他们在日常生活中广泛依赖于社交媒体平台获取信息、交流互动和娱乐休闲。尤其偏爱短视频、直播、微博等新媒体形式，这为网红传播内容提供了广阔的受众基础。</span><br><span class="line"></span><br><span class="line">C. 大学生对网红的认可度与信任度</span><br><span class="line">大学生普遍认为网红具备较高的潮流引领力和社交影响力，对于具有一定专业素养和亲和力的网红更容易产生认同感和信赖感，从而将其推荐的产品或服务纳入自己的消费考虑范围。</span><br><span class="line"></span><br><span class="line">III. 大学生网红消费行为的特点</span><br><span class="line">A. 消费动机：从娱乐消遣到购物决策的影响</span><br><span class="line">大学生在关注网红的过程中，最初可能出于娱乐消遣的需求，但逐渐地，网红所展示的生活方式、时尚品味以及产品体验等内容会影响他们的购物决策，使得消费行为由单纯的观赏转变为实际购买行为。</span><br><span class="line"></span><br><span class="line">B. 消费品类偏向：时尚穿搭、美妆护肤、电子产品等方面的消费情况</span><br><span class="line">大学生网红消费行为中，时尚穿搭、美妆护肤和个人电子产品是最常见的消费类别。这些商品往往与年轻人追求个性化、时尚化和高品质生活的需求相契合。</span><br><span class="line"></span><br><span class="line">C. 跟风消费与个性化消费需求的平衡</span><br><span class="line">大学生在网红消费过程中，既存在跟风模仿的现象，也注重个性表达和自我风格的塑造。他们会在一定程度上接受网红推荐的商品和服务，同时也根据个人喜好和实际情况做出选择，实现跟风与个性需求的动态平衡。</span><br><span class="line"></span><br><span class="line">D. 情感因素在购买决策中的作用</span><br><span class="line">大学生消费者在网红购物决策中情感因素占据较大比重，包括对网红本人的情感认同、对网红所构建生活方式的向往以及与其他粉丝间的社交关系等因素都会影响到购买行为。</span><br><span class="line"></span><br><span class="line">IV. 网红对大学生消费行为的影响机制</span><br><span class="line">A. 网红的影响力来源：内容创作能力、人格魅力、口碑效应等</span><br><span class="line">网红的影响力源于其独特的内容创作能力、鲜明的个性特质以及良好的口碑效应。他们通过高质量的内容输出，吸引并维系粉丝群体，进而转化为商业价值。</span><br><span class="line"></span><br><span class="line">B. 网红营销策略对大学生消费心理的影响：情感共鸣、生活方式塑造、意见领袖角色</span><br><span class="line">网红运用情感共鸣、生活方式展示以及意见领袖的角色定位，巧妙地将产品融入其中，激发大学生消费者的心理共鸣，形成潜在购买意愿，并推动实际消费行为的发生。</span><br><span class="line"></span><br><span class="line">C. 网红广告与软性推广对大学生消费选择的引导</span><br><span class="line">网红借助广告植入、品牌合作等形式进行商品推广，这种隐性且易于接受的营销手段在很大程度上左右了大学生的消费选择。</span><br><span class="line"></span><br><span class="line">V. 大学生网红消费行为的社会文化影响</span><br><span class="line">A. 对大学生价值观塑造的影响</span><br><span class="line">大学生网红消费行为促进了他们对美的追求、个性化意识的觉醒以及对品质生活的向往，进一步塑造了新一代消费者的消费价值观。</span><br><span class="line"></span><br><span class="line">B. 社会审美趋势与消费观念的变化</span><br><span class="line">随着大学生对网红消费的积极参与，他们的审美情趣和消费观念逐渐成为社会审美趋势的重要组成部分，进一步推动着社会整体消费观念的变革与发展。</span><br><span class="line"></span><br><span class="line">C. 对校园文化和市场经济发展的启示</span><br><span class="line">大学生网红消费行为不仅反映了当前市场经济环境下消费结构和消费行为的新变化，也为校园文化的多元化发展提供了新的视角与启示。</span><br><span class="line"></span><br><span class="line">VI. 结论</span><br><span class="line">A. 大学生网红消费行为的主要特点及其成因总结</span><br><span class="line">通过对大学生网红消费行为的研究，我们发现其主要特点包括高度活跃的社交媒体参与、强烈的情感驱动消费、紧跟潮流且兼顾个性化的消费需求以及深受网红营销策略的影响。这些特点的背后成因主要包括大学生独特的年龄特征、网络环境下的信息接收方式以及网红影响力的多重作用。</span><br><span class="line"></span><br><span class="line">B. 对教育部门、企业、网红自身以及社会各方面应对大学生网红消费行为进行合理引导和规范的建议</span><br><span class="line">教育部门应加强对大学生消费观的引导教育，培养他们的理性消费意识；企业应充分认识到网红营销的价值，合理利用网红资源，同时严格遵守相关法律法规，确保营销活动的合法合规；网红自身则需保持职业操守，传递正能量，发挥好榜样作用；社会各界也应对网红经济持开放包容态度，强化监管与自律相结合，共同营造健康有序的网红消费环境。</span><br><span class="line"></span><br><span class="line">C. 展望未来研究方向与可能性</span><br><span class="line">未来的研究可以从更微观的层面深入剖析大学生网红消费行为的内在机理，探究不同个体之间消费差异的具体原因；也可以着眼于全球视野，对比国内外大学生网红消费现象的异同和发展趋势；此外，还可以探讨如何结合新技术应用，如大数据、人工智能等，更好地理解和引导大学生网红消费行为。</span><br></pre></td></tr></table></figure><h2 id="多链组合">多链组合</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains import LLMChain, SequentialChain</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms.tongyi import Tongyi</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts import ChatPromptTemplate</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1903ddb520ac4637a1d36b2f93e0aa4c&quot;</span></span><br><span class="line"></span><br><span class="line">llm = Tongyi()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子链1</span></span><br><span class="line"><span class="comment"># prompt模板 1: 翻译成英语（把下面的review翻译成英语）</span></span><br><span class="line">first_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;把下面的评论review翻译成中文:&quot;</span></span><br><span class="line">    <span class="string">&quot;\n\n&#123;Review&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># chain 1: 输入：Review    输出：中文的 Review</span></span><br><span class="line">chain_one = LLMChain(<span class="attribute">llm</span>=llm, <span class="attribute">prompt</span>=first_prompt, <span class="attribute">output_key</span>=<span class="string">&quot;Chinese_Review&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子链2</span></span><br><span class="line"><span class="comment"># prompt模板 2: 用一句话总结下面的 review</span></span><br><span class="line">second_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;请你用一句话来总结下面的评论review:&quot;</span></span><br><span class="line">    <span class="string">&quot;\n\n&#123;Chinese_Review&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># chain 2: 输入：中文的Review   输出：总结</span></span><br><span class="line">chain_two = LLMChain(<span class="attribute">llm</span>=llm, <span class="attribute">prompt</span>=second_prompt, <span class="attribute">output_key</span>=<span class="string">&quot;summary&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子链3</span></span><br><span class="line"><span class="comment"># prompt模板 3: 下面review使用的什么语言</span></span><br><span class="line">third_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;下面的评论review使用的什么语言:\n\n&#123;Review&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># chain 3: 输入：Review  输出：语言</span></span><br><span class="line">chain_three = LLMChain(<span class="attribute">llm</span>=llm, <span class="attribute">prompt</span>=third_prompt, <span class="attribute">output_key</span>=<span class="string">&quot;language&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子链4</span></span><br><span class="line"><span class="comment"># prompt模板 4: 使用特定的语言对下面的总结写一个后续回复</span></span><br><span class="line">fourth_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;使用特定的语言对下面的总结写一个后续回复:&quot;</span></span><br><span class="line">    <span class="string">&quot;\n\n总结: &#123;summary&#125;\n\n语言: &#123;language&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># chain 4: 输入： 总结, 语言    输出： 后续回复</span></span><br><span class="line">chain_four = LLMChain(<span class="attribute">llm</span>=llm, <span class="attribute">prompt</span>=fourth_prompt, <span class="attribute">output_key</span>=<span class="string">&quot;followup_message&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入：review</span></span><br><span class="line"><span class="comment">#输出：中文review，总结，后续回复</span></span><br><span class="line">overall_chain = SequentialChain(</span><br><span class="line">    chains=[chain_one, chain_two, chain_three, chain_four],</span><br><span class="line">    input_variables=[<span class="string">&quot;Review&quot;</span>],</span><br><span class="line">    output_variables=[<span class="string">&quot;Chinese_Review&quot;</span>, <span class="string">&quot;summary&quot;</span>, <span class="string">&quot;followup_message&quot;</span>, <span class="string">&quot;language&quot;</span>],</span><br><span class="line">    <span class="attribute">verbose</span>=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text = input(<span class="string">&quot;请输入内容：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(overall_chain.invoke(&#123;<span class="string">&quot;Review&quot;</span>: text&#125;))</span><br></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/02/24/pFUftjf.png" alt=""></p><h2 id="路由链">路由链</h2><ul><li>前面的链的输入顺序基本上都是固定的，如果想做更复杂的事情，就需要根据输入将其路由到特定的链。假设你有多个子链，每个子链都专门用于特定类型的输入，那么可以组成一个路由链</li><li>路由器由两个组件组成：<ol><li>路由链（Router Chain）：路由器链本身，负责选择要调用的下一个链</li><li>destination_chains：路由器链可以路由到的链</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain, MultiPromptChain</span><br><span class="line"><span class="keyword">from</span> langchain.chains.router.llm_router <span class="keyword">import</span> RouterOutputParser, LLMRouterChain</span><br><span class="line"><span class="keyword">from</span> langchain.chains.router.multi_prompt_prompt <span class="keyword">import</span> MULTI_PROMPT_ROUTER_TEMPLATE</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms.tongyi <span class="keyword">import</span> Tongyi</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate, PromptTemplate</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1903ddb520ac4637a1d36b2f93e0aa4c&quot;</span></span><br><span class="line"></span><br><span class="line">llm = Tongyi()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义多种提示模板</span></span><br><span class="line"><span class="comment"># 第一个提示适合回答物理问题</span></span><br><span class="line">physics_template = <span class="string">&quot;&quot;&quot;你是一个非常聪明的物理专家。 \</span></span><br><span class="line"><span class="string">你擅长用一种简洁并且易于理解的方式去回答问题。\</span></span><br><span class="line"><span class="string">当你不知道问题的答案时，你承认\</span></span><br><span class="line"><span class="string">你不知道.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这是一个问题:</span></span><br><span class="line"><span class="string">&#123;input&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个提示适合回答数学问题</span></span><br><span class="line">math_template = <span class="string">&quot;&quot;&quot;你是一个非常优秀的数学家。 \</span></span><br><span class="line"><span class="string">你擅长回答数学问题。 \</span></span><br><span class="line"><span class="string">你之所以如此优秀， \</span></span><br><span class="line"><span class="string">是因为你能够将棘手的问题分解为组成部分，\</span></span><br><span class="line"><span class="string">回答组成部分，然后将它们组合在一起，回答更广泛的问题。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这是一个问题：</span></span><br><span class="line"><span class="string">&#123;input&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个适合回答历史问题</span></span><br><span class="line">history_template = <span class="string">&quot;&quot;&quot;你是以为非常优秀的历史学家。 \</span></span><br><span class="line"><span class="string">你对一系列历史时期的人物、事件和背景有着极好的学识和理解\</span></span><br><span class="line"><span class="string">你有能力思考、反思、辩证、讨论和评估过去。\</span></span><br><span class="line"><span class="string">你尊重历史证据，并有能力利用它来支持你的解释和判断。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这是一个问题:</span></span><br><span class="line"><span class="string">&#123;input&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四个适合回答计算机问题</span></span><br><span class="line">computerscience_template = <span class="string">&quot;&quot;&quot; 你是一个成功的计算机科学专家。\</span></span><br><span class="line"><span class="string">你有创造力、协作精神、\</span></span><br><span class="line"><span class="string">前瞻性思维、自信、解决问题的能力、\</span></span><br><span class="line"><span class="string">对理论和算法的理解以及出色的沟通技巧。\</span></span><br><span class="line"><span class="string">你非常擅长回答编程问题。\</span></span><br><span class="line"><span class="string">你之所以如此优秀，是因为你知道  \</span></span><br><span class="line"><span class="string">如何通过以机器可以轻松解释的命令式步骤描述解决方案来解决问题，\</span></span><br><span class="line"><span class="string">并且你知道如何选择在时间复杂性和空间复杂性之间取得良好平衡的解决方案。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这还是一个问题：</span></span><br><span class="line"><span class="string">&#123;input&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每个模板命名，并且给出具体描述，将这些信息传递给路由链，路由链决定何时调用子链</span></span><br><span class="line">prompt_infos = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;名字&quot;</span>: <span class="string">&quot;物理学&quot;</span>,</span><br><span class="line">        <span class="string">&quot;描述&quot;</span>: <span class="string">&quot;擅长回答关于物理学的问题&quot;</span>,</span><br><span class="line">        <span class="string">&quot;提示模板&quot;</span>: physics_template</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;名字&quot;</span>: <span class="string">&quot;数学&quot;</span>,</span><br><span class="line">        <span class="string">&quot;描述&quot;</span>: <span class="string">&quot;擅长回答数学问题&quot;</span>,</span><br><span class="line">        <span class="string">&quot;提示模板&quot;</span>: math_template</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;名字&quot;</span>: <span class="string">&quot;历史&quot;</span>,</span><br><span class="line">        <span class="string">&quot;描述&quot;</span>: <span class="string">&quot;擅长回答历史问题&quot;</span>,</span><br><span class="line">        <span class="string">&quot;提示模板&quot;</span>: history_template</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;名字&quot;</span>: <span class="string">&quot;计算机科学&quot;</span>,</span><br><span class="line">        <span class="string">&quot;描述&quot;</span>: <span class="string">&quot;擅长回答计算机科学问题&quot;</span>,</span><br><span class="line">        <span class="string">&quot;提示模板&quot;</span>: computerscience_template</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于提示模版信息创建相应目标链</span></span><br><span class="line">destination_chains = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> p_info <span class="keyword">in</span> prompt_infos:</span><br><span class="line">    name = p_info[<span class="string">&quot;名字&quot;</span>]</span><br><span class="line">    prompt_template = p_info[<span class="string">&quot;提示模板&quot;</span>]</span><br><span class="line">    prompt = ChatPromptTemplate.from_template(template=prompt_template)</span><br><span class="line">    chain = LLMChain(llm=llm, prompt=prompt)</span><br><span class="line">    destination_chains[name] = chain</span><br><span class="line"></span><br><span class="line">destinations = [<span class="string">f&quot;<span class="subst">&#123;p[<span class="string">&#x27;名字&#x27;</span>]&#125;</span>: <span class="subst">&#123;p[<span class="string">&#x27;描述&#x27;</span>]&#125;</span>&quot;</span> <span class="keyword">for</span> p <span class="keyword">in</span> prompt_infos]</span><br><span class="line">destinations_str = <span class="string">&quot;\n&quot;</span>.join(destinations)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建默认目标链，当路由器无法决定使用哪个子链时调用的链。</span></span><br><span class="line">default_prompt = ChatPromptTemplate.from_template(<span class="string">&quot;&#123;input&#125;&quot;</span>)</span><br><span class="line">default_chain = LLMChain(llm=llm, prompt=default_prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建路由链</span></span><br><span class="line">router_template = MULTI_PROMPT_ROUTER_TEMPLATE.<span class="built_in">format</span>(destinations=destinations_str)</span><br><span class="line"></span><br><span class="line">router_prompt = PromptTemplate(</span><br><span class="line">    template=router_template,</span><br><span class="line">    input_variables=[<span class="string">&quot;input&quot;</span>],</span><br><span class="line">    output_parser=RouterOutputParser(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">router_chain = LLMRouterChain.from_llm(llm, router_prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建整体链路</span></span><br><span class="line">chain = MultiPromptChain(router_chain=router_chain,  <span class="comment"># 路由链路</span></span><br><span class="line">                         destination_chains=destination_chains,  <span class="comment"># 目标链路</span></span><br><span class="line">                         default_chain=default_chain,  <span class="comment"># 默认链路</span></span><br><span class="line">                         verbose=<span class="literal">True</span></span><br><span class="line">                         )</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    que = <span class="built_in">input</span>(<span class="string">&quot;请输入问题：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: que&#125;))</span><br></pre></td></tr></table></figure><ul><li>后续我们可以预定义非常多的prompt，然后通过路由链来进行任务分发，尽可能把任务细分，这样出现问题时，只需要关注对应的某一个prompt，而不需要整体的改动。</li></ul><h1>代理的概念（补充）</h1><ul><li><p>大型语言模型（LLMs）非常强大，但它们缺乏“最笨”的计算机程序可以轻松处理的特定能力。LLM 对逻辑推理、计算和检索外部信息的能力较弱，这与最简单的计算机程序形成对比。例如，语言模型无法准确回答简单的计算问题，还有当询问最近发生的事件时，其回答也可能过时或错误，因为无法主动获取最新信息。这是由于当前语言模型仅依赖预训练数据，与外界“断开”。要克服这一缺陷，LangChain框架提出了“代理”(Agent)的解决方案。</p></li><li><p>代理作为语言模型的外部模块，可提供计算、逻辑、检索等功能的支持，使语言模型获得异常强大的推理和获取信息的超能力。</p></li><li><p>要使用代理 (Agents) ，我们需要三样东西：</p><ol><li>一个基本的 LLM</li><li>我们将要进行交互的工具 Tools</li><li>一个控制交互的代理 (Agents) 。</li></ol><ul><li>现在尝试使用代理来解决数学问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> load_tools, initialize_agent, AgentType</span><br><span class="line"><span class="keyword">from</span> langchain_community.llms.tongyi <span class="keyword">import</span> Tongyi</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1903ddb520ac4637a1d36b2f93e0aa4c&quot;</span></span><br><span class="line"></span><br><span class="line">llm = Tongyi()</span><br><span class="line"></span><br><span class="line">tools = load_tools(</span><br><span class="line">    [<span class="string">&quot;llm-math&quot;</span>, <span class="string">&quot;wikipedia&quot;</span>],</span><br><span class="line">    llm=llm</span><br><span class="line">)</span><br><span class="line">agent = initialize_agent(</span><br><span class="line">    tools,  <span class="comment"># 第二步加载的工具</span></span><br><span class="line">    llm,  <span class="comment"># 第一步初始化的模型</span></span><br><span class="line">    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,  <span class="comment"># 代理类型</span></span><br><span class="line">    handle_parsing_errors=<span class="literal">True</span>,  <span class="comment"># 处理解析错误</span></span><br><span class="line">    verbose=<span class="literal">True</span>  <span class="comment"># 输出中间步骤</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">agent.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;2084的25%是多少？还有，你知道Palworld这款游戏吗&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>输出</p><blockquote><p>Thought: 第一个问题需要计算2084的25%，可以使用计算器工具；第二个问题询问关于Palworld这款游戏的信息，需要用到Wikipedia工具。</p><p>Action:</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Calculator&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action_input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2084 * 25%&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Observation: Answer: 521.0<br>Thought:对于第二个问题，我需要使用Wikipedia工具来查询Palworld这款游戏的信息。<br>Action:</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wikipedia&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action_input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Palworld&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Observation: Page: Palworld<br>Summary: Palworld is an action-adventure survival game by Japanese developer Pocket Pair. The game is set in an open world populated with animal-like creatures known as “Pals”. The players can battle and capture Pals in order to use them for base building, traversal, and combat. Palworld can be played either solo, or online by up to 32 players on one server. Announced in 2021, it was launched via early access for Windows, Xbox One, and Xbox Series X/S in January 2024.<br>The game’s comedic premise, which involves using firearms and equipping Pals with them, earned it the nickname “Pokémon with guns”. Other elements, such as using creatures for food or placing them to work in mines and factories, have also garnered attention. It was generally well received, with praise for its gameplay, content, and satirical premise, but criticism for its reliance on shock humor and use of unoriginal designs and mechanics.Palworld sold eight million units in the first six days of early access and reached two million concurrent players on Steam, making it the second-highest played game of all time on the platform.</p><p>Page: Brotato<br>Summary: Brotato is a 2023 shoot 'em up video game created by French independent developer Thomas Gervraud under the studio name Blobfish. It was first released via Steam early access in 2022, during which it sold over one million copies. Brotato received positive reviews from critics and players, and it was later ported to multiple platforms.</p><p>Page: List of video games in development<br>Summary: This is a confirmed list of video games in development, but are scheduled for release beyond 2024 or currently carry no release date at all.</p></blockquote></li><li><p>总结一下上面的流程<br><img src="https://s11.ax1x.com/2024/02/24/pFUfYgP.png" alt=""></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;什么是LangChain&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;LangChain是一个强大的框架，旨在帮助开发人员使用语言模型构建端到端的应用程序。它提供了一套工具、组件和接口，可简化创建由大型语言模型 (LLM) 和聊天模型提供支持的应用程序的过程。LangChain 可以轻松</summary>
      
    
    
    
    <category term="实用教程" scheme="https://cyborg2077.github.io/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="LangChain" scheme="https://cyborg2077.github.io/tags/LangChain/"/>
    
  </entry>
  
  <entry>
    <title>SELECT FOR UPDATE的锁粒度</title>
    <link href="https://cyborg2077.github.io/2023/12/31/SelectForUpdate/"/>
    <id>https://cyborg2077.github.io/2023/12/31/SelectForUpdate/</id>
    <published>2023-12-31T14:59:55.000Z</published>
    <updated>2024-01-14T12:06:36.159Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>在数据库事务处理中，处理数据库并发访问的请求一个复杂且重要的问题，当多个事务同时访问并尝试修改同一行数据时，可能会导致数据的一致性问题，例如丢失更新或脏读的情况。为了解决这些问题，数据库提供了一些机处理并发事务，其中之一便是<code>SELECT ... FOR UPDATE</code>语句。</li><li>在并发访问的环境中，<code>SELECT ... FOR UPDATE</code>允许事务在选择数据的同时，锁定这些数据，防止其他事务<code>修改</code>这些数据，直到当前事务完成并释放锁。从本质上，<code>SELECT ... FOR UPDATE</code>是一种悲锁的用法，一般情况下，只会锁住一行数据，但是如果没有正确使用的话，会把整张表都锁住的。</li><li>我也在实际项目中使用过，例如免费字数抵扣金额下单的场景。</li></ul><h1>实践</h1><ul><li>虽然在MySQL中是通过<code>SELECT ... FOR UPDATE</code>语句来实现的行锁的功能。但是如果你在实际工作中使用不正确，也容易把整张表锁住，严重影响性能。<code>SELECT ... FOR UPDATE</code>语句的用法是否正确，跟<code>WHERE条件</code>中的参数有很大的关系。我们先来简单建个表，然后分析一下下面几种情况。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_info (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,             <span class="comment">-- 主键</span></span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">UNIQUE</span>,   <span class="comment">-- 唯一索引</span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    <span class="comment">-- 普通索引</span></span><br><span class="line">    amount <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),          <span class="comment">-- 普通字段</span></span><br><span class="line">    INDEX idx_email (email)         </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (id, username, email, amount)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;john_doe&#x27;</span>, <span class="string">&#x27;john.doe@example.com&#x27;</span>, <span class="number">500.00</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;alice_smith&#x27;</span>, <span class="string">&#x27;alice.smith@example.com&#x27;</span>, <span class="number">1000.00</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;bob_jones&#x27;</span>, <span class="string">&#x27;bob.jones@example.com&#x27;</span>, <span class="number">1500.00</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">&#x27;lisa_davis&#x27;</span>, <span class="string">&#x27;lisa.davis@example.com&#x27;</span>, <span class="number">2000.00</span>),</span><br><span class="line">  (<span class="number">5</span>, <span class="string">&#x27;charlie_brown&#x27;</span>, <span class="string">&#x27;charlie.brown@example.com&#x27;</span>, <span class="number">2500.00</span>);</span><br></pre></td></tr></table></figure><h2 id="主键字段">主键字段</h2><ul><li>当<code>WHERE</code>条件使用主键时</li></ul><div class="tabs" id="主键"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主键-1">事务一</button></li><li class="tab"><button type="button" data-href="#主键-2">事务二</button></li><li class="tab"><button type="button" data-href="#主键-3">事务三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主键-1"><ul><li>在事务一中使用<code>FOR UPDATE</code>，加一个行锁，注意此时没有<code>COMMIT</code>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;  <span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;  <span class="comment">-- 加行锁</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-2"><ul><li>在事务二中尝试修改该行，那么在执行的过程中，会一直等待事务一释放锁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>如果事务一，一直都不释放锁，那么事务二最终会报这个异常</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_info SET amount = 10000 WHERE id = 1</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1205</span> - <span class="title class_">Lock</span> wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">查询时间: <span class="number">50.</span>086s</span></span><br></pre></td></tr></table></figure><ul><li>当事务一提交事务后，事务二才能正常执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-3"><ul><li>如果此时开启一个事务三，修改其他行的值，那么是可以正常执行的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_info SET amount = 10000 WHERE id = 2</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Affected</span> <span class="attr">rows</span>: <span class="number">1</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">查询时间: <span class="number">0.</span>009s</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="唯一索引">唯一索引</h2><ul><li>当<code>WHERE</code>条件使用唯一索引时</li></ul><div class="tabs" id="主键"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主键-1">事务一</button></li><li class="tab"><button type="button" data-href="#主键-2">事务二</button></li><li class="tab"><button type="button" data-href="#主键-3">事务三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主键-1"><ul><li>在事务一中使用<code>FOR UPDATE</code>，加一个行锁，注意此时没有<code>COMMIT</code>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;john_doe&#x27;</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-2"><ul><li>在事务二中尝试修改该行，那么在执行的过程中，会一直等待事务一释放锁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;john_doe&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>如果事务一，一直都不释放锁，那么事务二最终会报这个异常</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount = <span class="number">10000</span> <span class="keyword">WHERE</span> username = <span class="string">&#x27;john_doe&#x27;</span></span><br><span class="line">&gt; <span class="number">1205</span> - <span class="keyword">Lock</span> wait timeout exceeded; try restarting <span class="keyword">transaction</span></span><br><span class="line">&gt; 查询时间: <span class="number">50.084</span>s</span><br></pre></td></tr></table></figure><ul><li>当事务一提交事务后，事务二才能正常执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-3"><ul><li>如果此时开启一个事务三，修改其他行的值，那么是可以正常执行的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;alice_smith&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;alice_smith&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> Affected <span class="keyword">rows</span>: <span class="number">1</span></span><br><span class="line"><span class="operator">&gt;</span> 查询时间: <span class="number">0.002</span>s</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="普通索引">普通索引</h2><ul><li>当<code>WHERE</code>条件使用普通索引时</li></ul><div class="tabs" id="主键"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主键-1">事务一</button></li><li class="tab"><button type="button" data-href="#主键-2">事务二</button></li><li class="tab"><button type="button" data-href="#主键-3">事务三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主键-1"><ul><li>在事务一中使用<code>FOR UPDATE</code>，加一个行锁，注意此时没有<code>COMMIT</code>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;john.doe@example.com&#x27;</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-2"><ul><li>在事务二中尝试修改该行，那么在执行的过程中，会一直等待事务一释放锁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;john.doe@example.com&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>如果事务一，一直都不释放锁，那么事务二最终会报这个异常</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount = <span class="number">1000</span> <span class="keyword">WHERE</span> email = <span class="string">&#x27;john.doe@example.com&#x27;</span></span><br><span class="line">&gt; <span class="number">1205</span> - <span class="keyword">Lock</span> wait timeout exceeded; try restarting <span class="keyword">transaction</span></span><br><span class="line">&gt; 查询时间: <span class="number">50.082</span>s</span><br></pre></td></tr></table></figure><ul><li>当事务一提交事务后，事务二才能正常执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-3"><ul><li>如果此时开启一个事务三，修改其他行的值，那么是可以正常执行的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;alice.smith@example.com&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;alice.smith@example.com&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> Affected <span class="keyword">rows</span>: <span class="number">1</span></span><br><span class="line"><span class="operator">&gt;</span> 查询时间: <span class="number">0.003</span>s</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="普通字段">普通字段</h2><ul><li>当<code>WHERE</code>条件使用普通字段时</li></ul><div class="tabs" id="主键"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主键-1">事务一</button></li><li class="tab"><button type="button" data-href="#主键-2">事务二</button></li><li class="tab"><button type="button" data-href="#主键-3">事务三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主键-1"><ul><li>在事务一中使用<code>FOR UPDATE</code>，加一个行锁，注意此时没有<code>COMMIT</code>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> amount <span class="operator">=</span> <span class="number">2500</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-2"><ul><li>在事务二中尝试修改该行，那么在执行的过程中，会一直等待事务一释放锁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> amount <span class="operator">=</span> <span class="number">2500</span>;</span><br></pre></td></tr></table></figure><ul><li>如果事务一，一直都不释放锁，那么事务二最终会报这个异常</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_info SET amount = 1000 WHERE amount = 2500</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1205</span> - <span class="title class_">Lock</span> wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">查询时间: <span class="number">50.</span>17s</span></span><br></pre></td></tr></table></figure><ul><li>当事务一提交事务后，事务二才能正常执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主键-3"><ul><li>如果此时开启一个事务三，修改其他行的值，会发现也是被阻塞了的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_info <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> amount <span class="operator">=</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_info SET amount = 1000 WHERE amount = 2000</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1205</span> - <span class="title class_">Lock</span> wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">查询时间: <span class="number">50.</span>083s</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>结论</h1><ul><li>总结一下<code>SELECT ... FOR UPDATE</code>加锁的情况：<ul><li>主键字段：加行锁。</li><li>唯一索引字段：加行锁。</li><li>普通索引字段：加行锁。</li><li>普通字段：加表锁。</li></ul></li><li>如果事务一加了<code>行锁</code>，一直没有释放锁，事务二操作相同行的数据时，会一直等待直到超时。</li><li>如果事务一加了<code>表锁</code>，一直没有释放锁，事务二不管操作的是哪一行数据，都会一直等待直到超时。</li></ul>]]></content>
    
    
    <summary type="html">SELECT ... FOR UPDATE 到底是加了行锁还是表锁？</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="MySQL" scheme="https://cyborg2077.github.io/tags/MySQL/"/>
    
    <category term="知识分享" scheme="https://cyborg2077.github.io/tags/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>模拟ChatGPT流式数据--SSE最佳实践（附可运行实例）</title>
    <link href="https://cyborg2077.github.io/2023/11/25/ServerSendEvents/"/>
    <id>https://cyborg2077.github.io/2023/11/25/ServerSendEvents/</id>
    <published>2023-11-25T04:21:49.000Z</published>
    <updated>2024-02-24T03:18:26.518Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><ul><li>在使用ChatGPT的时候，发现输入prompt后，是使用流式的效果返回数据，给用户的是一个打字机的效果。查看其网络请求，发现这个接口的通响应类型是<code>text/event-stream</code>，一种基于EventStream的事件流。<br><img src="https://z1.ax1x.com/2023/11/25/piwzPk8.png" alt=""></li><li>那么为什么要这样传输呢？从使用场景上来说，ChatGPT是一个基于深度学习的大型语言模型，处理自然语言需要大量的计算资源和时间，那么响应速度肯定是比一般业务要慢的，那么接口等待时间过长，显然也不合适，那么对于这种对话场景，采用SSE技术边计算边返回，避免用户因为等待时间过长而关闭页面。</li></ul><h1>概述</h1><div class="note info no-icon flat"><p>SSE(Server Sent Event)，直译为服务器发送事件，也就是服务器主动发送事件，客户端可以获取到服务器发送的事件。</p></div><ul><li>常见的HTTP交互方式主要是客户端发起请求，然后服务端响应，然后一次性请求完毕。但是在SSE的使用场景下，客户端发起请求，然后建立SSE连接一直保持，服务端就可以返回数据给客户端。</li><li>SSE简单来说就是服务器主动向前端推送数据的一种技术，它是单向的。SSE适用于消息推送、监控等只需要服务端推送数据的场景中。</li></ul><h1>特点</h1><ul><li>服务端主动推送<ol><li>HTML5新标准，用于从服务端试试推送数据到浏览器端。</li><li>直接建立在当前HTTP连接上，本质上是一个HTTP长连接。</li></ol></li></ul><h1>SSE与WebSocket的区别</h1><ul><li>SSE是单工的，只能由服务端想客户端发送消息，而WebSocket是双工的</li></ul><table><thead><tr><th style="text-align:center">SSE</th><th style="text-align:center">WebScoket</th></tr></thead><tbody><tr><td style="text-align:center">http 协议</td><td style="text-align:center">独立的 websocket 协议</td></tr><tr><td style="text-align:center">轻量，使用简单</td><td style="text-align:center">相对复杂</td></tr><tr><td style="text-align:center">默认支持断线重连</td><td style="text-align:center">需要自己实现断线重连</td></tr><tr><td style="text-align:center">文本传输</td><td style="text-align:center">二进制传输</td></tr><tr><td style="text-align:center">支持自定义发送的消息类型</td><td style="text-align:center">-</td></tr></tbody></table><h1>SSE规范</h1><ul><li>在HTML5中，服务端SSE一般要遵循以下要求<ol><li>请求头：开启长连接 + 流式传递</li></ol>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-<span class="keyword">Type</span>: <span class="type">text</span>/event-stream;charset=UTF<span class="number">-8</span></span><br><span class="line"><span class="keyword">Cache</span>-Control: no-<span class="keyword">cache</span></span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><ol start="2"><li>数据格式：服务端发送的消息，由message组成，其格式如下</li></ol>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">field:</span>value</span><br></pre></td></tr></table></figure></li></ul><h1>SSE实践</h1><ul><li>这里简单做一个时钟效果，有服务端主动推送当前时间数据给前端，前端页面接收后展示。</li></ul><h2 id="SseEmitter类简介">SseEmitter类简介</h2><ul><li>SpringBoot使用SseEmitter来支持SSE，并对SSE规范做了一些封装，使用起来非常简单。我们在操作SseEmitter对象时，只需要关注发送的消息文本即可。</li><li>SseEmittter类的几个方法：<ol><li>send()：发送数据，如果传入的是一个非SseEventBuilder对象，那么传递参数会被封装到data中。</li><li>complete()：表示执行完成，会断开连接（如果是一些轮询进度的任务，我们可以在任务进度完成时，主动断开连接）</li><li>onTimeout()：连接超时时回调触发。</li><li>onCompletion()：结束之后的回调触发。</li><li>onError()：报错时的回调触发。</li></ol></li></ul><h2 id="示例Demo">示例Demo</h2><div class="tabs" id="sse时钟demo"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sse时钟demo-1">前端HTML</button></li><li class="tab"><button type="button" data-href="#sse时钟demo-2">后端接口</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sse时钟demo-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg_from_server&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> sse = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&quot;http://localhost/sse/hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    sse.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> eventVal = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg_from_server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        eventVal.<span class="property">innerHTML</span> = event.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sse时钟demo-2"><ul><li>后端接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.SseEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sse&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SseEmitter <span class="title function_">helloworld</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/event-stream&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                    sseEmitter.send(SseEmitter.event().data(LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>))));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Error in SSE: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">                sseEmitter.completeWithError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>大功告成<br><img src="https://z1.ax1x.com/2023/11/25/pi0EfLF.png" alt=""></li></ul><h2 id="注意事项">注意事项</h2><ul><li>这里的协议是<code>http/1.1</code>，仅支持6个连接数，而<code>HTTP/2</code>默认支持100个连接数，同时这里每30秒重新建立了一个新连接，这是SSE默认的连接超时时间，我们可以通过配置连接超时时间来达到不过期的目的，那么就需要我们在业务逻辑里<code>手动关闭连接</code>。</li><li>同时，每建立一个SSE连接的时候，都需要一个线程，那么这里就需要创建一个线程池来处理并发问题，同时也要根据自身的业务需求来做好压测。<br><img src="https://z1.ax1x.com/2023/11/25/pi0VFQf.png" alt=""></li><li>但是<code>HTTP/2</code>仅支持<code>HTTPS</code>，我这里就不演示了，感兴趣的小伙伴可以去了解一下使用OpenSSL生成一个<code>自签名的SSL证书</code></li></ul><h2 id="工具类封装">工具类封装</h2><ul><li>下面是我封装的一个简单的SseUtils</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.SseEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SseUtils</span> &#123;</span><br><span class="line">    <span class="comment">// timeout -&gt; 0表示不过期，默认是30秒，超过时间未完成（断开）会抛出异常</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEFAULT_TIME_OUT</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">// 会话map, 方便管理连接数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, SseEmitter&gt; conversationMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SseEmitter <span class="title function_">getConnect</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建SSE</span></span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>(DEFAULT_TIME_OUT);</span><br><span class="line">        <span class="comment">// 异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置前端重试时5s</span></span><br><span class="line">            sseEmitter.send(SseEmitter.event().reconnectTime(<span class="number">5_000L</span>).data(<span class="string">&quot;SSE建立成功&quot;</span>));</span><br><span class="line">            <span class="comment">// 连接超时</span></span><br><span class="line">            sseEmitter.onTimeout(() -&gt; SseUtils.timeout(conversationId));</span><br><span class="line">            <span class="comment">// 连接断开</span></span><br><span class="line">            sseEmitter.onCompletion(() -&gt; SseUtils.completion(conversationId));</span><br><span class="line">            <span class="comment">// 错误</span></span><br><span class="line">            sseEmitter.onError((e) -&gt; SseUtils.error(conversationId, e.getMessage()));</span><br><span class="line">            <span class="comment">// 添加sse</span></span><br><span class="line">            conversationMap.put(conversationId, sseEmitter);</span><br><span class="line">            <span class="comment">// 连接成功</span></span><br><span class="line">            log.info(<span class="string">&quot;创建sse连接成功 ==&gt; 当前连接总数=&#123;&#125;， 会话Id=&#123;&#125;&quot;</span>, conversationMap.size(), conversationId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 日志</span></span><br><span class="line">            log.error(<span class="string">&quot;前端重连异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取消息实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SseEmitter <span class="title function_">getInstance</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.get(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 断开连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        SseUtils.getInstance(conversationId).complete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给指定会话发送消息，如果发送失败，返回false</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonMsg        - 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(String conversationId, String jsonMsg)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断该会话是否已建立连接</span></span><br><span class="line">        <span class="comment">// 已建立连接</span></span><br><span class="line">        <span class="keyword">if</span> (SseUtils.getIsExistClientId(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                SseUtils.getInstance(conversationId).send(jsonMsg, MediaType.APPLICATION_JSON);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// 日志</span></span><br><span class="line">                SseUtils.removeClientId(conversationId);</span><br><span class="line">                log.error(<span class="string">&quot;发送消息异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未建立连接</span></span><br><span class="line">            log.error(<span class="string">&quot;连接不存在或者超时 ==&gt; 会话Id=&#123;&#125;会话自动关闭&quot;</span>, conversationId);</span><br><span class="line">            SseUtils.removeClientId(conversationId);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除会话Id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeClientId</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 不存在存在会话</span></span><br><span class="line">        <span class="keyword">if</span> (!SseUtils.getIsExistClientId(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除该会话</span></span><br><span class="line">        conversationMap.remove(conversationId);</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.info(<span class="string">&quot;移除会话成功 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取是否存在会话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getIsExistClientId</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.containsKey(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前连接总数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> - 连接总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getConnectTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;当前连接数：&#123;&#125;&quot;</span>, conversationMap.size());</span><br><span class="line">        <span class="keyword">for</span> (String s : conversationMap.keySet()) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;输出SSE-Map：&#123;&#125;&quot;</span>, conversationMap.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">timeout</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.error(<span class="string">&quot;sse连接超时 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtils.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">completion</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.info(<span class="string">&quot;sse连接已断开 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtils.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(String conversationId, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.error(<span class="string">&quot;sse服务异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, message);</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtils.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>还是用刚刚推送当前时间的例子，这里我们做一下主动关闭连接，我这里简单的逻辑就是遍历到一个整分，就停止推送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">timeStamp</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/event-stream&quot;</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 生成会话ID</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">conversationId</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">// 建立连接</span></span><br><span class="line">    <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> SseUtils.getConnect(conversationId);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                <span class="comment">// 向会话发送消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">timeStamp</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">                SseUtils.sendMessage(conversationId, timeStamp);</span><br><span class="line">                <span class="keyword">if</span> (timeStamp.endsWith(<span class="string">&quot;00&quot;</span>)) &#123;</span><br><span class="line">                    SseUtils.removeClientId(conversationId);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error in SSE: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            sseEmitter.completeWithError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">return</span> sseEmitter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>SSE实战</h1><ul><li>我这里也是在我项目里的轮询订单进度的时候尝试用了一下，因为我这个项目也是文本生成方向的，之前是前端定时轮询我这边的接口，现在换成我主动向前端推送数据，然后前端拿到数据自己解析内容就好了。这里用的工具类就是我刚刚封装的那个</li></ul><div class="tabs" id="实战"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#实战-1">Controller层</button></li><li class="tab"><button type="button" data-href="#实战-2">Service层</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="实战-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getOrderDetail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">getOrderDetailById</span><span class="params">(String orderId, HttpServletResponse httpServletResponse)</span> &#123;</span><br><span class="line">    httpServletResponse.setContentType(<span class="string">&quot;text/event-stream&quot;</span>);</span><br><span class="line">    httpServletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> orderService.getOrderDetailById(orderId, httpServletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="实战-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单来个线程池</span></span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">getOrderDetailById</span><span class="params">(String orderId, HttpServletResponse httpServletResponse)</span> &#123;</span><br><span class="line">    <span class="comment">// 建立连接</span></span><br><span class="line">    <span class="type">SseEmitter</span> <span class="variable">emitter</span> <span class="operator">=</span> SseUtils.getConnect(orderId);</span><br><span class="line">    executor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;=========SSE轮询中=========&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 每5秒推送一次数据</span></span><br><span class="line">                Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 查询订单数据</span></span><br><span class="line">            <span class="type">Torder</span> <span class="variable">torder</span> <span class="operator">=</span> orderMapper.selectOne(Wrappers.lambdaQuery(Torder.class).eq(Torder::getOrderId, orderId));</span><br><span class="line">            <span class="keyword">if</span> (torder == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果订单不存在，返回错误，主动断开连接</span></span><br><span class="line">                SseUtils.sendMessage(orderId, JSON.toJSONString(ErrorCodeEnum.ORDER_ID_NOT_EXIST));</span><br><span class="line">                SseUtils.removeClientId(orderId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">OrderDetailVO</span> <span class="variable">detailVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetailVO</span>();</span><br><span class="line">            detailVO.setIsExpire(stringRedisTemplate.opsForValue().get(orderId) == <span class="literal">null</span>);</span><br><span class="line">            detailVO.setOrderId(orderId);</span><br><span class="line">            detailVO.setCreateTime(torder.getCreateTime());</span><br><span class="line">            detailVO.setOrderType(torder.getPolishType());</span><br><span class="line">            detailVO.setAmount(torder.getAmount().doubleValue());</span><br><span class="line">            <span class="comment">// 根据不同的订单类型来封装不同的参数（这里为了满足产品的需求，想用一个接口显示不同种类订单的信息，用了SQL反模式设计数据库，导致代码很不优雅）</span></span><br><span class="line">            <span class="keyword">if</span> (torder.getOrderType() == <span class="number">0</span>) &#123;</span><br><span class="line">                Wrapper&lt;Object&gt; statusByOrderId = getStatusByOrderId(orderId);</span><br><span class="line">                <span class="keyword">if</span> (statusByOrderId.getCode() != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 订单状态查询异常，返回错误，主动断开连接</span></span><br><span class="line">                    SseUtils.sendMessage(orderId, JSON.toJSONString(ErrorCodeEnum.ASYNC_SERVICE_ERROR));</span><br><span class="line">                    SseUtils.removeClientId(orderId);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (torder.getPolishType() == Common.POLISH_TYPE_WITH_PAPER) &#123;</span><br><span class="line">                    <span class="type">PaperStatusByOrderIdVO</span> <span class="variable">paperVO</span> <span class="operator">=</span> (PaperStatusByOrderIdVO) statusByOrderId.getResult();</span><br><span class="line">                    BeanUtils.copyProperties(paperVO, detailVO);</span><br><span class="line">                    detailVO.setProgress(Double.valueOf(paperVO.getProgress()));</span><br><span class="line">                    detailVO.setTitle(paperVO.getPaperTitle());</span><br><span class="line">                    detailVO.setOrderStatus(paperVO.getStatus());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">TextStatusByOrderIdVO</span> <span class="variable">textVO</span> <span class="operator">=</span> (TextStatusByOrderIdVO) statusByOrderId.getResult();</span><br><span class="line">                    BeanUtils.copyProperties(textVO, detailVO);</span><br><span class="line">                    detailVO.setProgress(Double.valueOf(textVO.getProgress()));</span><br><span class="line">                    detailVO.setTitle(textVO.getPaperTitle());</span><br><span class="line">                    detailVO.setOrderStatus(textVO.getStatus());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (torder.getOrderType() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">CheckpassOrder</span> <span class="variable">checkpassOrder</span> <span class="operator">=</span> checkpassOrderMapper.selectOne(Wrappers.lambdaQuery(CheckpassOrder.class).eq(CheckpassOrder::getOrderId, orderId));</span><br><span class="line">                <span class="type">CheckpassReport</span> <span class="variable">checkpassReport</span> <span class="operator">=</span> checkpassReportMapper.selectOne(Wrappers.lambdaQuery(CheckpassReport.class).eq(CheckpassReport::getPaperId, checkpassOrder.getPaperId()));</span><br><span class="line">                detailVO.setOrderStatus(checkpassOrder.getStatus());</span><br><span class="line">                detailVO.setAuthor(checkpassReport.getAuthor());</span><br><span class="line">                detailVO.setTitle(checkpassReport.getTitle());</span><br><span class="line">                detailVO.setProgress(checkpassReport.getCopyPercent() == <span class="literal">null</span> ? <span class="number">0</span> : checkpassReport.getCopyPercent());</span><br><span class="line">                detailVO.setCheckVersion(CommonUtil.getCheckVersion(checkpassOrder.getJaneName()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> SseUtils.sendMessage(orderId, JSON.toJSONString(detailVO));</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (torder.getStatus() == Common.ORDER_FINISH_STATUS) &#123;</span><br><span class="line">                <span class="comment">// 订单完成，主动关闭连接</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    emitter.send(SseEmitter.event().reconnectTime(<span class="number">5000L</span>).data(<span class="string">&quot;SSE关闭连接&quot;</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                SseUtils.removeClientId(orderId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>使用过程中的一些坑</h1><ol><li>在使用过程中，浏览器中查看接口一直显示待处理状态，但我的Java服务确确实实已经推送了数据。<ul><li>如果你等待了一会儿，发现请求响应成功，但是一次性推送了很多条消息，那么大概率是缓冲区的问题，因为SSE是流式输出，流式输出通常会涉及到缓冲区的使用。在Java Servlet中，HttpServletResponse对象的输出流会有一个缓冲区。当使用Servlet的输出流写入数据时，这些数据首先会被写入缓冲区，然后才会被发送到客户端。所以我们需要再代码中禁用掉。</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpServletResponse.setHeader(<span class="string">&quot;X-Accel-Buffering&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>同时Nginx里也要加上同样的配置，如果你中间经过了多级Nginx，需要每一级Nginx都禁用此项。</li></ul> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure></li><li>如果你使用了阿里云的CDN服务，那么请设置为动态加速</li><li>服务端无法到客户端网络中断：客户端网络中断后，服务端无法感知到客户端断开连接，就会导致服务端的线程中的任务一直在运行，不断地给这个客户端推送消息。解决方案如下：<ol><li>通过给不同的业务场景给服务端设置不同的最大连接时长，超过这个时长，服务端会主动地去断开这个连接。</li><li>客户端感知断开连接的通知之后，如果当前订单任务还未结束，那么客户端会重新建立连接，直到订单任务结束，这样做能避免一些无效会话一直在推送消息的问题。</li></ol></li><li>客户端重连机制：如果客户端因为网络问题或者其他问题进行了断线，那么客户端会根据服务端发送的retry参数设置的时间间隔进行重连，而这个时候服务端是暂时无法感知到客户端已经断线了，所以还是会在持续地去给客户端推送消息。假如客户端重连成功之后，就会出现以下两种场景：<ol><li>服务端未断开连接：复用之前的连接线路，客户端会一次性收到多条断线期间未收到的消息内容，这个时候客户端使用限流，只更新最后一条消息，减少DOM渲染。</li><li>服务端主动断开了连接（订单任务结束断开/达到最大连接时长）：重新建立一条线路（之前的那条线路其实还是存在的），因为是一条新线路所以之前断线时，服务端发送的消息，是收不到的。</li></ol></li><li>如何保证用户在同一个业务场景下只会建立一条连接？<ol><li>这也就是上面标黄处提到的问题，之前的会话id都是服务端来生成，最后修改为客户端来生成会话id并且临时保存在本地策略就是（业务ID - 用户token后20位 - 页面RUNTIME_ID），这个样做的原因主要还是确保用户在同一个业务场景下或者在断线重连时 客户端每次向服务端建立连接的会话id都是相同的，从而方便后面 服务端断开之前的线路。</li><li>由于服务端采用的是HashMap来存储每个SSE对象，所以在插入id相同的会话的时候，会直接替换map中已经存在的会话，虽然之前的会话已经不存在了，但是其建立的连接并没有真正的断开，所以服务端在新的会话插入之前，先去显式地去将之前的会话执行一次断开连接的操作，然后再去执行创建连接操作。否则，当多余的线路达到一定的数量之后，客户端会出现线路阻塞的问题。</li></ol></li><li>新的会话加入之后，如何中断旧会话占用的线程？<ul><li>一开始的逻辑是将会话id保留在线程之中，具体流程是：判断当前会话是否存在 -&gt; 存在就推送消息 -&gt; sleep n秒。这样的处理的话就会出现一个问题，虽然我们在这里判断了会话id是否存在，但是由于上面我们在替换旧会话的时候，又重新创建了一个相同id的新会话（在同一个业务场景下多次建立连接，每次的会话id是一样的），所以当前线程sleep结束之后，会发现这个会话是存在的，从而会继续给这个会话推送消息。这个时候客户端会收到多个不同线程发送来的消息的问题。解决方案如下：<ol><li>在每次建立连接的时候将会话和该会话的所属线程关联在一起，也就是将管理会话的map由原来的 <code>Map&lt;String, SseEmitter&gt;</code>类型，修改为： <code>Map&lt;String, SseEmitterInfo&gt;</code>   类型，其中SseEmitterInfo是我们自己封装的一个类，其中包含SseEmitter对象和建立该连接时的线程名。</li><li>在发送消息之前，需要判断当前会话是否存在，并且判断该会话所属的线程是否是当前线程，如果满足上面两个条件的话，就推送消息；否则，中断线程；这样就可以保证每一个会话只会有一个线程在推送消息。</li></ol></li></ul></li></ol><p><img src="https://s11.ax1x.com/2024/02/24/pFUyKFP.png" alt=""></p><h1>一些补充</h1><ul><li>后续实际使用的时候，我又对SseUtils进行了改进，最终版本如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aimc.paperreduction.common.wrapper.RWrappers;</span><br><span class="line"><span class="keyword">import</span> com.aimc.paperreduction.model.enums.ErrorCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.SseEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SseUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 为了避免内存泄露，这里最好设置一个超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEFAULT_TIME_OUT</span> <span class="operator">=</span> <span class="number">30L</span> * <span class="number">60</span> *  <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">// 会话map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, SseEmitterInfo&gt; conversationMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 断开连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="type">SseEmitterInfo</span> <span class="variable">instance</span> <span class="operator">=</span> SseUtil.getInstance(conversationId);</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">            instance.getEmitter().complete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SseEmitter <span class="title function_">getConnect</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 SseEmitterInfo</span></span><br><span class="line">        <span class="type">SseEmitterInfo</span> <span class="variable">sseEmitterInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitterInfo</span>(conversationId);</span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>(DEFAULT_TIME_OUT);</span><br><span class="line">        sseEmitterInfo.setEmitter(sseEmitter);</span><br><span class="line">        <span class="comment">// 异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置前端重试时5s</span></span><br><span class="line">            sseEmitter.send(SseEmitter.event().reconnectTime(<span class="number">5_000L</span>).data(JSONObject.toJSONString(RWrappers.Fail(ErrorCodeEnum.SSE_CONNECT_SUCCESS))));</span><br><span class="line">            <span class="comment">// 连接超时</span></span><br><span class="line">            sseEmitter.onTimeout(() -&gt; SseUtil.timeout(conversationId));</span><br><span class="line">            <span class="comment">// 连接断开</span></span><br><span class="line">            sseEmitter.onCompletion(() -&gt; SseUtil.completion(conversationId));</span><br><span class="line">            <span class="comment">// 错误</span></span><br><span class="line">            sseEmitter.onError((e) -&gt; SseUtil.error(conversationId, e.getMessage()));</span><br><span class="line">            <span class="comment">// 添加sse</span></span><br><span class="line">            conversationMap.put(conversationId, sseEmitterInfo);</span><br><span class="line">            <span class="comment">// 连接成功</span></span><br><span class="line">            log.info(<span class="string">&quot;创建sse连接成功 ==&gt; 当前连接总数=&#123;&#125;， 会话Id=&#123;&#125;&quot;</span>, conversationMap.size(), conversationId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 日志</span></span><br><span class="line">            log.error(<span class="string">&quot;前端重连异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取消息实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SseEmitterInfo <span class="title function_">getInstance</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.get(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给指定会话发送消息，如果发送失败，返回false</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonMsg        - 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(String conversationId, String jsonMsg)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断该会话是否还在Map中，不存在则删除</span></span><br><span class="line">        <span class="keyword">if</span> (!conversationMap.containsKey(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已建立连接</span></span><br><span class="line">        <span class="keyword">if</span> (SseUtil.getIsExistClientId(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                SseUtil.getInstance(conversationId).getEmitter().send(jsonMsg, MediaType.APPLICATION_JSON);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// 日志</span></span><br><span class="line">                SseUtil.removeClientId(conversationId);</span><br><span class="line">                log.error(<span class="string">&quot;发送消息异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;</span>, conversationId, e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未建立连接</span></span><br><span class="line">            log.error(<span class="string">&quot;连接不存在或者超时 ==&gt; 会话Id=&#123;&#125;会话自动关闭&quot;</span>, conversationId);</span><br><span class="line">            SseUtil.removeClientId(conversationId);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并断开会话Id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeClientId</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 不存在存在会话</span></span><br><span class="line">        <span class="keyword">if</span> (!SseUtil.getIsExistClientId(conversationId)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除该会话</span></span><br><span class="line">        conversationMap.remove(conversationId);</span><br><span class="line">        SseUtil.disconnect(conversationId);</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">         log.info(<span class="string">&quot;移除会话成功 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取是否存在会话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId - 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getIsExistClientId</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conversationMap.containsKey(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前连接总数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> - 连接总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getConnectTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;当前连接数：&#123;&#125;&quot;</span>, conversationMap.size());</span><br><span class="line">        <span class="keyword">return</span> conversationMap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">timeout</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.error(<span class="string">&quot;sse连接超时 ==&gt; 会话Id=&#123;&#125;&quot;</span>, conversationId);</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtil.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">completion</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.info(<span class="string">&quot;sse连接已断开 ==&gt; 会话Id：&#123;&#125;，当前剩余连接数：&#123;&#125;&quot;</span>, conversationId, conversationMap.size());</span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtil.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conversationId String 会话Id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(String conversationId, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line"><span class="comment">//        log.error(&quot;sse服务异常 ==&gt; 会话Id=&#123;&#125;, 异常信息=&#123;&#125;&quot;, conversationId, message);</span></span><br><span class="line">        <span class="comment">// 移除会话</span></span><br><span class="line">        SseUtil.removeClientId(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SseEmitterInfo</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> SseEmitter emitter;</span><br><span class="line">        <span class="keyword">private</span> String threadName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SseEmitterInfo</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.emitter = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.threadName = Thread.currentThread().getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> SseEmitter <span class="title function_">getEmitter</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> emitter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmitter</span><span class="params">(SseEmitter emitter)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.emitter = emitter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getThreadName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> threadName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setThreadName</span><span class="params">(String threadName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.threadName = threadName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实际使用如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/connSse&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">connSse</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">    <span class="type">SseEmitter</span> <span class="variable">emitter</span> <span class="operator">=</span> SseUtil.getConnect(conversationId);</span><br><span class="line">    executor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 这里需要保证同一个会话ID只有一个线程处理</span></span><br><span class="line">        SseUtil.getInstance(conversationId).setThreadName(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted() &amp;&amp; SseUtil.getInstance(conversationId) != <span class="literal">null</span> &amp;&amp; SseUtil.getInstance(conversationId).getThreadName().equals(Thread.currentThread().getName())) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">sendSuccess</span> <span class="operator">=</span> SseUtil.sendMessage(conversationId, JSONObject.toJSONString(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">10</span>]));</span><br><span class="line">            log.info(<span class="string">&quot;向会话：&#123;&#125;，推送&quot;</span>, conversationId);</span><br><span class="line">            <span class="keyword">if</span> (!sendSuccess) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;=========连接不存在，服务端主动关闭SSE连接=========&quot;</span>);</span><br><span class="line">                SseUtil.removeClientId(conversationId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 每一秒推送一次数据</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于我这里的业务限制，只能这么用SSE。原有的业务逻辑是，我轮询算法接口，更新数据，然后前端轮询我的接口，更新页面状态。使用了SSE之后变成了，我轮询算法接口，更新数据，然后向前端推送数据。</li><li>但是更好的处理方式是，我这边给算法提供一个回调的接口，当算法有进度更新时，调用我这个回调接口，然后我在这个回调逻辑里向前端推送数据，这样逻辑上其实是更顺的，后续有时间，打算和算法侧聊聊这块，进一步优化。</li></ul>]]></content>
    
    
    <summary type="html">Server-Sent Events 服务器推送事件，简称 SSE，是一种服务端实时主动向浏览器推送消息的技术。</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SSE" scheme="https://cyborg2077.github.io/tags/SSE/"/>
    
  </entry>
  
  <entry>
    <title>Redisson延迟队列实现倒计时任务</title>
    <link href="https://cyborg2077.github.io/2023/10/28/RDelayedQueue/"/>
    <id>https://cyborg2077.github.io/2023/10/28/RDelayedQueue/</id>
    <published>2023-10-28T12:14:25.000Z</published>
    <updated>2023-10-28T14:37:26.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景">问题背景</h2><ul><li>项目里刚好需要实现一个延迟订单取消任务。具体而言，如果一份订单在生成后的15分钟内未完成支付，系统需要自动取消该订单，并返还相关订单所使用的优惠券或免费额度等资源。</li><li>虽然引入MQ或者Kafka也是一种解决方法，但出于最大程度减少系统复杂性的角度考虑，强烈建议充分利用已有的Redis组件（例如Redisson）来解决这一问题，而不引入新组件。这样可以提高效率、减少维护负担，并确保充分发挥已有技术的潜力。</li></ul><h2 id="延迟队列">延迟队列</h2><ul><li>Redisson中定义了分布式延迟队列RDelayedQueue，是一种基于zset结构实现的延时队列，，它允许以指定的延迟时长，将任务放到目标队列中。</li><li>其实就是在zset的基础上增加了一个基于内存的延迟队列，当我们要添加一个数据到延迟队列的时候，Redission会把数据和超时时间放到zset中，并且起一个延时任务，当任务到期时，再去zset中把数据取出来，返回给客户端使用。</li></ul><h2 id="解决方案">解决方案</h2><ul><li>其实这里的实现和我之前写的消息队列差不多，感兴趣的可以去看我前面那篇文</li></ul><div class="tag link"><a class="link-card" title="手写一个消息队列" href="https://cyborg2077.github.io/2023/10/03/DIYTaskQueue/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">手写一个消息队列</p><p class="url">https://cyborg2077.github.io/2023/10/03/DIYTaskQueue/</p></div></a></div><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String REDIS_HOST;  <span class="comment">//地址配置在配置文件上</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String REDIS_PORT;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String REDIS_PASSWORD;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">createRedisAPi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">redissonConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        redissonConfig.setCodec(<span class="keyword">new</span> <span class="title class_">org</span>.redisson.client.codec.StringCodec());</span><br><span class="line">        <span class="comment">//我这里单节点演示一下</span></span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">singleServerConfig</span> <span class="operator">=</span> redissonConfig.useSingleServer();</span><br><span class="line">        singleServerConfig.setAddress(String.format(<span class="string">&quot;redis://%s:%s&quot;</span>, REDIS_HOST, REDIS_PORT));</span><br><span class="line">        singleServerConfig.setPassword(REDIS_PASSWORD);</span><br><span class="line">        <span class="comment">//设置几号数据库</span></span><br><span class="line">        singleServerConfig.setDatabase(<span class="number">0</span>);</span><br><span class="line">        singleServerConfig.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line">        singleServerConfig.setConnectionPoolSize(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(redissonConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>延迟队列执行器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayTaskQueueExecutor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> RBlockingQueue&lt;T&gt; queue;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Thread msgLooper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DelayTaskQueueExecutor.Processor&lt;T&gt; processor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(T task)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DelayTaskQueueExecutor</span><span class="params">(String threadName, RBlockingQueue&lt;T&gt; queue, DelayTaskQueueExecutor.Processor&lt;T&gt; processor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">        <span class="built_in">this</span>.processor = processor;</span><br><span class="line">        <span class="built_in">this</span>.msgLooper = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>::looper);</span><br><span class="line">        <span class="built_in">this</span>.msgLooper.setName(threadName);</span><br><span class="line">        <span class="built_in">this</span>.msgLooper.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">looper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">task</span> <span class="operator">=</span> queue.take();</span><br><span class="line">                processor.process(task);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(String.format(<span class="string">&quot;TaskQueueExecutor %s run task exception&quot;</span>,</span><br><span class="line">                        <span class="built_in">this</span>.msgLooper.getName()), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>服务类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayQueueService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoMapper userInfoMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BonusInfoMapper bonusInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redisson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RDelayedQueue&lt;String&gt; delayedQueue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDelayQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        RBlockingQueue&lt;String&gt; blockingQueue = redisson.getBlockingQueue(<span class="string">&quot;orderDelayQueue&quot;</span>);</span><br><span class="line">        delayedQueue = redisson.getDelayedQueue(blockingQueue);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DelayTaskQueueExecutor</span>&lt;&gt;(<span class="string">&quot;ORDER_DELAY&quot;</span>, blockingQueue, <span class="built_in">this</span>::processOrder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将订单信息加入到延迟队列中，并设置TTL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId 订单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToDelayQueue</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        delayedQueue.offer(orderId, <span class="number">2</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="type">Torder</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectOne(Wrappers.lambdaQuery(Torder.class).eq(Torder::getOrderId, orderId));</span><br><span class="line">        <span class="keyword">if</span> (order != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> order.getStatus();</span><br><span class="line">            <span class="comment">// 如果订单仍然是未支付状态，并且字数已经预扣了，则返还预扣的字数，并且关闭订单</span></span><br><span class="line">            <span class="keyword">if</span> (status == Common.ORDER_ORIGINAL_STATUS) &#123;</span><br><span class="line">                order.setStatus(Common.ORDER_CLOSED_STATUS);</span><br><span class="line">                <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> order.getToken();</span><br><span class="line">                <span class="comment">// 查询是否是登录用户</span></span><br><span class="line">                <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userInfoMapper.selectOneForUpdate(userId);</span><br><span class="line">                <span class="keyword">if</span> (userInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">UsedWordsBonusInfo</span> <span class="variable">wordsBonusInfo</span> <span class="operator">=</span> usedWordsBonusInfoMapper.selectOne(Wrappers.lambdaQuery(UsedWordsBonusInfo.class).eq(UsedWordsBonusInfo::getOrderId, order.getOrderId()));</span><br><span class="line">                    <span class="comment">// 判断是否已经预扣了</span></span><br><span class="line">                    <span class="keyword">if</span> (wordsBonusInfo.getSelfWordsDeducted() == Common.ALREADY_DEDUCTION) &#123;</span><br><span class="line">                        userInfo.setRegisterBonusWords(userInfo.getRegisterBonusWords() + wordsBonusInfo.getUsedRegisterBonus());</span><br><span class="line">                        userInfo.setInviteBonusWords(userInfo.getInviteBonusWords() + wordsBonusInfo.getUsedInviteBonus());</span><br><span class="line">                        log.info(<span class="string">&quot;订单：&#123;&#125;，返还注册字数：&#123;&#125;，邀请字数：&#123;&#125;&quot;</span>, orderId, wordsBonusInfo.getUsedRegisterBonus(), wordsBonusInfo.getUsedInviteBonus());</span><br><span class="line">                        wordsBonusInfo.setSelfWordsDeducted(Common.ORIGIN_STATUS);</span><br><span class="line">                        usedWordsBonusInfoMapper.updateById(wordsBonusInfo);</span><br><span class="line">                        userInfoMapper.updateById(userInfo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            orderMapper.updateById(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>使用方法，创建订单的时候将订单号加入到队列中，到期后会自动执行关闭订单的对应逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delayQueueService.addToDelayQueue(orderId);</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><ul><li>细心的同学可能注意到了我这里的事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">      <span class="type">Torder</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectOne(Wrappers.lambdaQuery(Torder.class).eq(Torder::getOrderId, orderId));</span><br><span class="line">      <span class="keyword">if</span> (order != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> order.getStatus();</span><br><span class="line">          <span class="comment">// 如果订单仍然是未支付状态，并且字数已经预扣了，则返还预扣的字数，并且关闭订单</span></span><br><span class="line">          <span class="keyword">if</span> (status == Common.ORDER_ORIGINAL_STATUS) &#123;</span><br><span class="line">              order.setStatus(Common.ORDER_CLOSED_STATUS);</span><br><span class="line">              <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> order.getToken();</span><br><span class="line">              <span class="comment">// 查询是否是登录用户</span></span><br><span class="line">              <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userInfoMapper.selectOneForUpdate(userId);</span><br><span class="line">              <span class="keyword">if</span> (userInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="type">UsedWordsBonusInfo</span> <span class="variable">wordsBonusInfo</span> <span class="operator">=</span> usedWordsBonusInfoMapper.selectOne(Wrappers.lambdaQuery(UsedWordsBonusInfo.class).eq(UsedWordsBonusInfo::getOrderId, order.getOrderId()));</span><br><span class="line">                  <span class="comment">// 判断是否已经预扣了</span></span><br><span class="line">                  <span class="keyword">if</span> (wordsBonusInfo.getSelfWordsDeducted() == Common.ALREADY_DEDUCTION) &#123;</span><br><span class="line">                      userInfo.setRegisterBonusWords(userInfo.getRegisterBonusWords() + wordsBonusInfo.getUsedRegisterBonus());</span><br><span class="line">                      userInfo.setInviteBonusWords(userInfo.getInviteBonusWords() + wordsBonusInfo.getUsedInviteBonus());</span><br><span class="line">                      log.info(<span class="string">&quot;订单：&#123;&#125;，返还注册字数：&#123;&#125;，邀请字数：&#123;&#125;&quot;</span>, orderId, wordsBonusInfo.getUsedRegisterBonus(), wordsBonusInfo.getUsedInviteBonus());</span><br><span class="line">                      wordsBonusInfo.setSelfWordsDeducted(Common.ORIGIN_STATUS);</span><br><span class="line">                      usedWordsBonusInfoMapper.updateById(wordsBonusInfo);</span><br><span class="line">                      userInfoMapper.updateById(userInfo);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          orderMapper.updateById(order);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>重点是我这里的<code>userInfoMapper.selectOneForUpdate(userId);</code>，这句其实是我手写的一个SQL，<code>SELECT XXX FROM user WHERE userId = xxx FOR UPDATE</code>，主要是为了手动触发行锁。这里是使用的默认的事务隔离级别，可重复读。因为事务里的读操作默认是不会触发行锁的，所以这里可能会出现另一个事务将用户信息改了，并且提交了，由于可重复读的问题，当前事务中读取到的仍是修改前的数据，那么当前事务提交的时候，就会将另一个事务的提交结果覆盖掉，如果这里不触发行锁，会导致数据的不一致性。</li><li>加了行锁之后，可以确保只有一个会话可以访问该订单数据，从而避免并发问题。但是也不是所有在事务里的读操作都要加行锁，毕竟那样的执行效率就太慢了，只有涉及到读取信息，并且后续需要对该信息进行修改的时候，才加上行锁。</li></ul>]]></content>
    
    
    <summary type="html">项目里有个场景需要做延迟任务</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="Redis" scheme="https://cyborg2077.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>手写一个消息队列</title>
    <link href="https://cyborg2077.github.io/2023/10/03/DIYTaskQueue/"/>
    <id>https://cyborg2077.github.io/2023/10/03/DIYTaskQueue/</id>
    <published>2023-10-03T15:30:34.000Z</published>
    <updated>2023-10-05T03:02:31.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li>本文涉及到了大量JDK 8的新特性，对这部分不太了解的，可以参考我之前写的这篇文章</li></ul><div class="tag link"><a class="link-card" title="Java8 新特性" href="https://cyborg2077.github.io/2022/11/05/NewFeaturesOfJava8/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">Java8 新特性</p><p class="url">https://cyborg2077.github.io/2022/11/05/NewFeaturesOfJava8/</p></div></a></div><h2 id="背景">背景</h2><ul><li>项目里原本是使用Kafka当消息队列的，但是组内大师觉得Kafka太重了，只要确保订单信息都持久化到数据库里，每次重启的时候重新加载任务，那么其实是可以自己写一个消息队列来替代Kafka的</li></ul><div class="tabs" id="消息队列"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#消息队列-1">任务队列执行器</button></li><li class="tab"><button type="button" data-href="#消息队列-2">QueueService</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="消息队列-1"><ul><li>下面是我自己写的一个任务队列执行器，使用了<code>ArrayBlockingQueue</code>来存储任务，并创建一个单独的线程来处理队列中的任务。并且允许指定处理任务的处理器（Processor），可以根据需要执行不同的任务。</li><li>关于TaskQueueExecutor的构造函数，我这里自定义了一个函数式接口，但是其实也可以直接用Java内置的函数式接口：Function，写法类似于<code>public TaskQueueExecutor(String threadName, int queueSize, Function&lt;T, R&gt; processor) {}</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskQueueExecutor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 为记录消息和错误信息定义一个日志记录器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于存储类型为T的任务的阻塞队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayBlockingQueue&lt;T&gt; queue;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于处理任务的独立线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Thread msgLooper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于处理任务的处理器接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Processor&lt;T&gt; processor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于跟踪队列中任务的数量的AtomicInteger是原子整数类型，可以避免并发环境下的线程安全问题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger taskNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个处理任务的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(T task)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数用于初始化TaskQueueExecutor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskQueueExecutor</span><span class="params">(String threadName, <span class="type">int</span> queueSize, Processor&lt;T&gt; processor)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用给定的大小初始化阻塞队列</span></span><br><span class="line">        <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;T&gt;(queueSize);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 存储用于处理任务的处理器</span></span><br><span class="line">        <span class="built_in">this</span>.processor = processor;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新线程用于消息处理</span></span><br><span class="line">        <span class="built_in">this</span>.msgLooper = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>::looper);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置线程名称，我这里是根据业务名称来设置的，这样排查问题会比较方便</span></span><br><span class="line">        <span class="built_in">this</span>.msgLooper.setName(threadName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动消息处理线程</span></span><br><span class="line">        <span class="built_in">this</span>.msgLooper.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化taskNum</span></span><br><span class="line">        taskNum = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法用于将消息（任务）发送到队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(T task)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将任务放入队列</span></span><br><span class="line">            <span class="built_in">this</span>.queue.put(task);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 增加任务计数</span></span><br><span class="line">            taskNum.incrementAndGet();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法用于获取队列中的任务数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTaskNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskNum.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主要的消息处理循环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">looper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 从队列中获取任务（如果队列为空，则阻塞）</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">task</span> <span class="operator">=</span> queue.take();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 使用提供的处理器处理任务</span></span><br><span class="line">                processor.process(task);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// 如果线程被中断，则中断循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 处理任务处理过程中出现的任何异常</span></span><br><span class="line">                log.error(String.format(<span class="string">&quot;TaskQueueExecutor %s run task exception&quot;</span>,</span><br><span class="line">                        <span class="built_in">this</span>.msgLooper.getName()), e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 即使发生异常，也会在finally块中减少任务计数</span></span><br><span class="line">                taskNum.decrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="消息队列-2"><ul><li><code>QueueService</code>：是用于管理不同类型的任务队列。<del>（我这里目前就俩任务队列）</del></li><li><code>@PostConstruct init()</code>：使用注解来标记初始化方法，该方法在类实例化后自动调用，主要是初始化了两个<code>ArrayList</code>，分别用于存储不同类型的任务队列执行器，同时可以通过配置项来判断是否需要从数据库加载未完成任务。</li><li><code>sendMessage()</code>：用于将订单添加到适当的队列执行器，根据订单的类型选择合适的执行器列表，计算任务最少的分区并添加订单。</li><li><code>getQueueSize()</code>: 用于获取特定订单的队列大小，根据订单类型选择相应的队列执行器列表并返回队列大小。</li><li><code>getTaskQueueExecutors()</code>：根据订单类型返回相应的任务队列执行器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入依赖的服务和组件</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ThirdManager thirdManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> QueueConfig queueConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderConsumerService orderConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义两个ArrayList，用于存储不同类型的任务队列执行器，这里可以根据自身业务需求来定义多个。</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;TaskQueueExecutor&lt;Torder&gt;&gt; paperTaskExecutors;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;TaskQueueExecutor&lt;Torder&gt;&gt; textTaskExecutors;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化方法，在类实例化后自动调用，创建信息从配置文件中读取。</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 加载配置，设置队列大小和处理器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>; idx &lt; queueConfig.getPaperTopicPartitionsNum(); idx++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> idx;</span><br><span class="line">            paperTaskExecutors.add(<span class="keyword">new</span> <span class="title class_">TaskQueueExecutor</span>&lt;&gt;(</span><br><span class="line">                String.format(<span class="string">&quot;%s-%d&quot;</span>, queueConfig.getPaperTopic(), partition),</span><br><span class="line">                <span class="number">1000</span>,</span><br><span class="line">                torder -&gt; &#123;</span><br><span class="line">                    orderConsumerService.paperConsumeMessage(torder, partition);</span><br><span class="line">                &#125;</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载配置，设置队列大小和处理器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>; idx &lt; queueConfig.getTextTopicPartitionsNum(); idx++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> idx;</span><br><span class="line">            textTaskExecutors.add(<span class="keyword">new</span> <span class="title class_">TaskQueueExecutor</span>&lt;&gt;(</span><br><span class="line">                String.format(<span class="string">&quot;%s-%d&quot;</span>, queueConfig.getTextTopic(), partition),</span><br><span class="line">                <span class="number">1000</span>,</span><br><span class="line">                torder -&gt; &#123;</span><br><span class="line">                    orderConsumerService.textConsumeMessage(torder, partition);</span><br><span class="line">                &#125;</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次重启的时候，从数据库加载未完成订单，可以通过配置项配置，生产环境加载未完成任务，开发环境不加载</span></span><br><span class="line">        <span class="keyword">if</span> (queueConfig.isNeedLoadFromDB()) &#123;</span><br><span class="line">            <span class="comment">// 查询数据库中未处理的订单。</span></span><br><span class="line">            List&lt;Torder&gt; orders = orderMapper.selectList(Wrappers.lambdaQuery(Torder.class).eq(Torder::getStatus, <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (Torder torder : orders) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;添加未处理订单：&#123;&#125;&quot;</span>, torder);</span><br><span class="line">                <span class="comment">// 将这些订单添加到适当的消息队列，以便后续处理。</span></span><br><span class="line">                sendMessage(torder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于将订单消息发送到适当的队列执行器。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Torder torder)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">executorOptional</span> <span class="operator">=</span> getTaskQueueExecutors(torder);</span><br><span class="line">        executorOptional.ifPresent(executors -&gt; &#123;</span><br><span class="line">            <span class="comment">// stream操作，用于寻找任务数最少的队列，默认值为0</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, executors.size())</span><br><span class="line">                    .reduce((i, j) -&gt; executors.get(i).getTaskNum() &gt; executors.get(j).getTaskNum() ? j : i)</span><br><span class="line">                    .orElse(<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">taskNum</span> <span class="operator">=</span> executors.get(partition).getTaskNum();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里是我的业务逻辑</span></span><br><span class="line">            torder.setZone(partition);</span><br><span class="line">            orderMapper.updateById(torder);</span><br><span class="line">            log.info(<span class="string">&quot;当前消息入队列，所在分区&#123;&#125;, 当前订单号为&#123;&#125;, 前面还有&#123;&#125;人在排队&quot;</span>,</span><br><span class="line">                    partition, torder.getOrderId(), executors.get(partition).getTaskNum());</span><br><span class="line">            <span class="keyword">if</span> (taskNum &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                thirdManager.sendExceptionToFeiShu(<span class="string">&quot;报告降重，分区：【&quot;</span> + partition + <span class="string">&quot;】当前排队人数已达：【&quot;</span> + taskNum + <span class="string">&quot;】人次&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加订单到选定的队列执行器。</span></span><br><span class="line">            executors.get(partition).sendMessage(torder);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法用于获取特定订单的队列大小（即队列中等待处理的订单数量）。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueueSize</span><span class="params">(Torder torder)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">executorOptional</span> <span class="operator">=</span> getTaskQueueExecutors(torder);</span><br><span class="line">        <span class="keyword">return</span> executorOptional.map(taskQueueExecutors -&gt;</span><br><span class="line">                        taskQueueExecutors.get(torder.getZone()).getTaskNum())</span><br><span class="line">                .orElse(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法用于根据订单类型获取相应的任务队列执行器列表。</span></span><br><span class="line">    <span class="keyword">private</span> Optional&lt;ArrayList&lt;TaskQueueExecutor&lt;Torder&gt;&gt;&gt; <span class="title function_">getTaskQueueExecutors</span><span class="params">(Torder torder)</span> &#123;</span><br><span class="line">        ArrayList&lt;TaskQueueExecutor&lt;Torder&gt;&gt; executors;</span><br><span class="line">        <span class="keyword">if</span> (torder.getPolishType().equals(Common.POLISH_TYPE_WITH_PAPER)) &#123;</span><br><span class="line">            executors = paperTaskExecutors;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (torder.getPolishType().equals(Common.POLISH_TYPE_WITH_TEXT)) &#123;</span><br><span class="line">            executors = textTaskExecutors;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (torder.getPolishType().equals(Common.POLISH_TYPE_WITH_EXPAND)) &#123;</span><br><span class="line">            executors = textTaskExecutors;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (torder.getPolishType().equals(Common.POLISH_TYPE_WITH_RELINE)) &#123;</span><br><span class="line">            executors = textTaskExecutors;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error PolishType: &#123;&#125;&quot;</span>, torder.getPolishType());</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(executors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">手写消息队列替代Kafka</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SpringBoot" scheme="https://cyborg2077.github.io/tags/SpringBoot/"/>
    
    <category term="消息队列" scheme="https://cyborg2077.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>AOP、MDC实现日志追踪</title>
    <link href="https://cyborg2077.github.io/2023/10/03/MDCTraceLog/"/>
    <id>https://cyborg2077.github.io/2023/10/03/MDCTraceLog/</id>
    <published>2023-10-03T13:36:49.000Z</published>
    <updated>2023-10-03T15:17:13.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li>在实际开发中，日志输出是非常重要的，在生产环境中，如果 日志打得好，可以快速地排查问题，为了更好的查看日志，我们需要将这些日志串联起来，这样会使排查问题变得更加轻松。正好我前一篇文介绍了ELK的搭建，那么现在我们再来看看AOP+MDC如何实现日志追踪。</li><li>如果我们可以在日志中记录用户的IP，那么我们就能分析该用户的所有操作日志。如果我们可以在日志中记录订单ID，那么如果我们的订单出现了问题，我们可以很快的来根据订单ID在Kibana中搜索与该订单ID关联的所有日志信息。</li></ul><h2 id="实现思路">实现思路</h2><ul><li>串联的核心在于要把ID作为一个请求必传参数，例如我们手动打印日志的时候，可以在日志中加上我们的业务ID，例如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;提交订单开始：&#123;&#125;&quot;</span>, orderId);</span><br></pre></td></tr></table></figure><ul><li>但是此种方式较为繁琐，我们需要在每条日志中都手动加上orderId的输出，那么有没有更简单的方式呢？首先想到的是AOP，因为AOP可以将日志记录的行为从业务的核心逻辑中分离出来，而MDC是一个线程安全的存放诊断日志的容器，在处理请求前将请求的唯一标示放到MDC容器中，这个唯一标示会随着日志一起输出，以此来区分该条日志是属于那个请求的。并在请求处理完成之后清除MDC容器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MDCAdapter</span> &#123;</span><br><span class="line">    <span class="comment">// 将一个k-v键值对放到容器，其实是放到当前线程的ThreadLocalMap中</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String var1, String var2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据key在当前线程的MDC容器中获取对应的值</span></span><br><span class="line">    String <span class="title function_">get</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据key移除容器中的值</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空当前线程的MDC容器</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; <span class="title function_">getCopyOfContextMap</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setContextMap</span><span class="params">(Map&lt;String, String&gt; var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Logback配置：使用MDC机制，我们需要在logback.xml日志模板中进行一些配置，通过使用占位符<code>%X&#123;&#125;</code>来占位，替换到对应MDC中key的值。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value=&quot;%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr([$&#123;springAppName:-&#125;])&#123;yellow&#125; %clr(%X&#123;TRACE_ID&#125;)&#123;cyan&#125; %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %green([%X&#123;userIp&#125;]) %cyan([%X&#123;requestURI&#125;]) %green([%X&#123;orderId&#125;]) %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li>我们可以通过拦截器，将用户IP信息记录到日志中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserIpFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_IP_MDC_KEY</span> <span class="operator">=</span> <span class="string">&quot;userIp&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_REQUEST_URI_MDC_KEY</span> <span class="operator">=</span> <span class="string">&quot;requestURI&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取用户IP并添加到MDC</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">userIp</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">            MDC.put(USER_IP_MDC_KEY, userIp);</span><br><span class="line">            MDC.put(USER_REQUEST_URI_MDC_KEY, requestURI);</span><br><span class="line">            <span class="comment">// 继续请求处理</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 清除MDC，确保不会影响其他请求</span></span><br><span class="line">            MDC.remove(USER_IP_MDC_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MDC结合AOP">MDC结合AOP</h2><ul><li>因为这部分其实是半道里加进来的，所以写的比较粗糙，但是实现思路就是用切点表达式来匹配订单相关信息，主要就是Order这个实体类和orderId这个参数，但是切点不支持匹配参数名，所以匹配String orderId的时候会比较麻烦，需要一个一个手动匹配（因为不支持参数名匹配，按类型匹配会匹配第一个参数是Sting的方法，所以会匹配错）。</li><li>我这里的建议是通过方法名进行匹配，那么就需要订单相关的方法名的后缀进行统一，然后切点表达式按方法名后缀匹配就好了 <del>（后期有空再重构重构代码吧，毕竟这里写的实在不太好）</del></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderIdAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;(execution(* xxx.xxxx.xxx.service.OrderConsumerService.processText(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.getPaperJsonContent(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.getTextJsonObject(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.TextConsumeMessage*(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.PaperConsumeMessage*(..)))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp; args(torder, ..)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderMethod1</span><span class="params">(Torder torder)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;orderMethod1(torder)&quot;, argNames = &quot;joinPoint,torder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logMethod1</span><span class="params">(ProceedingJoinPoint joinPoint, Torder torder)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Accessed method: &#123;&#125;&quot;</span>, joinPoint.getSignature().toShortString());</span><br><span class="line">        MDC.put(<span class="string">&quot;orderId&quot;</span>, torder.getOrderId());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            MDC.remove(<span class="string">&quot;orderId&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;(execution(* xxx.xxxx.xxx.web.controller.CommonController.commitJCInformation(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.impl.OrderServiceImpl.getAsyncErrorStatusOrder(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.web.controller.CommonController.getStatusByOrderId(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.web.controller.CommonController.userComment(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.impl.OrderServiceImpl.commitJCInformation(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.getTextStatusByOrderId(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.service.OrderConsumerService.getPaperStatusByOrderId(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.manager.ThirdManager.getTaskProcessStatus(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.manager.ThirdManager.getTextTaskProcessStatus(..)) ||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;execution(* xxx.xxxx.xxx.manager.ThirdManager.createTextAlgorithmTask(..)))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp; args(orderId, ..)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderMethod2</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;orderMethod2(orderId)&quot;, argNames = &quot;joinPoint,orderId&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logMethod2</span><span class="params">(ProceedingJoinPoint joinPoint, String orderId)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Accessed method: &#123;&#125;&quot;</span>, joinPoint.getSignature().toShortString());</span><br><span class="line">        MDC.put(<span class="string">&quot;orderId&quot;</span>, orderId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            MDC.remove(<span class="string">&quot;orderId&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前面已经搭建了ELK，那现在再来讲讲怎么实现日志追踪</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SpringBoot" scheme="https://cyborg2077.github.io/tags/SpringBoot/"/>
    
    <category term="AOP" scheme="https://cyborg2077.github.io/tags/AOP/"/>
    
    <category term="日志分析" scheme="https://cyborg2077.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
    <category term="MDC" scheme="https://cyborg2077.github.io/tags/MDC/"/>
    
  </entry>
  
  <entry>
    <title>AOP封装一个记录耗时的注解</title>
    <link href="https://cyborg2077.github.io/2023/10/03/TakeTimeLog/"/>
    <id>https://cyborg2077.github.io/2023/10/03/TakeTimeLog/</id>
    <published>2023-10-03T07:16:34.000Z</published>
    <updated>2023-10-03T08:38:34.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述">简述</h2><ul><li>上篇文章说的是使用Arthas来分析耗时，但是整体流程还是挺繁琐的，那这篇文章我们就用AOP来封装一个记录耗时的注解吧，虽然做不到分析整个调用链路上的耗时情况，但是我们可以在我们希望记录耗时的方法上加上对应的注解，来记录对应的耗时。</li></ul><h2 id="代码实现">代码实现</h2><ul><li>那现在我们来从头编写一个TakeTimeAspect类，该类通过AOP的方式来监控方法的执行时间，并且记录相关的日志信息。首先导入AOP的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>代码实现  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TakeTimeAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ThreadLocal变量用于存储开始时间和结束时间</span></span><br><span class="line">    ThreadLocal&lt;Long&gt; startTime = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    ThreadLocal&lt;Long&gt; endTime = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个切入点，匹配带有@TakeTimeLog注解的方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.aimc.paperreduction.common.annotation.TakeTimeLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TakeTime</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置增强方法，在方法执行前记录开始时间</span></span><br><span class="line">    <span class="meta">@Before(&quot;TakeTime()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 获得注解</span></span><br><span class="line">        <span class="type">TakeTimeLog</span> <span class="variable">timeLog</span> <span class="operator">=</span> getAnnotationLog(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (timeLog == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        startTime.set(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回后增强方法，在方法执行后记录结束时间和执行时间，并记录日志</span></span><br><span class="line">    <span class="meta">@AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;TakeTime()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(JoinPoint joinPoint, Object ret)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        String[] names = ((CodeSignature) joinPoint.getSignature()).getParameterNames();</span><br><span class="line">        <span class="keyword">if</span> (names.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(joinPoint.getArgs()[i] <span class="keyword">instanceof</span> HttpServletRequest)) &#123;</span><br><span class="line">                    resultMap.put(names[i], joinPoint.getArgs()[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理完请求后，返回内容</span></span><br><span class="line">        log.info(<span class="string">&quot;Return:&quot;</span> + JSON.toJSONString(ret));</span><br><span class="line">        endTime.set(System.currentTimeMillis());</span><br><span class="line">        log.info(<span class="string">&quot;Execution Time:&quot;</span> + (endTime.get() - startTime.get()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于获取方法上的注解</span></span><br><span class="line">    <span class="keyword">private</span> TakeTimeLog <span class="title function_">getAnnotationLog</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) signature;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.getAnnotation(TakeTimeLog.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ThreadLocal&lt;Long&gt; startTime</code> 和 <code>ThreadLocal&lt;Long&gt; endTime</code>：这两个是ThreadLocal变量，用于存储方法执行的开始时间和结束时间，用于计算方法的执行时间。ThreadLocal允许存储每个线程特定的数据，确保线程安全性。</li><li>切点表达式：<code>@Pointcut(&quot;@annotation(com.aimc.paperreduction.common.annotation.TakeTimeLog)&quot;)</code>，匹配带有@TakeTimeLog注解的方法。</li><li>增强方法<ol><li><code>@Before(&quot;TakeTime()&quot;)</code>：在匹配TakeTime切入点的方法之前执行。它捕获方法执行开始的时间，当然这里也可以获取更多的信息，例如方法参数之类的信息都可以拿到，这里我们根据自身项目的需求来编写。</li><li>@<code>AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;TakeTime()&quot;)</code>：这是一个返回后增强方法。它捕获方法的结束时间，记录返回值，并计算并记录执行时间。</li></ol></li><li><code>getAnnotationLog</code>：这是一个私有方法，用于从目标方法中获取TakeTimeLog注解（如果存在）。</li></ul></li></ul><h2 id="使用方式">使用方式</h2><ul><li>我们在需要记录耗时的方法上加上此注解即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TakeTimeLog</span></span><br><span class="line"><span class="keyword">public</span> Wrapper&lt;UploadPaperDTO&gt; <span class="title function_">uploadDoc</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  你的代码逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">简单写个小玩意</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SpringBoot" scheme="https://cyborg2077.github.io/tags/SpringBoot/"/>
    
    <category term="性能分析" scheme="https://cyborg2077.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    <category term="AOP" scheme="https://cyborg2077.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Arthas排查SpringBoot的耗时</title>
    <link href="https://cyborg2077.github.io/2023/09/07/ArthasAnalyzing/"/>
    <id>https://cyborg2077.github.io/2023/09/07/ArthasAnalyzing/</id>
    <published>2023-09-07T07:16:34.000Z</published>
    <updated>2023-09-07T07:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述">简述</h2><ul><li>Arthas官网：<a href="https://arthas.aliyun.com/">https://arthas.aliyun.com/</a></li><li>Arthas（Alibaba Java Diagnostic Tool）是一个强大的Java诊断工具，它可以监控和分析运行中的Java应用程序。它采用了字节码注入的方式来实现监控和调试功能。</li></ul><h2 id="底层原理">底层原理</h2><ol><li>字节码注入：Arthas使用字节码注入技术，通过修改目标Java程序的字节码来动态注入监控代码和收集性能信息，这种方式不需要对应用程序进行重新编译或者重启，因为重启之后问题可能不容易复现，因此可以在运行时对其进行诊断和分析。</li><li>Instrumentation API：Arthas使用Java的Instrumentation API来实现字节码注入。这个API运行类加载器会在加载类时，对类的字节码进行修改，Arthas通过这个API来注入自己的监控代码，以便捕获方法执行、性能统计等信息。</li><li>Agent方式：Arthas以Java Agent的形式运行，通过JVM的Agent机制加载到目标应用程序中。Java Agent是一种运行在Java程序之外的Java程序，可以在目标应用运行时被动态地附加到应用程序进程中，并与之交互。</li></ol><h2 id="基本使用">基本使用</h2><ul><li><p>由于执行Arthas程序的用户需要与目标进程具有相同的权限，目前公司的项目都是通过容器启动的，所以我们首先要进入Java服务容器的内部，然后下载Arthas的jar包，然后再启动（Windows环境下直接在CMD窗口运行即可）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure></li><li><p>启动之后就会列出当前所有的Java进程，我们根据自身需求来选择要监控的Java进程</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@ff3c3ed00ac8:/data<span class="comment"># java -jar arthas-boot.jar </span></span><br><span class="line">    [INFO] JAVA_HOME: /usr/local/openjdk-8/jre</span><br><span class="line">    [INFO] arthas-boot version: 3.7.1</span><br><span class="line">    [INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.</span><br><span class="line">    * [1]: 7 /data/PaperReduction.jar</span><br><span class="line">    <span class="comment"># 找到一个Java进程，按下对应的数字键来进行监控</span></span><br><span class="line">    1</span><br><span class="line">    [INFO] arthas home: /root/.arthas/lib/3.7.1/arthas</span><br><span class="line">    [INFO] The target process already listen port 3658, skip attach.</span><br><span class="line">    [INFO] arthas-client connect 127.0.0.1 3658</span><br><span class="line">    ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           </span><br><span class="line">    /  O  \ |  .--. <span class="string">&#x27;&#x27;</span>--.  .--<span class="string">&#x27;|  &#x27;</span>--<span class="string">&#x27;  | /  O  \ &#x27;</span>   .-<span class="string">&#x27;                          </span></span><br><span class="line"><span class="string">    |  .-.  ||  &#x27;</span>--<span class="string">&#x27;.&#x27;</span>   |  |   |  .--.  ||  .-.  |`.  `-.                          </span><br><span class="line">    |  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-<span class="string">&#x27;    |                         </span></span><br><span class="line"><span class="string">    `--&#x27;</span> `--<span class="string">&#x27;`--&#x27;</span> <span class="string">&#x27;--&#x27;</span>   `--<span class="string">&#x27;   `--&#x27;</span>  `--<span class="string">&#x27;`--&#x27;</span> `--<span class="string">&#x27;`-----&#x27;</span>                          </span><br><span class="line">    </span><br><span class="line">    wiki       https://arthas.aliyun.com/doc                                        </span><br><span class="line">    tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  </span><br><span class="line">    version    3.7.1                                                                </span><br><span class="line">    main_class                                                                      </span><br><span class="line">    pid        7                                                                    </span><br><span class="line">    time       2023-09-06 19:15:06        </span><br><span class="line"></span><br><span class="line">[arthas@7]$                                           </span><br></pre></td></tr></table></figure></li><li><p>那么现在的需求是分析从Spring框架接收到HTTP请求，然后分派到对应的Controller方法之间的耗时，这里我们只需要使用Arthas的一个小功能trace，它可以动态地计算方法调用路径和耗时。</p><ol><li>trace方法内部调用路径，并输出方法路径上每个节点的耗时。</li><li>trace命令能主动搜索class-pattern/method-pattern，对应的方法带哦用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</li></ol></li><li><p>再了解两个小概念</p><ol><li>DispatcherServlet（org.springframework.web.servlet.DispatcherServlet）：DispatcherServlet 是Spring MVC的核心，它负责接收HTTP请求并将请求分派给相应的Controller。我们可以从DispatcherServlet的请求处理方法入手，分析请求的调用链和处理时间。</li><li>HandlerMapping（org.springframework.web.servlet.HandlerMapping）：HandlerMapping 负责将请求映射到具体的Controller方法。您可以分析不同的HandlerMapping实现，以了解请求到Controller方法的映射过程。</li></ol></li><li><p>那我们现在执行 <code>trace org.springframework.web.servlet.DispatcherServlet *</code> 来分析一下调用链上都经过了什么</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">`---ts=2023-09-07 10:27:40;thread_name=http-nio-80-exec-5;<span class="built_in">id</span>=33;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[5.59488ms] org.springframework.web.servlet.DispatcherServlet:doService()</span><br><span class="line">        +---[0.63% 0.035364ms ] org.springframework.web.servlet.DispatcherServlet:logRequest() <span class="comment">#926</span></span><br><span class="line">        |   `---[59.32% 0.020979ms ] org.springframework.web.servlet.DispatcherServlet:logRequest()</span><br><span class="line">        |       `---[28.81% 0.006045ms ] org.springframework.core.log.LogFormatUtils:traceDebug() <span class="comment">#980</span></span><br><span class="line">        +---[0.12% 0.006831ms ] org.springframework.web.util.WebUtils:isIncludeRequest() <span class="comment">#931</span></span><br><span class="line">        +---[0.10% 0.005813ms ] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() <span class="comment">#943</span></span><br><span class="line">        +---[0.07% 0.004058ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#943</span></span><br><span class="line">        +---[0.06% 0.003624ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#944</span></span><br><span class="line">        +---[0.06% 0.003435ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#945</span></span><br><span class="line">        +---[0.61% 0.034354ms ] org.springframework.web.servlet.DispatcherServlet:getThemeSource() <span class="comment">#946</span></span><br><span class="line">        |   `---[61.47% 0.021117ms ] org.springframework.web.servlet.DispatcherServlet:getThemeSource()</span><br><span class="line">        |       `---[46.43% min=0.0046ms,max=0.005205ms,total=0.009805ms,count=2] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() <span class="comment">#806</span></span><br><span class="line">        +---[0.06% 0.003434ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#946</span></span><br><span class="line">        +---[0.22% 0.012272ms ] org.springframework.web.servlet.FlashMapManager:retrieveAndUpdate() <span class="comment">#949</span></span><br><span class="line">        +---[0.16% 0.008744ms ] org.springframework.web.servlet.FlashMap:&lt;init&gt;() <span class="comment">#953</span></span><br><span class="line">        +---[0.12% 0.006509ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#953</span></span><br><span class="line">        +---[0.09% 0.004867ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#954</span></span><br><span class="line">        +---[0.07% 0.003641ms ] javax.servlet.http.HttpServletRequest:getAttribute() <span class="comment">#959</span></span><br><span class="line">        +---[2.51% 0.140331ms ] org.springframework.web.util.ServletRequestPathUtils:parseAndCache() <span class="comment">#960</span></span><br><span class="line">        +---[92.44% 5.172017ms ] org.springframework.web.servlet.DispatcherServlet:doDispatch() <span class="comment">#964</span></span><br><span class="line">        |   `---[99.30% 5.136033ms ] org.springframework.web.servlet.DispatcherServlet:doDispatch()</span><br><span class="line">        |       +---[0.13% 0.006484ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#1036</span></span><br><span class="line">        |       +---[0.72% 0.036845ms ] org.springframework.web.servlet.DispatcherServlet:checkMultipart() <span class="comment">#1043</span></span><br><span class="line">        |       |   `---[55.87% 0.020586ms ] org.springframework.web.servlet.DispatcherServlet:checkMultipart()</span><br><span class="line">        |       |       `---[55.39% 0.011402ms ] org.springframework.web.multipart.MultipartResolver:isMultipart() <span class="comment">#1197</span></span><br><span class="line">        |       +---[5.09% 0.261359ms ] org.springframework.web.servlet.DispatcherServlet:getHandler() <span class="comment">#1047</span></span><br><span class="line">        |       |   `---[94.84% 0.247868ms ] org.springframework.web.servlet.DispatcherServlet:getHandler()</span><br><span class="line">        |       |       `---[94.99% 0.235439ms ] org.springframework.web.servlet.HandlerMapping:getHandler() <span class="comment">#1265</span></span><br><span class="line">        |       +---[0.11% 0.005579ms ] org.springframework.web.servlet.HandlerExecutionChain:getHandler() <span class="comment">#1054</span></span><br><span class="line">        |       +---[0.62% 0.031705ms ] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter() <span class="comment">#1054</span></span><br><span class="line">        |       |   `---[56.86% 0.018028ms ] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter()</span><br><span class="line">        |       |       `---[32.95% 0.005941ms ] org.springframework.web.servlet.HandlerAdapter:supports() <span class="comment">#1301</span></span><br><span class="line">        |       +---[0.06% 0.003195ms ] javax.servlet.http.HttpServletRequest:getMethod() <span class="comment">#1057</span></span><br><span class="line">        |       +---[0.11% 0.00577ms ] org.springframework.http.HttpMethod:matches() <span class="comment">#1058</span></span><br><span class="line">        |       +---[0.05% 0.00277ms ] org.springframework.http.HttpMethod:matches() <span class="comment">#1059</span></span><br><span class="line">        |       +---[40.64% 2.08729ms ] org.springframework.web.servlet.HandlerExecutionChain:applyPreHandle() <span class="comment">#1066</span></span><br><span class="line">        |       +---[0.08% 0.004206ms ] org.springframework.web.servlet.HandlerExecutionChain:getHandler() <span class="comment">#1071</span></span><br><span class="line">        |       +---[47.64% 2.44697ms ] org.springframework.web.servlet.HandlerAdapter:handle() <span class="comment">#1071</span></span><br><span class="line">        |       +---[0.11% 0.00578ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1073</span></span><br><span class="line">        |       +---[0.77% 0.039313ms ] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName() <span class="comment">#1077</span></span><br><span class="line">        |       |   `---[34.47% 0.01355ms ] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName()</span><br><span class="line">        |       +---[0.16% 0.008038ms ] org.springframework.web.servlet.HandlerExecutionChain:applyPostHandle() <span class="comment">#1078</span></span><br><span class="line">        |       +---[1.41% 0.072602ms ] org.springframework.web.servlet.DispatcherServlet:processDispatchResult() <span class="comment">#1088</span></span><br><span class="line">        |       |   `---[66.42% 0.04822ms ] org.springframework.web.servlet.DispatcherServlet:processDispatchResult()</span><br><span class="line">        |       |       +---[6.78% 0.003268ms ] org.apache.commons.logging.Log:isTraceEnabled() <span class="comment">#1155</span></span><br><span class="line">        |       |       +---[10.20% 0.004917ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#1160</span></span><br><span class="line">        |       |       +---[5.81% 0.0028ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1160</span></span><br><span class="line">        |       |       `---[16.01% 0.007718ms ] org.springframework.web.servlet.HandlerExecutionChain:triggerAfterCompletion() <span class="comment">#1167</span></span><br><span class="line">        |       `---[0.11% 0.00572ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1098</span></span><br><span class="line">        +---[0.09% 0.004919ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#967</span></span><br><span class="line">        +---[0.05% 0.002756ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#967</span></span><br><span class="line">        `---[0.20% 0.011002ms ] org.springframework.web.util.ServletRequestPathUtils:setParsedRequestPath() <span class="comment">#974</span></span><br></pre></td></tr></table></figure><ol><li><code>doService()</code> 方法：首先，请求进入 <code>DispatcherServlet</code> 的 <code>doService()</code> 方法。这是请求处理的入口点。在这个方法中，会进行以下一些重要的操作：<ol><li><code>logRequest()</code> 方法：这个方法用于记录请求的信息，例如请求的HTTP方法、URI等。它通常用于调试和日志记录目的。</li><li><code>isIncludeRequest()</code> 方法：检查当前请求是否是包含（include）请求。包含请求是指一个Servlet可以包含另一个Servlet的响应内容。</li><li><code>getWebApplicationContext()</code> 方法：获取Spring的Web应用程序上下文，该上下文包含了Spring应用程序中的各种bean定义和配置。</li><li><code>setAttribute()</code> 方法：在 <code>HttpServletRequest</code> 对象中设置一些属性，以便后续的处理可以访问这些属性。这通常用于在请求处理过程中传递数据。</li><li><code>getThemeSource()</code> 方法：获取主题资源，主题通常用于定制应用程序的外观。</li></ol></li><li><code>doDispatch()</code> 方法：在 <code>doService()</code> 中，<code>DispatcherServlet</code> 调用 <code>doDispatch()</code> 方法，这是实际的请求分发和处理的关键方法。在这个方法中，会进行以下操作：<ol><li><code>getAsyncManager()</code> 方法：获取异步请求管理器，用于处理异步请求。</li><li><code>checkMultipart()</code> 方法：检查请求是否包含多部分（multipart）内容，通常用于文件上传。</li><li><code>getHandler()</code> 方法：获取用于处理请求的处理器（Handler）。这个方法是决定如何处理请求的关键点。<ul><li><code>getHandlerMapping()</code> 方法：获取用于查找处理器的Handler Mapping。Handler Mapping 根据请求的URL或其他条件，将请求映射到适当的处理器方法。</li><li>一旦找到了合适的处理器，它会被返回，以便后续的请求处理。</li></ul></li></ol></li></ol><ul><li>下面是我上传了一个文件，可以看到耗时绝大部分都是在checkMultipart()方法上，等下次上传文件异常缓慢的时候，可以结合Nginx日志中的响应耗时和这里的耗时来分析到底是哪个步骤慢</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">`---ts=2023-09-07 11:00:24;thread_name=http-nio-80-exec-7;<span class="built_in">id</span>=35;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[725.449628ms] org.springframework.web.servlet.DispatcherServlet:doService()</span><br><span class="line">        +---[0.17% 1.209254ms ] org.springframework.web.servlet.DispatcherServlet:logRequest() <span class="comment">#926</span></span><br><span class="line">        |   `---[97.75% 1.182007ms ] org.springframework.web.servlet.DispatcherServlet:logRequest()</span><br><span class="line">        |       `---[6.82% 0.080573ms ] org.springframework.core.log.LogFormatUtils:traceDebug() <span class="comment">#980</span></span><br><span class="line">        +---[0.00% 0.014693ms ] org.springframework.web.util.WebUtils:isIncludeRequest() <span class="comment">#931</span></span><br><span class="line">        +---[0.00% 0.012721ms ] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() <span class="comment">#943</span></span><br><span class="line">        +---[0.00% 0.016321ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#943</span></span><br><span class="line">        +---[0.00% 0.003773ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#944</span></span><br><span class="line">        +---[0.00% 0.005059ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#945</span></span><br><span class="line">        +---[0.01% 0.06607ms ] org.springframework.web.servlet.DispatcherServlet:getThemeSource() <span class="comment">#946</span></span><br><span class="line">        |   `---[62.24% 0.041121ms ] org.springframework.web.servlet.DispatcherServlet:getThemeSource()</span><br><span class="line">        |       `---[28.35% min=0.004431ms,max=0.007225ms,total=0.011656ms,count=2] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() <span class="comment">#806</span></span><br><span class="line">        +---[0.00% 0.005496ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#946</span></span><br><span class="line">        +---[0.00% 0.021549ms ] org.springframework.web.servlet.FlashMapManager:retrieveAndUpdate() <span class="comment">#949</span></span><br><span class="line">        +---[0.00% 0.018169ms ] org.springframework.web.servlet.FlashMap:&lt;init&gt;() <span class="comment">#953</span></span><br><span class="line">        +---[0.00% 0.004453ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#953</span></span><br><span class="line">        +---[0.00% 0.007301ms ] javax.servlet.http.HttpServletRequest:setAttribute() <span class="comment">#954</span></span><br><span class="line">        +---[0.00% 0.010647ms ] javax.servlet.http.HttpServletRequest:getAttribute() <span class="comment">#959</span></span><br><span class="line">        +---[0.09% 0.633634ms ] org.springframework.web.util.ServletRequestPathUtils:parseAndCache() <span class="comment">#960</span></span><br><span class="line">        +---[99.66% 722.964056ms ] org.springframework.web.servlet.DispatcherServlet:doDispatch() <span class="comment">#964</span></span><br><span class="line">        |   `---[100.00% 722.939122ms ] org.springframework.web.servlet.DispatcherServlet:doDispatch()</span><br><span class="line">        |       +---[0.00% 0.011085ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#1036</span></span><br><span class="line">        |       +---[4.74% 34.255344ms ] org.springframework.web.servlet.DispatcherServlet:checkMultipart() <span class="comment">#1043</span></span><br><span class="line">        |       |   `---[99.94% 34.235142ms ] org.springframework.web.servlet.DispatcherServlet:checkMultipart()</span><br><span class="line">        |       |       +---[0.05% 0.017859ms ] org.springframework.web.multipart.MultipartResolver:isMultipart() <span class="comment">#1197</span></span><br><span class="line">        |       |       +---[0.03% 0.010256ms ] org.springframework.web.util.WebUtils:getNativeRequest() <span class="comment">#1198</span></span><br><span class="line">        |       |       +---[0.13% 0.046108ms ] org.springframework.web.servlet.DispatcherServlet:hasMultipartException() <span class="comment">#1203</span></span><br><span class="line">        |       |       |   `---[65.16% 0.030045ms ] org.springframework.web.servlet.DispatcherServlet:hasMultipartException()</span><br><span class="line">        |       |       |       `---[18.36% 0.005515ms ] javax.servlet.http.HttpServletRequest:getAttribute() <span class="comment">#1230</span></span><br><span class="line">        |       |       `---[99.65% 34.116944ms ] org.springframework.web.multipart.MultipartResolver:resolveMultipart() <span class="comment">#1209</span></span><br><span class="line">        |       +---[0.12% 0.836273ms ] org.springframework.web.servlet.DispatcherServlet:getHandler() <span class="comment">#1047</span></span><br><span class="line">        |       |   `---[96.10% 0.803643ms ] org.springframework.web.servlet.DispatcherServlet:getHandler()</span><br><span class="line">        |       |       `---[88.91% 0.714557ms ] org.springframework.web.servlet.HandlerMapping:getHandler() <span class="comment">#1265</span></span><br><span class="line">        |       +---[0.00% 0.011929ms ] org.springframework.web.servlet.HandlerExecutionChain:getHandler() <span class="comment">#1054</span></span><br><span class="line">        |       +---[0.01% 0.05063ms ] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter() <span class="comment">#1054</span></span><br><span class="line">        |       |   `---[63.99% 0.032397ms ] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter()</span><br><span class="line">        |       |       `---[37.22% 0.012058ms ] org.springframework.web.servlet.HandlerAdapter:supports() <span class="comment">#1301</span></span><br><span class="line">        |       +---[0.00% 0.008964ms ] javax.servlet.http.HttpServletRequest:getMethod() <span class="comment">#1057</span></span><br><span class="line">        |       +---[0.00% 0.017054ms ] org.springframework.http.HttpMethod:matches() <span class="comment">#1058</span></span><br><span class="line">        |       +---[0.00% 0.003344ms ] org.springframework.http.HttpMethod:matches() <span class="comment">#1059</span></span><br><span class="line">        |       +---[0.63% 4.578389ms ] org.springframework.web.servlet.HandlerExecutionChain:applyPreHandle() <span class="comment">#1066</span></span><br><span class="line">        |       +---[0.00% 0.005151ms ] org.springframework.web.servlet.HandlerExecutionChain:getHandler() <span class="comment">#1071</span></span><br><span class="line">        |       +---[94.22% 681.164697ms ] org.springframework.web.servlet.HandlerAdapter:handle() <span class="comment">#1071</span></span><br><span class="line">        |       +---[0.00% 0.022867ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1073</span></span><br><span class="line">        |       +---[0.01% 0.046345ms ] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName() <span class="comment">#1077</span></span><br><span class="line">        |       |   `---[19.75% 0.009155ms ] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName()</span><br><span class="line">        |       +---[0.00% 0.023564ms ] org.springframework.web.servlet.HandlerExecutionChain:applyPostHandle() <span class="comment">#1078</span></span><br><span class="line">        |       +---[0.02% 0.122935ms ] org.springframework.web.servlet.DispatcherServlet:processDispatchResult() <span class="comment">#1088</span></span><br><span class="line">        |       |   `---[76.98% 0.09464ms ] org.springframework.web.servlet.DispatcherServlet:processDispatchResult()</span><br><span class="line">        |       |       +---[24.65% 0.023328ms ] org.apache.commons.logging.Log:isTraceEnabled() <span class="comment">#1155</span></span><br><span class="line">        |       |       +---[16.65% 0.015762ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#1160</span></span><br><span class="line">        |       |       +---[6.36% 0.006018ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1160</span></span><br><span class="line">        |       |       `---[14.57% 0.013792ms ] org.springframework.web.servlet.HandlerExecutionChain:triggerAfterCompletion() <span class="comment">#1167</span></span><br><span class="line">        |       +---[0.00% 0.004283ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#1098</span></span><br><span class="line">        |       `---[0.23% 1.628707ms ] org.springframework.web.servlet.DispatcherServlet:cleanupMultipart() <span class="comment">#1107</span></span><br><span class="line">        |           `---[98.68% 1.607223ms ] org.springframework.web.servlet.DispatcherServlet:cleanupMultipart()</span><br><span class="line">        |               +---[0.50% 0.008005ms ] org.springframework.web.util.WebUtils:getNativeRequest() <span class="comment">#1248</span></span><br><span class="line">        |               `---[97.93% 1.574022ms ] org.springframework.web.multipart.MultipartResolver:cleanupMultipart() <span class="comment">#1250</span></span><br><span class="line">        +---[0.00% 0.009553ms ] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() <span class="comment">#967</span></span><br><span class="line">        +---[0.00% 0.006599ms ] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() <span class="comment">#967</span></span><br><span class="line">        `---[0.01% 0.10787ms ] org.springframework.web.util.ServletRequestPathUtils:setParsedRequestPath() <span class="comment">#974</span></span><br></pre></td></tr></table></figure><ul><li>分析特定方法的耗时，我们只需要明确指定一下类的全限定名以及方法名即可，例如 <code>trace com.aimc.paperreduction.web.controller.CommonController uploadPaper</code>，这里是分析CommonController包下的<code>uploadPaper</code>方法，正好之前加了阿里云的文本检测，可以看一下对性能的影响</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7]$ trace com.aimc.paperreduction.web.controller.CommonController uploadPaper</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 2) cost <span class="keyword">in</span> 292 ms, listenerId: 20</span><br><span class="line">`---ts=2023-09-07 11:45:12;thread_name=http-nio-80-exec-5;<span class="built_in">id</span>=33;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[931.752981ms] com.aimc.paperreduction.web.controller.CommonController$$EnhancerBySpringCGLIB$<span class="variable">$864d4ba2</span>:uploadPaper()</span><br><span class="line">        `---[99.94% 931.15232ms ] org.springframework.cglib.proxy.MethodInterceptor:intercept()</span><br><span class="line">            `---[97.68% 909.537879ms ] com.aimc.paperreduction.web.controller.CommonController:uploadPaper()</span><br><span class="line">                +---[0.02% 0.160456ms ] org.slf4j.Logger:info() <span class="comment">#221</span></span><br><span class="line">                +---[0.00% 0.043686ms ] org.springframework.web.multipart.MultipartFile:isEmpty() <span class="comment">#224</span></span><br><span class="line">                +---[99.91% 908.687093ms ] com.aimc.paperreduction.service.OrderService:uploadPaper() <span class="comment">#227</span></span><br><span class="line">                +---[0.00% 0.021838ms ] com.aimc.paperreduction.common.wrapper.Wrapper:getCode() <span class="comment">#228</span></span><br><span class="line">                +---[0.04% 0.325031ms ] org.slf4j.Logger:info() <span class="comment">#232</span></span><br><span class="line">                +---[0.00% 0.017715ms ] com.aimc.paperreduction.common.wrapper.Wrapper:getResult() <span class="comment">#233</span></span><br><span class="line">                `---[0.00% 0.028309ms ] com.aimc.paperreduction.web.controller.CommonController:success() <span class="comment">#233</span></span><br><span class="line"></span><br><span class="line">[arthas@7]$ trace  com.aimc.paperreduction.service.OrderService uploadPaper</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 4 , method count: 3) cost <span class="keyword">in</span> 659 ms, listenerId: 21</span><br><span class="line">`---ts=2023-09-07 11:46:32;thread_name=http-nio-80-exec-9;<span class="built_in">id</span>=37;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[871.142915ms] com.aimc.paperreduction.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$<span class="variable">$a91e94c</span>:uploadPaper()</span><br><span class="line">        `---[99.98% 871.000878ms ] org.springframework.cglib.proxy.MethodInterceptor:intercept()</span><br><span class="line">            `---[99.99% 870.908438ms ] com.aimc.paperreduction.service.impl.OrderServiceImpl:uploadPaper()</span><br><span class="line">                +---[0.01% 0.049453ms ] com.aimc.paperreduction.common.wrapper.Wrapper:&lt;init&gt;() <span class="comment">#1243</span></span><br><span class="line">                +---[0.00% 0.010567ms ] org.springframework.web.multipart.MultipartFile:getOriginalFilename() <span class="comment">#1246</span></span><br><span class="line">                +---[0.01% 0.064652ms ] com.aimc.paperreduction.utils.StringUtil:extractPathExt() <span class="comment">#1246</span></span><br><span class="line">                +---[0.01% 0.099063ms ] com.aimc.paperreduction.utils.PathUtil:getRealDiskPath() <span class="comment">#1263</span></span><br><span class="line">                +---[0.81% 7.026517ms ] com.aimc.paperreduction.service.impl.OrderServiceImpl:transferToDisk() <span class="comment">#1264</span></span><br><span class="line">                +---[6.17% 53.694128ms ] com.aspose.words.Document:&lt;init&gt;() <span class="comment">#1272</span></span><br><span class="line">                +---[41.01% 357.150979ms ] com.aspose.words.Document:save() <span class="comment">#1274</span></span><br><span class="line">                +---[0.22% 1.918176ms ] com.aspose.words.Document:cleanup() <span class="comment">#1277</span></span><br><span class="line">                +---[0.00% 0.010126ms ] com.aimc.paperreduction.model.entity.PaperInfo:&lt;init&gt;() <span class="comment">#1284</span></span><br><span class="line">                +---[14.27% 124.293242ms ] com.aimc.paperreduction.utils.CommonUtil:countWords() <span class="comment">#1286</span></span><br><span class="line">                +---[34.64% 301.714162ms ] com.aimc.paperreduction.utils.CommonUtil:isGreenDoc() <span class="comment">#1287</span></span><br><span class="line">                +---[0.01% 0.05563ms ] org.apache.commons.lang3.StringUtils:isNotBlank() <span class="comment">#1288</span></span><br></pre></td></tr></table></figure><ul><li>从上面的结果中，我们看到，阿里的文本检测占了三分之一的时长，我们可以继续使用trace命令来看为什么耗时这么久</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 233 ms, listenerId: 22</span><br><span class="line">`---ts=2023-09-07 11:49:51;thread_name=http-nio-80-exec-10;<span class="built_in">id</span>=38;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[294.261119ms] com.aimc.paperreduction.utils.CommonUtil:isGreenDoc()</span><br><span class="line">        +---[25.88% 76.155345ms ] org.apache.poi.xwpf.usermodel.XWPFDocument:&lt;init&gt;() <span class="comment">#1700</span></span><br><span class="line">        +---[0.00% 0.006894ms ] org.apache.poi.xwpf.usermodel.XWPFDocument:getParagraphs() <span class="comment">#1701</span></span><br><span class="line">        +---[0.44% min=0.001325ms,max=0.124972ms,total=1.306473ms,count=39] org.apache.poi.xwpf.usermodel.XWPFParagraph:getText() <span class="comment">#1702</span></span><br><span class="line">        +---[73.52% 216.339053ms ] com.aimc.paperreduction.utils.TextReview:textReview() <span class="comment">#1709</span></span><br><span class="line">        +---[0.00% 0.012255ms ] com.aimc.paperreduction.utils.TextReview:textReview() <span class="comment">#1715</span></span><br><span class="line">        `---[0.02% 0.048882ms ] org.apache.poi.xwpf.usermodel.XWPFDocument:close() <span class="comment">#1717</span></span><br></pre></td></tr></table></figure><ul><li>可以看到主要是TextReview耗时较长，同时XWPFDocument对象的创建也很吃性能，代码中要避免频繁创建销毁此对象，继续看TextReview</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7]$ trace com.aimc.paperreduction.utils.TextReview textReview</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 202 ms, listenerId: 23</span><br><span class="line">`---ts=2023-09-07 11:53:18;thread_name=http-nio-80-exec-1;<span class="built_in">id</span>=2f;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@55634720</span><br><span class="line">    `---[209.523489ms] com.aimc.paperreduction.utils.TextReview:textReview()</span><br><span class="line">        +---[0.03% 0.0623ms ] org.apache.commons.lang3.StringUtils:isBlank() <span class="comment">#17</span></span><br><span class="line">        +---[0.01% 0.01229ms ] com.aliyun.teaopenapi.models.Config:&lt;init&gt;() <span class="comment">#21</span></span><br><span class="line">        +---[0.01% 0.011889ms ] com.aliyun.teaopenapi.models.Config:setAccessKeyId() <span class="comment">#22</span></span><br><span class="line">        +---[0.00% 0.007757ms ] com.aliyun.teaopenapi.models.Config:setAccessKeySecret() <span class="comment">#23</span></span><br><span class="line">        +---[0.00% 0.007802ms ] com.aliyun.teaopenapi.models.Config:setEndpoint() <span class="comment">#25</span></span><br><span class="line">        +---[0.00% 0.006391ms ] com.aliyun.teaopenapi.models.Config:setConnectTimeout() <span class="comment">#26</span></span><br><span class="line">        +---[0.00% 0.006966ms ] com.aliyun.teaopenapi.models.Config:setReadTimeout() <span class="comment">#27</span></span><br><span class="line">        +---[0.07% 0.154858ms ] com.aliyun.green20220302.Client:&lt;init&gt;() <span class="comment">#28</span></span><br><span class="line">        +---[0.01% 0.011248ms ] com.alibaba.fastjson.JSONObject:&lt;init&gt;() <span class="comment">#30</span></span><br><span class="line">        +---[0.01% 0.012672ms ] com.alibaba.fastjson.JSONObject:put() <span class="comment">#31</span></span><br><span class="line">        +---[0.01% 0.01861ms ] com.aliyun.green20220302.models.TextModerationRequest:&lt;init&gt;() <span class="comment">#33</span></span><br><span class="line">        +---[0.01% 0.012414ms ] com.aliyun.green20220302.models.TextModerationRequest:setService() <span class="comment">#34</span></span><br><span class="line">        +---[0.08% 0.160351ms ] com.alibaba.fastjson.JSONObject:toJSONString() <span class="comment">#35</span></span><br><span class="line">        +---[0.00% 0.009442ms ] com.aliyun.green20220302.models.TextModerationRequest:setServiceParameters() <span class="comment">#35</span></span><br><span class="line">        +---[99.33% 208.114925ms ] com.aliyun.green20220302.Client:textModeration() <span class="comment">#36</span></span><br><span class="line">        +---[0.01% 0.028103ms ] com.aliyun.green20220302.models.TextModerationResponse:getBody() <span class="comment">#37</span></span><br><span class="line">        +---[0.01% 0.013397ms ] com.aliyun.green20220302.models.TextModerationResponseBody:getCode() <span class="comment">#38</span></span><br><span class="line">        +---[0.01% 0.018539ms ] com.aliyun.green20220302.models.TextModerationResponseBody:getData() <span class="comment">#40</span></span><br><span class="line">        `---[0.02% 0.031569ms ] com.aliyun.green20220302.models.TextModerationResponseBody<span class="variable">$TextModerationResponseBodyData</span>:getLabels() <span class="comment">#41</span></span><br></pre></td></tr></table></figure><ul><li>定位到代码中</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextModerationResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.textModeration(textModerationRequest);</span><br></pre></td></tr></table></figure><ul><li>这是一个同步调用，会等待服务器返回结果，等待期间会阻塞，如果服务端处理时间较长，这个代码会导致程序在这里一直阻塞。优化方案就是把这里改成了异步处理</li><li>其实解决很简单，关键在于怎么定位并找到解决问题的方法，特意写了篇文章来记录一下</li></ul></li></ul>]]></content>
    
    
    <summary type="html">之前闲的时候，让我分析一下耗时的问题，然后就找到了Arthas</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="SpringBoot" scheme="https://cyborg2077.github.io/tags/SpringBoot/"/>
    
    <category term="Arthas" scheme="https://cyborg2077.github.io/tags/Arthas/"/>
    
    <category term="性能分析" scheme="https://cyborg2077.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose搭建ELK</title>
    <link href="https://cyborg2077.github.io/2023/09/02/DockerComposeELK/"/>
    <id>https://cyborg2077.github.io/2023/09/02/DockerComposeELK/</id>
    <published>2023-09-02T10:10:01.000Z</published>
    <updated>2023-10-01T13:43:47.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在最前">写在最前</h2><ul><li>既然都看到这了，那肯定都是有基础的了，由于在网上貌似没找到docker-compose搭建ELK的，有的也不太规范<del>（虽然我也不咋规范）</del>，我最近刚好也需要搭建一个ELK，随手写一下</li></ul><h2 id="初始化环境">初始化环境</h2><ul><li>根据目录结构创建好对应的文件</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ELK</span><br><span class="line">├── docker-compose<span class="selector-class">.yml</span></span><br><span class="line">├── elasticsearch</span><br><span class="line">│   ├── data</span><br><span class="line">│   ├── logs</span><br><span class="line">│   └── plugins</span><br><span class="line">├── kibana</span><br><span class="line">│   └── config</span><br><span class="line">│       └── kibana<span class="selector-class">.yml</span></span><br><span class="line">└── logstash</span><br><span class="line">    ├── config</span><br><span class="line">    │   └── logstash<span class="selector-class">.yml</span></span><br><span class="line">    └── pipeline</span><br><span class="line">        └── logstash.conf</span><br></pre></td></tr></table></figure><h2 id="编辑docker-compose-yml">编辑docker-compose.yml</h2><ul><li>需要注意的点就是他们三个要放在同一个networks里</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.17.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">network_elk_test</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">cluster.name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">      <span class="attr">ES_JAVA_OPTS:</span> <span class="string">&quot;-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.17.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">network_elk_test</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">I18N_LOCALE:</span> <span class="string">zh-CN</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:7.17.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">network_elk_test</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4560:4560&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">network_elk_test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ELKTest</span></span><br></pre></td></tr></table></figure><h2 id="编辑kibana-yml文件">编辑kibana.yml文件</h2><ul><li>由于他们三个是处于同一个networks下，所以这里可以使用服务名来互相访问</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">server.shutdownTimeout:</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">server.publicBaseUrl:</span> <span class="string">&quot;http://kibana:5601&quot;</span></span><br></pre></td></tr></table></figure><h2 id="编辑logstash-yml">编辑logstash.yml</h2><ul><li>这里同样是使用服务名来访问es，由于我这里搭建的是7.x版本，所以要加上第三行那行配置，如果你搭建的是7.x版本之前，可以忽略第三行</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">pipeline.ecs_compatibility:</span> <span class="string">v1</span></span><br></pre></td></tr></table></figure><h2 id="编辑logstash-conf">编辑logstash.conf</h2><ul><li>这里要注意索引名的格式啊，appName是获取spring.application.name里的值来拼接的，后面是加上日期，每一天的每一个服务都有对应的日志，这样排查问题查日志的时候都比较方便</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 4560</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;elasticsearch:9200&quot;</span><br><span class="line">    index =&gt; &quot;%&#123;appName&#125;-%&#123;+YYYY.MM.dd&#125;&quot;  #索引名</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java服务导入logstash依赖">Java服务导入logstash依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在resources目录下创建logback-spring-xml">在resources目录下创建logback-spring.xml</h2><ul><li><a href="http://xn--logstashspring-fx7vk61edscs91c7lc945c13njw1i193ct25apgk.application.name">这里主要就是指定logstash端口和spring.application.name</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs/demo.log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;appName&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;logstash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定logstash的ip及端口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>XX.XX.XX.XX:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LogstashEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;&quot;spring.application.name&quot;:&quot;$&#123;appName&#125;&quot;&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;logstash&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置好了，启动服务，会自动创建服务名+当前日期的索引，去kibana里可以看到</li></ul>]]></content>
    
    
    <summary type="html">随写</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="ELK" scheme="https://cyborg2077.github.io/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>注解封装公平读写锁</title>
    <link href="https://cyborg2077.github.io/2023/09/02/FairRWLock/"/>
    <id>https://cyborg2077.github.io/2023/09/02/FairRWLock/</id>
    <published>2023-09-02T10:10:01.000Z</published>
    <updated>2023-10-01T13:43:47.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求">需求</h2><ul><li>项目里有个场景，读的并发很大，但仅仅涉及到很少的写操作。那么此时采用读写锁就是个不错的选择，但是默认的读写锁是非公平锁，如果读并发很大，写请求到达时可能抢不到锁，所以此时需要使用公平读写锁，为了提升复用性，采取注解的形式进行封装。</li><li>如果一个class的object需要这个能力，加入注解<code>@ReadWriteResource</code></li><li>具体的函数，如果加<code>@ReadOnlyOperator</code>注解，那么表明这是一个读任务，可以并发执行；</li><li>如果加<code>@WriteOperator</code>，那么表明这是一个写任务，和读任务、写任务互斥执行；</li></ul><div class="note info no-icon flat"><ul><li>需要注意的是，这里需要控制锁粒度为对象级别的锁。</li></ul></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码如下</span></span><br><span class="line"><span class="meta">@ReadWriteResource</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ManagedResource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOnlyOperator</span></span><br><span class="line">    String <span class="title function_">getResource</span><span class="params">(<span class="type">int</span> key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOnlyOperator</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getName</span><span class="params">(<span class="type">int</span> key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WriteOperator</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateResource</span><span class="params">(<span class="type">int</span> key, String resource)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体实现">具体实现</h2><ul><li><p>采用注解+动态代理的方式来实现，思路就是根据<code>@ReadWriteResource</code>判断该对象是否需要动态代理，然后拦截对象中的方法，在方法执行前后加锁释放。</p><ol><li>首先创建三个注解</li></ol>  <div class="tabs" id="注解封装公平读写锁"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注解封装公平读写锁-1">ReadWriteResource</button></li><li class="tab"><button type="button" data-href="#注解封装公平读写锁-2">ReadOnlyOperator</button></li><li class="tab"><button type="button" data-href="#注解封装公平读写锁-3">WriteOperator</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注解封装公平读写锁-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ReadWriteResource &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注解封装公平读写锁-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ReadOnlyOperator &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注解封装公平读写锁-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WriteOperator &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ol start="2"><li>然后编写一个代理工厂类，用于创建代理对象，首先判断对象的Class是否有<code>@ReadWriteResource</code>注解，以此判断是否要为该对象创建代理对象</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteResourceProxyFactory</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">createProxy</span><span class="params">(T target)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line">        <span class="comment">// 判断该类是否有ReadWriteResource注解</span></span><br><span class="line">        <span class="type">ReadWriteResource</span> <span class="variable">annotation</span> <span class="operator">=</span> clazz.getAnnotation(ReadWriteResource.class);</span><br><span class="line">        <span class="comment">// 如果有注解，则创建代理对象</span></span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里并不需要将target对象传入，因为拦截器拦截的是目标对象的方法，而不是目标对象本身</span></span><br><span class="line">            <span class="type">ReadWriteResourceInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadWriteResourceInterceptor</span>();</span><br><span class="line">            <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">            enhancer.setSuperclass(clazz);</span><br><span class="line">            enhancer.setCallback(interceptor);</span><br><span class="line">            <span class="keyword">return</span> (T) enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有注解，直接返回原对象</span></span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>构造函数先为对象初始化读写锁，拦截逻辑中判断方法上是否存在<code>@ReadOnlyOperator</code>或<code>WriteOperator</code>注解，来确定是读操作还是写操作，然后加上对应的锁。</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteResourceInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock readLock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock writeLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadWriteResourceInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ReentrantReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.readLock = readWriteLock.readLock();</span><br><span class="line">        <span class="built_in">this</span>.writeLock = readWriteLock.writeLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">ReadOnlyOperator</span> <span class="variable">readOnlyOperatorAnnotation</span> <span class="operator">=</span> method.getAnnotation(ReadOnlyOperator.class);</span><br><span class="line">        <span class="type">WriteOperator</span> <span class="variable">writeOperatorAnnotation</span> <span class="operator">=</span> method.getAnnotation(WriteOperator.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (readOnlyOperatorAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果包含ReadOnlyOperator注解，加读锁</span></span><br><span class="line">            readLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行原方法</span></span><br><span class="line">                <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放读锁</span></span><br><span class="line">                readLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (writeOperatorAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果包含WriteOperator注解，加写锁</span></span><br><span class="line">            writeLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行原方法</span></span><br><span class="line">                <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放写锁</span></span><br><span class="line">                writeLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没加注解的普通方法，返回直接调用原方法</span></span><br><span class="line">            <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>基本使用，伪代码如下，测试的时候可以在日志中打印出读写锁地址</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReadWriteResourceProxyFactory&lt;ManagedResource&gt; proxyFactory = <span class="keyword">new</span> <span class="title class_">ReadWriteResourceProxyFactory</span>&lt;&gt;();</span><br><span class="line"><span class="type">ManagedResource</span> <span class="variable">proxy</span> <span class="operator">=</span> proxyFactory.createProxy(<span class="keyword">new</span> <span class="title class_">ManagedResource</span>());</span><br><span class="line">proxy.getName();</span><br><span class="line">proxy.updateResource();</span><br></pre></td></tr></table></figure><ul><li>写完了打包上传至maven私服，以后就是封装自己的工具类了</li></ul></li></ul><h2 id="AOP实现">AOP实现</h2><ul><li>之前其实采用的是注解+AOP来封装的，然后写着写着就发现了点问题，这里也来和大家分享一下吧。</li><li>首先注解方面没有变化，不过我没用到<code>@ReadWriteResource</code>注解，因为找切点的时候可以直接根据方法上是否有<code>@ReadOnlyOperator</code>和<code>@WriteOperator</code>来判断。</li><li>AOP的逻辑如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 明天更</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">工作需要造了个小轮子</summary>
    
    
    
    <category term="随写" scheme="https://cyborg2077.github.io/categories/%E9%9A%8F%E5%86%99/"/>
    
    
    <category term="Java" scheme="https://cyborg2077.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在数据库中存储树状结构</title>
    <link href="https://cyborg2077.github.io/2023/07/21/StoringTreeInDatabases/"/>
    <id>https://cyborg2077.github.io/2023/07/21/StoringTreeInDatabases/</id>
    <published>2023-07-21T11:29:46.000Z</published>
    <updated>2023-10-01T15:43:00.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><ul><li>实际开发中很多地方都需要存储树状结构，例如组织架构中需要用树状结构来表示公司员工之间的层级关系、电商网站中用树状结构来组织商品分类、论坛帖子或者评论中可以通过回复来构成树状结构。</li><li>假设现在要存储一下公司的人员结构，大概层次如下<br><img src="https://s1.ax1x.com/2023/07/21/pCb6A4f.png" alt=""></li><li>怎么存储这个结构？并且要获取以下信息<ol><li>查询小天的直接上司；</li><li>查询老宋管理下的直属员工；</li><li>查询小天的所有上司；</li><li>查询老王管理的所有员工。</li></ol></li></ul><h2 id="方案一-Adjacency-List（存储父节点）">方案一 Adjacency List（存储父节点）</h2><h3 id="数据库存储结构">数据库存储结构</h3><ul><li></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for employees</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employees`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employees`  (</span><br><span class="line">  `eid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `ename` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `position` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;位置&#x27;</span>,</span><br><span class="line">  `parent_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;上级ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`eid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of employees</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;老王&#x27;</span>, <span class="string">&#x27;高管&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;老宋&#x27;</span>, <span class="string">&#x27;产品部主管&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;老牛&#x27;</span>, <span class="string">&#x27;技术部主管&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;小吴&#x27;</span>, <span class="string">&#x27;产品A组长&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;产品B组长&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;小欢&#x27;</span>, <span class="string">&#x27;产品经理&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;小小&#x27;</span>, <span class="string">&#x27;产品经理&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;小天&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;小里&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;小黑&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;小胡&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;小蓝&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;小黄&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;小真&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>, <span class="number">7</span>);   </span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">eid</th><th style="text-align:center">ename</th><th style="text-align:center">position</th><th style="text-align:center">parent_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">老王</td><td style="text-align:center">高管</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">老宋</td><td style="text-align:center">产品部主管</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">老牛</td><td style="text-align:center">技术部主管</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">小吴</td><td style="text-align:center">产品A组长</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">小李</td><td style="text-align:center">产品B组长</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">小欢</td><td style="text-align:center">产品经理</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">小小</td><td style="text-align:center">产品经理</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">小天</td><td style="text-align:center">产品部员工</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">小里</td><td style="text-align:center">产品部员工</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">小黑</td><td style="text-align:center">产品部员工</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">小胡</td><td style="text-align:center">产品部员工</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">小丽</td><td style="text-align:center">技术部员工</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">小蓝</td><td style="text-align:center">技术部员工</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">小黄</td><td style="text-align:center">技术部员工</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">小真</td><td style="text-align:center">技术部员工</td><td style="text-align:center">7</td></tr></tbody></table><h3 id="SQL示例">SQL示例</h3><h4 id="添加节点">添加节点</h4><ul><li>例如我要在小吴下添加一个员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(eid, ename, position, parent_id) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">16</span>, <span class="string">&#x27;小魏&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h4 id="查询小天的直接上司">查询小天的直接上司</h4><ul><li>方式一</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.eid, e1.ename</span><br><span class="line"><span class="keyword">FROM</span> employees e1, employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.eid <span class="operator">=</span> e2.parent_id</span><br><span class="line"><span class="keyword">AND</span> e2.ename <span class="operator">=</span> <span class="string">&#x27;小天&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> eid, ename</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> eid <span class="operator">=</span> (<span class="keyword">SELECT</span> parent_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;小天&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>虽然上面两种方式都可以查询，但是推荐使用方式一来进行查询。因为方式二使用了子查询，每次运行外部查询时，都需要重新计算子查询，如果子查询中返回了大量的数据，会导致查询效率低下，绝大多数情况下，使用方式一的查询效率会更高。</li></ul><h4 id="查询老宋的直属员工">查询老宋的直属员工</h4><ul><li>这次我就不写子查询的方式了</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e2.eid, e2.ename </span><br><span class="line"><span class="keyword">FROM</span> employees e1, employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e2.parent_id <span class="operator">=</span> e1.eid</span><br><span class="line"><span class="keyword">AND</span> e1.ename <span class="operator">=</span> <span class="string">&#x27;老宋&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="查询小天的所有上司">查询小天的所有上司</h4><ul><li>在MySQL8.0以后的版本，使用递归CTE可以轻松实现</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> Leader <span class="keyword">AS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> eid, ename, position, parent_id </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;小天&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span> </span><br><span class="line"><span class="keyword">SELECT</span> e.eid, e.ename, e.position, e.parent_id </span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Leader l</span><br><span class="line"><span class="keyword">ON</span> e.eid <span class="operator">=</span> l.parent_id</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> eid, ename, position <span class="keyword">FROM</span> Leader </span><br></pre></td></tr></table></figure><ul><li>但是MySQL8.0之前没有CTE，只能写个函数，用循环进行循环查询，先查直接上司，再查直接上司的直接上司，实现起来很麻烦，并且返回的结果也不能是一张表</li></ul><h4 id="查询老王的所有员工">查询老王的所有员工</h4><ul><li>这里还是使用递归CTE查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> Emp <span class="keyword">AS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> eid, ename, position, parent_id </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;老王&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> e.eid, e.ename, e.position, e.parent_id </span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Emp emp </span><br><span class="line"><span class="keyword">ON</span> e.parent_id <span class="operator">=</span> emp.eid</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> eid, ename, position <span class="keyword">FROM</span> Emp </span><br></pre></td></tr></table></figure><h2 id="方案二-Path-Enumeration（存储路径）">方案二 Path Enumeration（存储路径）</h2><ul><li>Path Enumeration 路径枚举法，存储根节点到每个子节点的路径</li></ul><h3 id="数据库存储结构-2">数据库存储结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for employees2</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employees2`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employees2`  (</span><br><span class="line">  `eid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `ename` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `position` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;位置&#x27;</span>,</span><br><span class="line">  `path` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;所在路径&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`eid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of employees2</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;老王&#x27;</span>, <span class="string">&#x27;高管&#x27;</span>, <span class="string">&#x27;/1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;老宋&#x27;</span>, <span class="string">&#x27;产品部主管&#x27;</span>, <span class="string">&#x27;/1/2&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;老牛&#x27;</span>, <span class="string">&#x27;技术部主管&#x27;</span>, <span class="string">&#x27;/1/3&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;小吴&#x27;</span>, <span class="string">&#x27;产品A组长&#x27;</span>, <span class="string">&#x27;/1/2/4&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;产品B组长&#x27;</span>, <span class="string">&#x27;/1/2/5&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;小欢&#x27;</span>, <span class="string">&#x27;产品经理&#x27;</span>, <span class="string">&#x27;/1/3/6&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;小小&#x27;</span>, <span class="string">&#x27;产品经理&#x27;</span>, <span class="string">&#x27;/1/3/7&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;小天&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="string">&#x27;/1/2/4/8&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;小里&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="string">&#x27;/1/2/4/9&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;小黑&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="string">&#x27;/1/2/5/10&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;小胡&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>, <span class="string">&#x27;/1/2/5/11&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>, <span class="string">&#x27;/1/3/6/12&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;小蓝&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>, <span class="string">&#x27;/1/3/6/13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;小黄&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>, <span class="string">&#x27;/1/3/7/14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;小真&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>, <span class="string">&#x27;/1/3/7/15&#x27;</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">eid</th><th style="text-align:center">ename</th><th style="text-align:center">position</th><th style="text-align:center">parent_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">老王</td><td style="text-align:center">高管</td><td style="text-align:center">/1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">老宋</td><td style="text-align:center">产品部主管</td><td style="text-align:center">/1/2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">老牛</td><td style="text-align:center">技术部主管</td><td style="text-align:center">/1/3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">小吴</td><td style="text-align:center">产品A组长</td><td style="text-align:center">/1/2/4</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">小李</td><td style="text-align:center">产品B组长</td><td style="text-align:center">/1/2/5</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">小欢</td><td style="text-align:center">产品经理</td><td style="text-align:center">/1/3/6</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">小小</td><td style="text-align:center">产品经理</td><td style="text-align:center">/1/3/7</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">小天</td><td style="text-align:center">产品部员工</td><td style="text-align:center">/1/2/4/8</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">小里</td><td style="text-align:center">产品部员工</td><td style="text-align:center">/1/2/4/9</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">小黑</td><td style="text-align:center">产品部员工</td><td style="text-align:center">/1/2/5/10</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">小胡</td><td style="text-align:center">产品部员工</td><td style="text-align:center">/1/2/5/11</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">小丽</td><td style="text-align:center">技术部员工</td><td style="text-align:center">/1/3/6/12</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">小蓝</td><td style="text-align:center">技术部员工</td><td style="text-align:center">/1/3/6/13</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">小黄</td><td style="text-align:center">技术部员工</td><td style="text-align:center">/1/3/7/14</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">小真</td><td style="text-align:center">技术部员工</td><td style="text-align:center">/1/3/7/15</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">小魏</td><td style="text-align:center">产品部员工</td><td style="text-align:center">/1/2/4/16</td></tr></tbody></table><h3 id="SQL示例-2">SQL示例</h3><h4 id="添加节点-2">添加节点</h4><ul><li>依旧是在小吴节点插入一个下属员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 插入下属员工小魏，eid为16，查询父级节点path，拼接小魏的path</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees2` (`eid`, `ename`, `position`, `path`)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">16</span> <span class="keyword">AS</span> eid, <span class="string">&#x27;小魏&#x27;</span> <span class="keyword">AS</span> ename, <span class="string">&#x27;产品部员工&#x27;</span> <span class="keyword">AS</span> position, CONCAT(path, <span class="string">&#x27;/16&#x27;</span>) <span class="keyword">AS</span> path</span><br><span class="line"><span class="keyword">FROM</span> `employees2`</span><br><span class="line"><span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;小吴&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="查询小天的直接上司-2">查询小天的直接上司</h4><ul><li>在上一个解决方案中能轻易做到的事情，在这个方案中却有些麻烦了，因为我们需要对path字段做处理，去掉<code>/</code> + <code>自身id</code> 之后才是上司path的值，例如小天的path是<code>/1/2/4/8</code>，小天的eid是8，那么上司id就需要去掉<code>/8</code>，为<code>/1/2/4</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.eid,e1.ename,e1.position </span><br><span class="line"><span class="keyword">FROM</span> employees2 e1,employees2 e2 </span><br><span class="line"><span class="keyword">WHERE</span>e2.ename <span class="operator">=</span> <span class="string">&#x27;小天&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> e1.path <span class="operator">=</span> REPLACE (e2.path,CONCAT( <span class="string">&#x27;/&#x27;</span>, e2.eid ), <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="查询老宋的直属员工-2">查询老宋的直属员工</h4><ul><li>这里注意是查询直属员工，而不是所有员工，所以不能用LIKE来模糊匹配，而是需要使用正则来匹配单个层级</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.eid, e1.ename, e1.position</span><br><span class="line"><span class="keyword">FROM</span> employees2 e1, employees2 e2</span><br><span class="line"><span class="keyword">WHERE</span> e2.ename <span class="operator">=</span> <span class="string">&#x27;老宋&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> e1.path REGEXP CONCAT(e2.path, <span class="string">&#x27;/[0-9]&#123;1,&#125;$&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>但是如果想使用LIKE做模糊匹配也不是不行，可以增加一个level字段，用于表示层级。<ul><li>例如老王的level是1，老宋的level是2，老宋的直属员工的level就是3，以此类推，在构建查询语句的时候额外判定一下level就好了</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.eid, e1.ename, e1.position</span><br><span class="line"><span class="keyword">FROM</span> employees2 e1, employees2 e2</span><br><span class="line"><span class="keyword">WHERE</span> e2.ename <span class="operator">=</span> <span class="string">&#x27;老宋&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> e1.path <span class="keyword">LIKE</span> CONCAT(e2.path, <span class="string">&#x27;/%&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> e1.level <span class="operator">=</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="查询小天的所有上司-2">查询小天的所有上司</h4><ul><li>查询所有上司或者所有员工的时候，就可以使用LIKE做模糊匹配</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.eid, e1.ename, e1.position</span><br><span class="line"><span class="keyword">FROM</span> employees2 e1, employees2 e2</span><br><span class="line"><span class="keyword">WHERE</span> e2.ename <span class="operator">=</span> <span class="string">&#x27;小天&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> e2.path <span class="keyword">LIKE</span> CONCAT(e1.path, <span class="string">&#x27;/%&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="查询老王的所有员工-2">查询老王的所有员工</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.eid, e1.ename, e1.position</span><br><span class="line"><span class="keyword">FROM</span> employees2 e1, employees2 e2</span><br><span class="line"><span class="keyword">WHERE</span> e2.ename <span class="operator">=</span> <span class="string">&#x27;老王&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> e1.path <span class="keyword">LIKE</span> CONCAT(e2.path, <span class="string">&#x27;/%&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="方案三-Closure-Table-存储关系表和深度">方案三 Closure Table(存储关系表和深度)</h2><ul><li>保存每个节点与其各个子节点的关系，也就是记录以其为根节点的全部子节点信息。</li></ul><h3 id="数据库存储结构-3">数据库存储结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for employees3</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employees3`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employees3`  (</span><br><span class="line">  `eid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `ename` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `position` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;位置&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`eid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of employees3</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;老王&#x27;</span>, <span class="string">&#x27;高管&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;老宋&#x27;</span>, <span class="string">&#x27;产品部主管&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;老牛&#x27;</span>, <span class="string">&#x27;技术部主管&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;小吴&#x27;</span>, <span class="string">&#x27;产品A组长&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;产品B组长&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;小欢&#x27;</span>, <span class="string">&#x27;产品经理&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;小小&#x27;</span>, <span class="string">&#x27;产品经理&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;小天&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;小里&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;小黑&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;小胡&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;小蓝&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;小黄&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees3` <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;小真&#x27;</span>, <span class="string">&#x27;技术部员工&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for emp_relations</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `emp_relations`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `emp_relations`  (</span><br><span class="line">  `root_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;根节点的eid&#x27;</span>,</span><br><span class="line">  `depth` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;根节点到该节点的深度&#x27;</span>,</span><br><span class="line">  `is_leaf` tinyint(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;该节点是否为叶子节点&#x27;</span>,</span><br><span class="line">  `node_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;该节点的eid&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of emp_relations</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">11</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">14</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">11</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp_relations` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure><ul><li>主表</li></ul><table><thead><tr><th style="text-align:center">eid</th><th style="text-align:center">ename</th><th style="text-align:center">position</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">老王</td><td style="text-align:center">高管</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">老宋</td><td style="text-align:center">产品部主管</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">老牛</td><td style="text-align:center">技术部主管</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">小吴</td><td style="text-align:center">产品A组长</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">小李</td><td style="text-align:center">产品B组长</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">小欢</td><td style="text-align:center">产品经理</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">小小</td><td style="text-align:center">产品经理</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">小天</td><td style="text-align:center">产品部员工</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">小里</td><td style="text-align:center">产品部员工</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">小黑</td><td style="text-align:center">产品部员工</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">小胡</td><td style="text-align:center">产品部员工</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">小丽</td><td style="text-align:center">技术部员工</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">小蓝</td><td style="text-align:center">技术部员工</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">小黄</td><td style="text-align:center">技术部员工</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">小真</td><td style="text-align:center">技术部员工</td></tr></tbody></table><ul><li>闭包表</li></ul><table><thead><tr><th style="text-align:center">root_id</th><th style="text-align:center">depth</th><th style="text-align:center">is_leaf</th><th style="text-align:center">node_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">14</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">14</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">12</td></tr></tbody></table><h3 id="SQL示例-3">SQL示例</h3><h4 id="添加节点-3">添加节点</h4><ul><li>依旧是在小吴下添加下属节点，在插入下属节点后，找出以小吴节点为后代的那些节点作为和下属节点之间有后代关系，插入到数据表。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.插入自己M，eid为16</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees3 ( eid, ename, position )</span><br><span class="line"><span class="keyword">VALUES</span> ( <span class="number">16</span>, <span class="string">&#x27;小魏&#x27;</span>, <span class="string">&#x27;产品部员工&#x27;</span> );</span><br><span class="line"><span class="comment">-- 2.查出以小吴为后代的节点数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_relations <span class="keyword">WHERE</span> node_id<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 3.插入到数据表：深度+1作为和M节点的深度 </span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp_relations ( root_id, depth, is_leaf, node_id )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">16</span> ),</span><br><span class="line">( <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">16</span> ),</span><br><span class="line">( <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span> ),</span><br><span class="line">( <span class="number">16</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">16</span> );</span><br></pre></td></tr></table></figure><h4 id="查询小天的直接上司-3">查询小天的直接上司</h4><ul><li>在关系表中找到node_id为小天id，depth为1的根节点id即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e2.eid, e2.ename, e2.position </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees3 e1,</span><br><span class="line">employees3 e2,</span><br><span class="line">emp_relations rel </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e1.ename <span class="operator">=</span> <span class="string">&#x27;小天&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> rel.node_id <span class="operator">=</span> e1.eid </span><br><span class="line"><span class="keyword">AND</span> rel.depth <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">AND</span> e2.eid <span class="operator">=</span> rel.root_id</span><br></pre></td></tr></table></figure><h4 id="查询老宋的直属员工-3">查询老宋的直属员工</h4><ul><li>只要查询root_id为老宋eid且深度为1的node_id即为其直接下属员工id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e1.eid,e1.ename, e1.position</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees3 e1,</span><br><span class="line">employees3 e2,</span><br><span class="line">emp_relations rel </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e2.ename <span class="operator">=</span> <span class="string">&#x27;老宋&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> rel.root_id <span class="operator">=</span> e2.eid </span><br><span class="line"><span class="keyword">AND</span> rel.depth <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">AND</span> e1.eid <span class="operator">=</span> rel.node_id</span><br></pre></td></tr></table></figure><h4 id="查询小天的所有上司-3">查询小天的所有上司</h4><ul><li>只要在关系表中找到node_id为小天eid且depth大于0的root_id即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e2.eid,e2.ename, e2.position</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees3 e1,</span><br><span class="line">employees3 e2,</span><br><span class="line">emp_relations rel </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e1.ename <span class="operator">=</span> <span class="string">&#x27;小天&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> rel.node_id <span class="operator">=</span> e1.eid </span><br><span class="line"><span class="keyword">AND</span> rel.depth <span class="operator">&gt;</span> <span class="number">0</span> </span><br><span class="line"><span class="keyword">AND</span> e2.eid <span class="operator">=</span> rel.root_id  </span><br></pre></td></tr></table></figure><h4 id="查询老王的所有员工-3">查询老王的所有员工</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e1.eid,e1.ename, e1.position </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees3 e1,</span><br><span class="line">employees3 e2,</span><br><span class="line">emp_relations rel </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e2.ename <span class="operator">=</span> <span class="string">&#x27;老王&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> rel.root_id <span class="operator">=</span> e2.eid </span><br><span class="line"><span class="keyword">AND</span> rel.depth <span class="operator">&gt;</span> <span class="number">0</span> </span><br><span class="line"><span class="keyword">AND</span> e1.eid <span class="operator">=</span> rel.node_id</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ol><li>Adjacency List（邻接列表）:</li></ol><ul><li>优点：简单易于理解和实现，只需要一个父节点 ID 字段，容易添加、删除、移动节点。不需要维护冗余数据。</li><li>缺点：查询层级关系和递归操作需要进行多次查询，效率较低。在大型树状结构中，查询深度可能导致性能问题。</li><li>使用场景：适用于树状结构较小，层级深度不太深的情况，或者只需要简单的树结构操作。</li></ul><ol start="2"><li>Path Enumeration（路径枚举）:<ul><li>优点：相比邻接列表，路径枚举能够更快速地进行递归查询和层级操作，因为路径信息已经在节点上存储。</li><li>缺点：相比闭包表，会有一定的冗余，需要维护节点路径信息。对于层级关系较复杂的树结构，可能会占用更多的存储空间。</li><li>使用场景：适用于树状结构的层级操作较频繁，但树结构相对不太复杂的情况。</li></ul></li><li>Closure Table（闭包表）:<ul><li>优点：能够高效地进行层级查询和递归操作，不需要多次查询数据库。对于复杂的树状结构，闭包表是一种强大的方法。</li><li>缺点：闭包表引入了数据冗余，存储了所有祖先-后代对，可能会占用更多的存储空间。</li><li>使用场景：适用于树状结构非常复杂的情况，或者需要高效查询祖先和后代节点关系的场景。</li></ul></li></ol><ul><li>综合考虑，选择适当的存储方法取决于树状结构的大小、层级深度、复杂性，以及对于层级查询和操作的性能需求。对于小型和简单的树结构，邻接列表是一个简单有效的选择。对于较大且层级深度较深的树结构，Closure Table 提供了更高效的查询方式。而路径枚举则在某些情况下可以作为一种折中方案，同时满足查询效率和数据冗余的需求。</li></ul>]]></content>
    
    
    <summary type="html">数据库中存储树状结构的最佳实践</summary>
    
    
    
    <category term="数据库设计" scheme="https://cyborg2077.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="数据库" scheme="https://cyborg2077.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>编辑距离</title>
    <link href="https://cyborg2077.github.io/2023/07/16/EditDistanceSearch/"/>
    <id>https://cyborg2077.github.io/2023/07/16/EditDistanceSearch/</id>
    <published>2023-07-16T11:02:58.000Z</published>
    <updated>2023-10-01T13:43:47.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题">面试题</h2><ul><li>在一个长字符串中，寻找一个短字符串，短字符串可能有一些噪音，即有的字段不匹配，且短字符串是长字符串长度的百分之一左右，如何快速查找到这个短字符串。</li><li>当时面试官提示我编辑距离算法（<del>露怯了，压根没听说过</del>），后来看了一下，发现其实就是一道经典的DP，哎</li><li>编辑距离算法衡量的是将一个字符串转换为另一个字符串所需的最少编辑操作次数，因为短字符串存在噪音，不会与长字符串中的子串完全匹配，所以我们可以筛选一定编辑次数内的子串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EditDistanceSearch</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target     目标子串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> longString 长字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threshold  容错阈值，即距离数，解决噪音问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">findSimilarSubstrings</span><span class="params">(String target, String longString, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line">        <span class="comment">// 结果集</span></span><br><span class="line">        List&lt;String&gt; similarSubstrings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历长字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; longString.length() - target.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 取等长子串，计算编辑距离</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> longString.substring(i, i + target.length());</span><br><span class="line">            <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> calculateEditDistance(substring, target);</span><br><span class="line">            <span class="comment">// 根据容错阈值筛选</span></span><br><span class="line">            <span class="keyword">if</span> (distance &lt;= threshold)</span><br><span class="line">                similarSubstrings.add(substring);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> similarSubstrings;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编辑距离算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateEditDistance</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> str1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str2.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化矩阵</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算编辑距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str1.charAt(i - <span class="number">1</span>) == str2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], Math.min(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j])) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="string">&quot;kitten&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">longString</span> <span class="operator">=</span> <span class="string">&quot;skittlesittingbingocat&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; similarSubstrings = findSimilarSubstrings(target, longString, threshold);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;找到相似子串:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String substring : similarSubstrings) &#123;</span><br><span class="line">            System.out.println(substring);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="概述">概述</h2><ul><li>编辑距离（Edit Distance），也称为Levenshtein距离，是衡量两个字符串之间相似度的一种常用算法。它衡量的是将一个字符串转换为另一个字符串所需的最少编辑操作次数，其中编辑操作可以是插入、删除或替换字符。</li><li>其中一些常见的应用包括：<ol><li>拼写纠错：通过计算目标单词与候选单词之间的编辑距离，可以找到最接近目标单词的正确拼写。</li><li>文本相似性：编辑距离可以用于比较两段文本之间的相似性，例如在文本搜索中匹配近似的关键词或在文档聚类中寻找相似的文本。</li><li>基因组比对：在生物信息学中，编辑距离可以用于比较DNA序列或蛋白质序列之间的相似性，从而进行基因组比对和分析。</li><li>语音识别：通过计算语音信号之间的编辑距离，可以在语音识别任务中找到最匹配的文本转录。</li><li>数据清洗：在数据处理中，可以使用编辑距离来清洗和规范化数据，例如纠正用户输入错误或匹配相似的实体名称。</li></ol></li><li>力扣题目链接：<a href="https://leetcode.cn/problems/edit-distance/">https://leetcode.cn/problems/edit-distance/</a></li></ul><div class="note blud no-icon flat"><ul><li>dp[i][j]表示的含义是，word1[i]变化到word2[j]花费的最少步数<ul><li>当 word1[i] == word2[j]，dp[i][j] = dp[i-1][j-1]；</li><li>当 word1[i] != word2[j]，dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1</li></ul></li><li>上面的状态转移方程结合下面的表格来看</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">“”</th><th style="text-align:center">h</th><th style="text-align:center">o</th><th style="text-align:center">r</th><th style="text-align:center">s</th><th style="text-align:center">e</th></tr></thead><tbody><tr><td style="text-align:center">“”</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">r</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr></tbody></table><ul><li>第一行<ol><li>从<code>&quot;&quot;</code>变化到<code>&quot;&quot;</code>需要0步</li><li>从<code>&quot;&quot;</code>变化到<code>h</code>需要花1步，插入一个<code>h</code></li><li>从<code>&quot;&quot;</code>变化到<code>ho</code>需要花2步，在2的基础上再插入一个<code>o</code></li><li>从<code>&quot;&quot;</code>变化到<code>hor</code>需要花3步，在3的基础上再插入一个<code>r</code></li><li>以此类推</li></ol></li><li>第一列<ol><li>从<code>&quot;&quot;</code>变化到<code>&quot;&quot;</code>需要0步</li><li>从<code>r</code>变化到<code>&quot;&quot;</code>需要花1步，删除一个<code>r</code></li><li>从<code>ro</code>变化到<code>&quot;&quot;</code>需要花2步，在2的基础上再删除一个<code>o</code></li><li>从<code>r</code>变化到<code>&quot;&quot;</code>需要花3步，在3的基础上再删除一个<code>s</code></li></ol></li><li>斜对角线<ol><li>从<code>&quot;&quot;</code>变化到<code>&quot;&quot;</code>需要花0步</li><li>从<code>r</code>变化到<code>h</code>需要花1步，将<code>r</code>替换为<code>h</code></li></ol></li><li>总结：<code>dp[i-1][j-1]</code>表示替换操作，<code>dp[i-1][j]</code>表示删除操作，<code>dp[i][j-1]</code>表示插入操作。</li></ul></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算编辑距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TODO">TODO</h2><ul><li>新增一个分类，用于记录工作中遇到的算法。</li></ul>]]></content>
    
    
    <summary type="html">面试中遇到的一个算法（当时不知道）</summary>
    
    
    
    
    <category term="面经" scheme="https://cyborg2077.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>搭建本地ChatGPT</title>
    <link href="https://cyborg2077.github.io/2023/06/13/BuildingLocalChatGPT/"/>
    <id>https://cyborg2077.github.io/2023/06/13/BuildingLocalChatGPT/</id>
    <published>2023-06-13T14:59:32.000Z</published>
    <updated>2023-10-01T13:43:47.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在最前">写在最前</h2><ul><li>思来想去还是搭建一个本地版罢（不然总是要科学上网），刚好可以放我虚拟机里跑，本教程基于<a href="https://github.com/pengzhile/pandora">Pengzhile/pandora</a> 项目</li><li>前置要求：一台搭载了Contos7的虚拟机</li></ul><style>                    /* css part */                    .gr-card {                        --card-width: 100%;                        --card-height: 100px;                        display: flex;                        width: var(--card-width);                        height: var(--card-height);                        background-color: #fff;                        border-radius: 6px;                        overflow: hidden;                        box-shadow: 0px 4px 6px rgba(0, 0, 0, .12);                        margin-bottom: 20px;                        text-align: center;                    }                    .gr-svg {                        width: 80px;                        height: 80px;                        margin: auto;                    }                    svg {                        width: 80px;                        height: 80px;                        margin: auto;                    }                    </style>                    <div class="gr-card">                    <div class='gr-svg'><svg t="1625560263736" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="5867" width="200" height="200"><path d="M841.554135 289.474752c-32.966703-13.322161-69.997795-24.386329-109.964278-32.966703-10.612569-113.351268-105.222492-202.316207-219.702757-202.316208-114.480265 0-209.090187 88.964939-219.702756 202.316208-39.966483 8.580375-76.997574 19.644542-109.964278 32.966703-97.093716 38.837486-150.382359 94.158324-150.382359 155.124145s53.514443 116.286659 150.382359 155.124146c88.513341 35.450496 205.703197 55.095039 329.667034 55.095039 123.963837 0 241.153693-19.644542 329.667035-55.095039 97.093716-38.837486 150.382359-94.158324 150.382359-155.124146s-53.288644-116.06086-150.382359-155.124145z m-329.441235-176.349283c78.35237 0 144.059978 57.127233 158.962734 132.544211-50.353252-7.451378-103.867696-11.289967-158.962734-11.289967-54.869239 0-108.383682 3.838589-158.736935 11.289967 14.676957-75.416979 80.158765-132.544212 158.736935-132.544211zM819.877398 545.531202c-81.739361 32.740904-191.02624 50.804851-307.764498 50.804851s-226.025138-18.063947-307.764499-50.804851c-71.126792-28.450717-113.577067-66.159206-113.577067-100.706505s42.450276-72.255788 113.577067-100.706505c81.739361-32.740904 191.02624-50.804851 307.764499-50.804851s226.025138 18.063947 307.764498 50.804851c71.126792 28.450717 113.577067 66.159206 113.577067 100.706505s-42.450276 72.029989-113.577067 100.706505z" p-id="5868" fill="#707070"></path><path d="M453.179272 135.931202c-27.547519 11.741566-50.804851 31.160309-67.514002 56.224035-5.419184 8.354576-3.161191 19.418743 4.967586 25.063727 3.161191 2.032194 6.548181 2.935391 9.93517 2.935391 5.870783 0 11.515766-2.935391 15.128556-8.128776 12.644763-19.192944 30.482911-34.0957 51.482249-43.127674 9.257773-3.838589 13.54796-14.451158 9.483573-23.70893-3.612789-8.806174-14.225358-13.096362-23.483132-9.257773zM516.403087 690.268578c-43.579272 0-74.513782 13.322161-94.384123 40.643881-17.838148 24.386329-25.741125 57.804631-25.741125 108.835281s7.902977 84.448953 25.741125 108.835281c19.870342 27.32172 50.804851 40.643881 94.384123 40.643881 43.579272 0 74.513782-13.322161 94.384124-40.643881 17.838148-24.386329 25.741125-57.804631 25.741124-108.835281s-7.902977-84.448953-25.741124-108.835281c-19.870342-27.32172-50.804851-40.643881-94.384124-40.643881z m0 240.250496c-37.031092 0-61.41742-6.322381-61.41742-90.771334 0-84.448953 24.386329-90.771334 61.41742-90.771334s61.41742 6.322381 61.41742 90.771334c-0.225799 84.448953-24.386329 90.771334-61.41742 90.771334zM333.054024 884.230209H305.280706v-164.607717-0.903198-1.580595c0-0.451599 0-0.903197-0.2258-1.354796 0-0.451599-0.225799-0.903197-0.225799-1.354796 0-0.451599-0.225799-1.128997-0.451599-1.580595 0-0.451599-0.225799-0.903197-0.225799-1.128997-0.225799-0.451599-0.225799-1.128997-0.451599-1.580595-0.225799-0.451599-0.225799-0.677398-0.451598-1.128997l-0.677398-1.354796-0.677398-1.354796c-0.225799-0.451599-0.451599-0.903197-0.677398-1.128997-0.225799-0.451599-0.451599-0.903197-0.903198-1.354796-0.225799-0.451599-0.451599-0.677398-0.677398-1.128997-0.225799-0.451599-0.677398-0.903197-0.903197-1.354796-0.225799-0.225799-0.451599-0.677398-0.903198-0.903197-0.451599-0.451599-0.677398-0.903197-1.128996-1.128997l-0.903198-0.903197c-0.451599-0.225799-0.677398-0.677398-1.128996-0.903197-0.451599-0.451599-0.903197-0.677398-1.354796-1.128997-0.225799-0.225799-0.451599-0.451599-0.677398-0.451599 0 0-0.225799 0-0.2258-0.225799-0.451599-0.451599-1.128997-0.677398-1.580595-0.903198-0.225799-0.225799-0.677398-0.451599-0.903197-0.451598-0.451599-0.225799-1.128997-0.451599-1.580596-0.903198-0.451599-0.225799-0.677398-0.451599-1.128996-0.451598-0.451599-0.225799-0.903197-0.451599-1.580596-0.677398-0.451599-0.225799-0.903197-0.225799-1.354796-0.451599-0.451599-0.225799-0.903197-0.225799-1.354796-0.451599-0.451599-0.225799-0.903197-0.225799-1.580595-0.451598-0.451599 0-0.677398-0.225799-1.128997-0.2258-0.677398 0-1.128997-0.225799-1.806395-0.225799H275.475193h-2.709592c-0.451599 0-0.903197 0-1.354796 0.225799-0.451599 0-0.903197 0.225799-1.354796 0.2258-0.451599 0-1.128997 0.225799-1.580596 0.451598-0.451599 0-0.903197 0.225799-1.128996 0.2258-0.451599 0.225799-1.128997 0.225799-1.580596 0.451598-0.451599 0.225799-0.677398 0.225799-1.128996 0.451599l-1.354796 0.677398c-0.451599 0.225799-0.903197 0.451599-1.128997 0.677398-0.451599 0.225799-0.903197 0.451599-1.128997 0.677398-0.451599 0.225799-0.903197 0.451599-1.354796 0.903198-0.451599 0.225799-0.677398 0.451599-1.128996 0.677398-0.451599 0.225799-0.903197 0.677398-1.354796 0.903197-0.225799 0.225799-0.677398 0.451599-0.903198 0.903197l-1.128997 1.128997-0.903197 0.903197c-0.225799 0.451599-0.677398 0.677398-0.903197 1.128997-0.451599 0.451599-0.677398 0.903197-1.128997 1.354796-0.225799 0.225799-0.451599 0.451599-0.451599 0.677398l-137.737596 193.961632c-6.322381 9.031974-7.225579 20.773539-2.257993 30.48291s15.128556 15.805954 26.192723 15.805954h108.383682v16.934951c0 16.257552 13.096362 29.353914 29.353914 29.353914s29.353914-13.096362 29.353914-29.353914V942.938037h27.773319c16.257552 0 29.353914-13.096362 29.353914-29.353914s-12.870562-29.353914-29.128115-29.353914z m-137.963396 0l51.48225-72.481587V884.230209H195.090628zM885.810805 884.230209H858.037486v-164.607717-0.903198-1.580595c0-0.451599 0-0.903197-0.225799-1.354796 0-0.451599-0.225799-0.903197-0.225799-1.354796 0-0.451599-0.225799-1.128997-0.451599-1.580595 0-0.451599-0.225799-0.903197-0.225799-1.128997-0.225799-0.451599-0.225799-1.128997-0.451599-1.580595-0.225799-0.451599-0.225799-0.677398-0.451599-1.128997l-0.677398-1.354796-0.677398-1.354796c-0.225799-0.451599-0.451599-0.903197-0.677398-1.128997-0.225799-0.451599-0.451599-0.903197-0.903197-1.354796-0.225799-0.451599-0.451599-0.677398-0.677398-1.128997-0.225799-0.451599-0.677398-0.903197-0.903198-1.354796-0.225799-0.225799-0.451599-0.677398-0.903197-0.903197-0.451599-0.451599-0.677398-0.903197-1.128997-1.128997l-0.903197-0.903197c-0.451599-0.225799-0.677398-0.677398-1.128997-0.903197-0.451599-0.451599-0.903197-0.677398-1.354796-1.128997-0.225799-0.225799-0.451599-0.451599-0.677398-0.451599 0 0-0.225799 0-0.225799-0.225799-0.451599-0.451599-1.128997-0.677398-1.580595-0.903198-0.225799-0.225799-0.677398-0.451599-0.903198-0.451598-0.451599-0.225799-1.128997-0.451599-1.580595-0.677398-0.451599-0.225799-0.677398-0.451599-1.128997-0.451599-0.451599-0.225799-0.903197-0.451599-1.354796-0.451599-0.451599-0.225799-0.903197-0.225799-1.354796-0.451598-0.451599-0.225799-0.903197-0.225799-1.354796-0.451599-0.451599-0.225799-1.128997-0.225799-1.580595-0.451599-0.451599 0-0.677398-0.225799-1.128997-0.225799-0.677398 0-1.128997-0.225799-1.806395-0.225799h-2.935391-2.709592c-0.451599 0-0.903197 0-1.354796 0.225799-0.451599 0-0.903197 0.225799-1.354796 0.225799-0.451599 0-1.128997 0.225799-1.580596 0.2258-0.451599 0-0.903197 0.225799-1.128996 0.225799-0.451599 0.225799-1.128997 0.225799-1.580596 0.451599-0.451599 0.225799-0.903197 0.225799-1.128996 0.451598l-1.354796 0.677398-1.354796 0.677398c-0.451599 0.225799-0.903197 0.451599-1.128997 0.677398-0.451599 0.225799-0.903197 0.451599-1.354796 0.903198-0.451599 0.225799-0.677398 0.451599-1.128997 0.677398-0.451599 0.225799-0.903197 0.677398-1.354796 0.903197-0.225799 0.225799-0.677398 0.451599-0.903197 0.903198-0.451599 0.451599-0.903197 0.677398-1.128997 1.128996l-0.903197 0.903198c-0.225799 0.451599-0.677398 0.677398-0.903198 1.128996-0.451599 0.451599-0.677398 0.903197-1.128996 1.354796-0.225799 0.225799-0.451599 0.451599-0.451599 0.677398l-137.737596 193.961632c-6.322381 9.031974-7.225579 20.773539-2.257994 30.482911 4.967585 9.709372 15.128556 15.805954 26.192723 15.805954h108.383683v16.93495c0 16.257552 13.096362 29.353914 29.353914 29.353914s29.353914-13.096362 29.353914-29.353914V942.938037h27.773319c16.257552 0 29.353914-13.096362 29.353914-29.353914s-12.870562-29.353914-29.128115-29.353914z m-138.189195 0l51.482249-72.481587V884.230209h-51.482249z" p-id="5869" fill="#707070"></path><path d="M512.1129 344.118192m-29.353914 0a29.353914 29.353914 0 1 0 58.707828 0 29.353914 29.353914 0 1 0-58.707828 0Z" p-id="5870" fill="#707070"></path><path d="M291.281147 373.472106m-29.353914 0a29.353914 29.353914 0 1 0 58.707828 0 29.353914 29.353914 0 1 0-58.707828 0Z" p-id="5871" fill="#707070"></path><path d="M291.281147 499.016538m-29.353914 0a29.353914 29.353914 0 1 0 58.707828 0 29.353914 29.353914 0 1 0-58.707828 0Z" p-id="5872" fill="#707070"></path><path d="M512.1129 541.241014m-29.353914 0a29.353914 29.353914 0 1 0 58.707828 0 29.353914 29.353914 0 1 0-58.707828 0Z" p-id="5873" fill="#707070"></path><path d="M732.718853 373.472106m-29.353914 0a29.353914 29.353914 0 1 0 58.707828 0 29.353914 29.353914 0 1 0-58.707828 0Z" p-id="5874" fill="#707070"></path><path d="M732.718853 499.016538m-29.353914 0a29.353914 29.353914 0 1 0 58.707828 0 29.353914 29.353914 0 1 0-58.707828 0Z" p-id="5875" fill="#707070"></path></svg>                    </div>                    </div><h2 id="安装Docker">安装Docker</h2><ul><li>关于Docker的安装和使用，详情可以参考我这篇文章</li></ul><div class="tag link"><a class="link-card" title="Docker" href="https://cyborg2077.github.io/2022/12/21/Docker/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">Docker</p><p class="url">https://cyborg2077.github.io/2022/12/21/Docker/</p></div></a></div><h3 id="卸载-可选">卸载(可选)</h3><ul><li>如果之前安装过旧版本的Docker，可以使用下面命令卸载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><h3 id="安装Docker-2">安装Docker</h3><ul><li>首先先安装yum工具</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><ul><li>然后更新本地镜像源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 设置Docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><ul><li>然后安装社区版Docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><h3 id="启动Docker">启动Docker</h3><ul><li>Docker应用需要用到各种端口，挨个修改防火墙设置很麻烦，所以这里建议直接关闭防火墙</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">## 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><ul><li>通过命令启动Docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 启动docker服务（只执行此操作即可）</span></span><br><span class="line">systemctl start docker </span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止docker服务（无需执行）</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启docker服务（无需执行）</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><ul><li>然后输入命令，查看docker版本，如果可以看到版本号，则安装成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><ul><li>设置开机自启动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="拉取镜像并启动容器">拉取镜像并启动容器</h2><ol><li>拉取镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull pengzhile/pandora</span><br></pre></td></tr></table></figure><ol start="2"><li>启动容器，这里的9527可以换为你喜欢的端口（确保它没有被占用），由于docker已经设置为开机自启了，这里再设置 <code>--restart=always</code>可以保证该容器随docker启动而启动，从而实现你只需要将虚拟机开机，即可访问chatGPT了</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:9527 -p 9527:9527 -d --restart=always pengzhile/pandora</span><br></pre></td></tr></table></figure><ol start="3"><li>查看虚拟机ip，在输出结果中，找到带有 inet 地址的行，后面的一串数字就是本机的 IP 地址，例如：<code>192.168.101.128</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><ol start="4"><li>在浏览器中输入<code>虚拟机ip:9527</code>，即可看到登录界面，点击最下方<code>Continue with Access Token</code>输入token即可登录使用，无需科学上网，定期刷新token即可<br><img src="https://s1.ax1x.com/2023/06/14/pCnzCWV.png" alt=""></li><li>关于token的获取，如果你有正常的openAI账号，访问https://chat.openai.com/api/auth/session 可以拿到token<ul><li>另外一种token的获取方式：<a href="https://ai.fakeopen.com/auth">https://ai.fakeopen.com/auth</a></li></ul></li></ol><h2 id="其他设备访问">其他设备访问</h2><ul><li>懒是第一生产力，我现在想在手机或者任何我的电子设备上访问ChatGPT，该怎么办呢？开放主机的一个端口供其他设备端口就好了（当然你的设备需要和主机在同一个局域网内）</li></ul><h3 id="Windows防火墙设置">Windows防火墙设置</h3><ul><li>控制面板-&gt;系统与安全-&gt;Windows防火墙-&gt;高级设置-&gt;入站规则-&gt;新建规则<br><img src="https://s1.ax1x.com/2023/06/20/pC8B6Ve.png" alt=""></li><li><code>协议和端口</code>，选择<code>TCP</code>，<code>特定本地端口</code>，填写一个你喜欢的端口即可，我这里还是9527<br><img src="https://s1.ax1x.com/2023/06/20/pC8BRPA.png" alt=""></li><li>然后一路Next就好了，都用默认的配置，最后的名称你可以起一个你喜欢的名称，我这里是ChatGPT</li></ul><h3 id="虚拟机端口转发">虚拟机端口转发</h3><ul><li>由于虚拟机采用的是NAT联网方式，我们点击菜单-&gt;编辑-&gt;虚拟网络编辑器-&gt;更改设置，选择VMnet8网络<br><img src="https://s1.ax1x.com/2023/06/20/pC8DPIJ.png" alt=""></li><li>点击NAT设置添加端口转发规则，主机端口选择我们上一步开放的9527端口，虚拟机地址填写我们Docker容器中ChatGPT的启动端口<br><img src="https://s1.ax1x.com/2023/06/20/pC8DmqO.png" alt=""></li><li>最后CMD查看本机ip，其他设备只要跟电脑在同一个局域网内，访问<code>ip:端口</code>即可正常使用<br><img src="https://s1.ax1x.com/2023/06/20/pC8D0ij.jpg" alt=""></li></ul>]]></content>
    
    
    <summary type="html">从GitHub上看到的一个项目，然后动手搭建了一下</summary>
    
    
    
    <category term="实用教程" scheme="https://cyborg2077.github.io/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="ChatGPT" scheme="https://cyborg2077.github.io/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>并发编程</title>
    <link href="https://cyborg2077.github.io/2023/06/05/JUC/"/>
    <id>https://cyborg2077.github.io/2023/06/05/JUC/</id>
    <published>2023-06-05T03:59:03.000Z</published>
    <updated>2023-10-04T15:13:42.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识">前置知识</h2><ul><li>希望你不是一个初学者</li><li>线程安全问题，需要你接触过JavaWeb开发、JDBC开发、Web服务器、分布式框架时才会遇到</li><li>采用slf4j打印日志</li><li>采用lombok简化JavaBean的书写</li><li>基于JDK8，最好对函数式编程、lambda有一定了解，这部分知识在我的站内也有对应的笔记</li></ul><div class="tag link"><a class="link-card" title="Java8 新特性" href="https://cyborg2077.github.io/2022/11/05/NewFeaturesOfJava8/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">Java8 新特性</p><p class="url">https://cyborg2077.github.io/2022/11/05/NewFeaturesOfJava8/</p></div></a></div><ul><li>创建一个Maven项目，所需的pom依赖如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>logback.xml的配置如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://ch.qos.logback/xml/ns/logback&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://ch.qos.logback/xml/ns/logback https://raw.githubusercontent.com/enricopulatzo/logback-XSD/master/src/main/xsd/logback.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date&#123;HH:mm:ss.SSS&#125; %c [%t] - %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="进程与线程">进程与线程</h2><ul><li>本节内容<ol><li>进程和线程的概念</li><li>并行和并发的概念</li><li>线程基本应用</li></ol></li></ul><h3 id="进程与线程-2">进程与线程</h3><ul><li><code>进程</code><ul><li>程序由指令和数据组成，但这些指令要运行，数据要读写，那么就需要将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的</li><li>当一个程序被运行，从磁盘加载这个程序的代码至内存，此时就开启了一个进程</li><li>进程可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网抑云、Steam、Eipc等）</li></ul></li><li><code>线程</code><ul><li>一个进程之内可以分一道多个线程</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行</li><li>Java中，线程作为最小调度单位，进程作为资源分配的最小单位。在Windows中的进程是不活动的，只是作为线程的容器</li></ul></li><li><code>二者对比</code><ul><li>进程基本上是相互独立的，而线程存在于进程内，是进程的一个子集</li><li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li><li>进程间通信较为复杂<ul><li>同一台计算机的进程通信称为IPC(Inter-process Communication)</li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如HTTP</li></ul></li><li>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</li></ul></li></ul><h3 id="并行与并发">并行与并发</h3><ul><li>单核CPU下，线程实际上是<code>串行执行</code>的。操作系统中有一个组件叫做<code>任务调度器</code>，将CPU的时间片分给不同的程序使用，只是由于CPU在线程间的切换非常快(因为时间片很小)，所以给我们的感觉是同时运行的。总结为一句话就是：<code>微观串行，宏观并行。</code></li><li>一般会将这种线程轮流使用CPU的做法称为并发(Concurrent)</li></ul><table><thead><tr><th style="text-align:center">CPU</th><th style="text-align:center">时间片1</th><th style="text-align:center">时间片2</th><th style="text-align:center">时间片3</th><th style="text-align:center">时间片4</th></tr></thead><tbody><tr><td style="text-align:center">core</td><td style="text-align:center">线程1</td><td style="text-align:center">线程2</td><td style="text-align:center">线程3</td><td style="text-align:center">线程4</td></tr></tbody></table><p><img src="https://s1.ax1x.com/2023/06/08/pCk5rEq.png" alt=""></p><ul><li>多核CPU下，每个核(core)都可以调度运行线程，这时候线程可以是并行的。</li></ul><table><thead><tr><th style="text-align:center">CPU</th><th style="text-align:center">时间片 1</th><th style="text-align:center">时间片 2</th><th style="text-align:center">时间片 3</th><th style="text-align:center">时间片 4</th></tr></thead><tbody><tr><td style="text-align:center">core 1</td><td style="text-align:center">线程 1</td><td style="text-align:center">线程 3</td><td style="text-align:center">线程 1</td><td style="text-align:center">线程 3</td></tr><tr><td style="text-align:center">core 2</td><td style="text-align:center">线程 2</td><td style="text-align:center">线程 4</td><td style="text-align:center">线程 2</td><td style="text-align:center">线程 4</td></tr></tbody></table><p><img src="https://s1.ax1x.com/2023/06/08/pCk5y5V.png" alt=""></p><ul><li>小结<ul><li><code>并发(Concurrent)：</code>是同一时间应对(dealing with)多件事情的能力</li><li><code>并行(Parallel)：</code>是同一时间动手做(doing)多件事情的能力</li></ul></li><li>例子<ul><li>最近刚好把分手厨房通关了，就拿它举例吧：游戏需要切菜、烹饪、装盘、送菜等多个步骤，如果现在是单人轮流交替做这多件事，此时就是并发</li><li>联机叫了三个朋友一起打，一个只负责切菜、一个只负责烹饪、一个只负责装盘、一个只负责送菜，互不干扰，此时就是并行</li><li>但是大多数情况下凑不齐那么多人，如果两个人一起做这些事，此时既有并发，也有并行，此时会产生竞争，例如锅只有一口，一个人用锅的时候，另一个人就得等待</li></ul></li></ul><h3 id="应用">应用</h3><h4 id="异步调用">异步调用</h4><ul><li>以调用方角度来讲，如果<ul><li>需要等待结果返回，才能继续运行，这是同步</li><li>不需要等待结果返回，就能继续运行，这是异步</li></ul></li><li>设计<ul><li>多线程可以让方法执行变为异步，例如读取磁盘文件时，假设此次读取耗时5秒，如果没有线程调度机制，这5秒CPU什么也做不了，其他代码都得暂停</li></ul></li><li>结论<ul><li>例如在项目中，视频文件的格式转换等操作比较耗时，此时开一个新的线程去处理视频转换，可以避免阻塞主线程</li><li>Tomcat的异步servlet也是类似的目的，让用户线程处理耗时较长的操作，避免阻塞Tomcat的工作线程</li></ul></li></ul><h4 id="提高效率">提高效率</h4><ul><li>充分利用多核CPU的优势，提高运行效率，想象下面的场景，执行三个计算，最后将计算结果汇总</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">计算 <span class="number">1</span> 花费 <span class="number">10</span> <span class="keyword">ms</span></span><br><span class="line"></span><br><span class="line"><span class="title">计算 2</span> 花费 <span class="number">12</span> <span class="keyword">ms</span></span><br><span class="line"></span><br><span class="line"><span class="title">计算 3</span> 花费 <span class="number">8</span> <span class="keyword">ms</span></span><br><span class="line"></span><br><span class="line"><span class="title">汇总 花费 2</span> ms</span><br></pre></td></tr></table></figure><ul><li><p>此时如果是串行执行，那么需要花费<code>10 + 12 + 8 + 2 = 32ms</code></p></li><li><p>但如果是4核CPU，各个核心分别使用线程1执行计算1、线程2执行计算2、线程3执行计算3，那么3个线程是并行的，花费时间只取决于最长的那个线程的运行时间，即<code>12ms</code>，再加上汇总时间所需的<code>2ms</code>，总时长仅仅才<code>14ms</code></p></li><li><p>在单核CPU下，多线程下不能实际提高程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用CPU，不至于一个线程总占用CPU，导致别的线程没法干活</p></li><li><p>多核CPU可以并行跑多个线程，但能否提高程序运行效率还是要分情况的</p><ul><li>有些任务经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率。但并不是所有计算任务都能拆分（参考后文的<code>阿姆达尔定律</code>）</li><li>也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没有意义</li></ul></li><li><p>IO操作不占用CPU，只是我们一般拷贝文件使用的是<code>阻塞式IO</code>，这相当于线程虽然没用CPU，但需要一直<code>等待IO结束</code>，没能充分利用线程。所以才有后面的<code>非阻塞式IO</code>和<code>异步IO</code>的优化</p></li></ul><h2 id="Java线程">Java线程</h2><ul><li>本节内容<ol><li>创建和运行线程</li><li>查看线程</li><li>线程API</li><li>线程状态</li></ol></li></ul><h3 id="创建和运行线程">创建和运行线程</h3><h4 id="方式一：直接使用Thread">方式一：直接使用Thread</h4><ul><li>示例代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Sync&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 匿名内部类创建线程，起名为t1</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">14</span>:<span class="number">23</span>:<span class="number">39</span><span class="meta"> [t1] c.Sync - running</span></span><br></pre></td></tr></table></figure><h4 id="方式二：Runnable配合Thread">方式二：Runnable配合Thread</h4><ul><li>把创建线程和执行任务的代码分开，Thread创建线程，Runnable执行任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Sync&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建任务</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建线程，指定任务，起名为t1</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">14</span>:<span class="number">26</span>:<span class="number">18</span><span class="meta"> [t1] c.Sync - running</span></span><br></pre></td></tr></table></figure><ul><li>Java8以后还可以用lambda简化代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Sync&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建任务，lambda简化代码</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建线程，指定任务，起名为t1</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当然还可以进一步精简</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Sync&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建线程，指定任务，起名为t1</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; log.debug(<span class="string">&quot;running&quot;</span>), <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原理之Thread与Runnable的关系">原理之Thread与Runnable的关系</h4><ul><li>我们来分析一下Thread的源码，理清它与Runnable的关系，下面的代码我只截取了我们上面用到的部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* What will be run. */</span></span><br><span class="line"><span class="keyword">private</span> Runnable target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target, String name)</span> &#123;</span><br><span class="line">    init(<span class="literal">null</span>, target, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从Thread的源码中，我们可以发现，我们用方式二创建线程时，传入了一个Runnable对象，该对象作为Thread的一个名为target的属性，当我们调用run方法时，如果target不为空，那么调用的是target的run()方法</li><li>但是当我们使用方式一的时候，没有传入Runnable对象，此时是重写了Thread的run()方法</li><li>小结<ul><li>方式一是把线程和任务合并在了一起，方法二是把线程和任务分开了</li><li>使用Runnable对象，更容易与线程池等高级API配合</li><li>使用Runnable对象让任务类脱离了Thread的继承体系，更灵活</li></ul></li></ul><h4 id="方式三：FutureTask配合Thread">方式三：FutureTask配合Thread</h4><ul><li>FutureTask能够接受Callable类型的参数，用来处理有返回结果的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line">FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">521</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第一个参数是任务对象，第二个参数是线程名称</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">thread.start();</span><br><span class="line"><span class="comment">// 使用task.get()会阻塞线程直至获取到结果，这里日志打印</span></span><br><span class="line">log.debug(<span class="string">&quot;获取到返回值：&#123;&#125;&quot;</span>, task.get()); </span><br></pre></td></tr></table></figure><ul><li>上述代码也可以用lambda简化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">521</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">thread.start();</span><br><span class="line">log.debug(<span class="string">&quot;获取到返回值：&#123;&#125;&quot;</span>, task.get()); </span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">06</span> <span class="selector-attr">[t1]</span> c<span class="selector-class">.Sync</span> - running</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">06</span> <span class="selector-attr">[main]</span> c<span class="selector-class">.Sync</span> - 获取到返回值：<span class="number">521</span></span><br></pre></td></tr></table></figure><ul><li>源码剖析<ul><li>FutureTask实现了RunnableFuture接口</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTask</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">RunnableFuture</span>&lt;V&gt; </span><br></pre></td></tr></table></figure><ul><li>而RunnableFuture又实现了Runnable接口和Future接口</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RunnableFuture</span>&lt;V&gt; <span class="keyword">extends</span> <span class="title class_">Runnable</span>, Future&lt;V&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets this Future to the result of its computation</span></span><br><span class="line"><span class="comment">     * unless it has been cancelled.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Future接口中有一个方法可以返回任务执行的结果，泛型V即返回值类型</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException;</span><br></pre></td></tr></table></figure><ul><li>Callable接口有返回值，并且可以抛出异常</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Callable</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="观察多个线程同时运行">观察多个线程同时运行</h3><ul><li>两个线程交替执行，谁先谁后不受我们控制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t1] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t2] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t2] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t2] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t2] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t2] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t2] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t1] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t1] c.Sync - running</span><br><span class="line"><span class="number">15</span>:<span class="number">05</span>:<span class="number">16</span> [t2] c.Sync - running</span><br></pre></td></tr></table></figure><h3 id="查看进程线程的方法">查看进程线程的方法</h3><h4 id="Windows">Windows</h4><ul><li>在Windows环境下，可以通过任务管理器来查看进程和线程数，也可以用来杀死进程<ul><li>tasklist 查看进程</li><li>taskkill 杀死进程</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;tasklist | findstr java</span><br><span class="line">java.exe                     <span class="number">20900</span> Console                    <span class="number">1</span>     <span class="number">63</span>,<span class="number">024</span> K</span><br><span class="line">java.exe                     <span class="number">17244</span> Console                    <span class="number">1</span>     <span class="number">26</span>,<span class="number">252</span> K</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;jps</span><br><span class="line"><span class="number">15780</span> Jps</span><br><span class="line"><span class="number">20900</span> RemoteMavenServer36</span><br><span class="line"><span class="number">18760</span></span><br><span class="line"><span class="number">17244</span> Launcher</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;jps</span><br><span class="line"><span class="number">20896</span> Launcher</span><br><span class="line"><span class="number">14788</span> Sync</span><br><span class="line"><span class="number">20900</span> RemoteMavenServer36</span><br><span class="line"><span class="number">6372</span> Jps</span><br><span class="line"><span class="number">18760</span></span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;taskkill /F /PID <span class="number">14788</span></span><br><span class="line">成功: 已终止 PID 为 <span class="number">14788</span> 的进程。</span><br></pre></td></tr></table></figure><h4 id="Linux">Linux</h4><ul><li>Linux环境下有关进程的指令<ul><li><code>ps -ef</code> 查看所有进程</li><li><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程(PID)的所有线程</li><li><code>kill</code> 杀死进程</li><li><code>top</code> 按大写H切换是否显示进程</li><li><code>top -H -p &lt;PID&gt;</code> 查看某个进程(PID)的所有线程</li></ul></li></ul><h4 id="Java">Java</h4><ul><li>jps命令查看所有Java进程</li><li>jstack <PID> 查看某个Java进程(PID)的所有线程状态</li><li>jconsole 查看某个Java进程中线程的运行情况(图形界面)</li></ul><h3 id="原理之线程运行">原理之线程运行</h3><h4 id="栈与栈帧">栈与栈帧</h4><ul><li>Java虚拟机栈（Java Virtual Machine Stacks）是Java虚拟机为每个线程分配的一块内存区域，用于存储线程的方法调用和局部变量等信息。</li><li>每个线程在运行时都有自己的Java虚拟机栈，线程开始时会创建一个新的栈帧（Stack Frame），用于存储该线程的方法调用信息。当方法调用完成后，该栈帧会被弹出，回到上一次方法调用的位置。每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法。</li><li>每个线程都有自己的栈帧，栈帧包含方法的参数、局部变量和返回值等信息，因此不同的线程可以在不相互干扰的情况下同时访问相同的方法。下面我们来编写测试代码验证一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    method1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;here&#x27;s method1&quot;</span>);</span><br><span class="line">    method2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;here&#x27;s method2&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>打断点注意选择挂起线程<br><img src="https://s1.ax1x.com/2023/06/08/pCk5T56.png" alt=""></li><li>对main线程，依次步入method2()方法，不会影响到t1线程的操作；同样，对t1线程，依次步入到method2()方法，也不会影响main线程。证实了每个线程都有自己的栈帧，且可以在不互相干扰的环境下同时访问相同的方法。</li><li>关于虚拟机栈的更详细的内容在我这篇文章的第二小节中有提及</li></ul><div class="tag link"><a class="link-card" title="JVM内存结构" href="https://cyborg2077.github.io/2023/03/27/JvmPart2/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">JVM内存结构</p><p class="url">https://cyborg2077.github.io/2023/03/27/JvmPart2/</p></div></a></div><h4 id="线程上下文切换">线程上下文切换</h4><ul><li>线程上下文切换(Thread Context Switch)：因为某些原因导致不再执行当前线程，转而执行另一个线程的代码<ul><li>线程的CPU时间片用完</li><li>垃圾回收</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了sleep、yield、wait、join、park、synchronized、lock等方法</li></ul></li></ul><h3 id="常见方法">常见方法</h3><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">static</th><th style="text-align:center">功能说明</th><th style="text-align:center">注意</th></tr></thead><tbody><tr><td style="text-align:center">start()</td><td style="text-align:center"></td><td style="text-align:center">启动一个新线程，在新的线程运行run方法中的代码</td><td style="text-align:center">start方法只是让线程进入就绪，里面代码不一定立刻运行（CPU的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException</td></tr><tr><td style="text-align:center">run()</td><td style="text-align:center"></td><td style="text-align:center">新线程启动后会调用的方法</td><td style="text-align:center">如果在构造Thread对象时传递了Runnable参数，则线程启动后会调用Runnable中的run方法，否则默认不执行任何操作。但可以创建Thread的子类对象，来覆盖默认行为</td></tr><tr><td style="text-align:center">join()</td><td style="text-align:center"></td><td style="text-align:center">等待线程运行结束</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">join(long n)</td><td style="text-align:center"></td><td style="text-align:center">等待线程运行结束，最多等待n毫秒</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">getId()</td><td style="text-align:center"></td><td style="text-align:center">获取线程长整型的id</td><td style="text-align:center">id唯一</td></tr><tr><td style="text-align:center">getName()</td><td style="text-align:center"></td><td style="text-align:center">获取线程名</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">setName(String)</td><td style="text-align:center"></td><td style="text-align:center">修改线程名</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">getPriority()</td><td style="text-align:center"></td><td style="text-align:center">获取线程优先级</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">setPriority(int)</td><td style="text-align:center"></td><td style="text-align:center">修改线程优先级</td><td style="text-align:center">Java中规定线程优先级是1~10的整数，较大的优先级能提高该线程被CPU调度的机率</td></tr><tr><td style="text-align:center">getState()</td><td style="text-align:center"></td><td style="text-align:center">获取线程状态</td><td style="text-align:center">Java中线程状态是用6个enum表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED</td></tr><tr><td style="text-align:center">isInterrupted()</td><td style="text-align:center">static</td><td style="text-align:center">判断是否被打断</td><td style="text-align:center">不会清除打断标记</td></tr><tr><td style="text-align:center">isAlive()</td><td style="text-align:center">static</td><td style="text-align:center">线程是否存活（还没有运行完毕）</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">interrupt()</td><td style="text-align:center">static</td><td style="text-align:center">打断线程</td><td style="text-align:center">如果被打断线程正在sleep、wait、join会导致被打断的线程抛出InterruptedException，并清除打断标记；如果打断的正在运行的线程，则会设置打断标记；park的线程被打断，也会设置打断标记</td></tr><tr><td style="text-align:center">interrupted()</td><td style="text-align:center">static</td><td style="text-align:center">判断当前线程是否被打断</td><td style="text-align:center">会清除打断标记</td></tr></tbody></table><h3 id="start与run">start与run</h3><h4 id="调用run">调用run</h4><ul><li>示例代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Sync&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MP4_FULL_PATH</span> <span class="operator">=</span> <span class="string">&quot;D:\\BaiduNetdiskDownload\\CowboyBebop.mp4&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                read(MP4_FULL_PATH);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).run();</span><br><span class="line">        log.debug(<span class="string">&quot;do other things ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">&quot;读取文件耗时：&#123;&#125;ms&quot;</span>, end - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">42</span>:<span class="number">59</span> <span class="selector-attr">[main]</span> c<span class="selector-class">.Sync</span> - <span class="selector-tag">main</span></span><br><span class="line"><span class="number">17</span>:<span class="number">43</span>:<span class="number">03</span> <span class="selector-attr">[main]</span> c<span class="selector-class">.Sync</span> - 读取文件耗时：<span class="number">3925ms</span></span><br><span class="line"><span class="number">17</span>:<span class="number">43</span>:<span class="number">03</span> <span class="selector-attr">[main]</span> c<span class="selector-class">.Sync</span> - do other things ...</span><br></pre></td></tr></table></figure><ul><li>程序仍在man线程运行，read()方法调用还是同步的</li></ul><h4 id="调用start">调用start</h4><ul><li>将上述代码中的run()改为start()，输出如下，此时读取文件是在t1线程下完成的</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">13</span> [main] c.<span class="keyword">Sync </span>- do other things ...</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">13</span> [<span class="built_in">t1</span>] c.<span class="keyword">Sync </span>- <span class="built_in">t1</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">17</span> [<span class="built_in">t1</span>] c.<span class="keyword">Sync </span>- 读取文件耗时：<span class="number">3844</span>ms</span><br></pre></td></tr></table></figure><h4 id="小结">小结</h4><ul><li>直接调用run()是在主线程中执行了run()，并没有直接启动新线程</li><li>使用start是启动新的线程，通过新的线程间接执行run()中的代码</li></ul><h3 id="sleep和yield">sleep和yield</h3><h4 id="sleep">sleep</h4><ol><li><p>调用sleep会让当前线程从Running进入Timed Waiting状态（阻塞）</p><ul><li>测试代码</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    log.debug(<span class="string">&quot;t1状态：&#123;&#125;&quot;</span>,t1.getState());</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;t1状态：&#123;&#125;&quot;</span>,t1.getState());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果如下，由于主线程先执行，所以此时t1状态为RUNNABLE，主线程休眠1s后，再次查看t1状态，此时t1是阻塞状态</li></ul> <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>:<span class="number">03</span>:<span class="number">23</span>.<span class="number">500</span> [main] c.<span class="keyword">Sync </span>- <span class="built_in">t1</span>状态：RUNNABLE</span><br><span class="line"><span class="number">12</span>:<span class="number">03</span>:<span class="number">24</span>.<span class="number">500</span> [main] c.<span class="keyword">Sync </span>- <span class="built_in">t1</span>状态：TIMED_WAITING</span><br></pre></td></tr></table></figure></li><li><p>其他线程可以使用interrupt方法打断正在睡眠的线程，此时sleep方法会抛出InterruptedException</p><ul><li>示例代码</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;t1进入睡眠&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;t1被打断醒来&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    log.debug(<span class="string">&quot;准备打断t1&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果如下</li></ul> <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>:<span class="number">09</span>:<span class="number">12</span>.<span class="number">789</span> [<span class="built_in">t1</span>] c.<span class="keyword">Sync </span>- <span class="built_in">t1</span>进入睡眠</span><br><span class="line"><span class="number">12</span>:<span class="number">09</span>:<span class="number">12</span>.<span class="number">789</span> [main] c.<span class="keyword">Sync </span>- 准备打断<span class="built_in">t1</span></span><br><span class="line"><span class="number">12</span>:<span class="number">09</span>:<span class="number">13</span>.<span class="number">842</span> [<span class="built_in">t1</span>] c.<span class="keyword">Sync </span>- <span class="built_in">t1</span>被打断醒来</span><br><span class="line">Exception in thread <span class="string">&quot;t1&quot;</span> <span class="keyword">java.lang.RuntimeException: </span><span class="keyword">java.lang.InterruptedException: </span>sleep interrupted</span><br></pre></td></tr></table></figure></li><li><p>睡眠结束后的线程未必会立刻得到执行，因为此时CPU可能在执行其他的线程，当当前线程获取到时间片时才会得到执行</p></li><li><p>建议用TimeUnit的sleep代替Thread的sleep来获得更好的可读性</p><ul><li>TimeUnit是一个枚举类，提供了对时间单位的抽象表示，如秒、毫秒、微秒等。它的sleep方法接受一个时间值和一个TimeUnit参数，用于指定线程休眠的时间。例如，<code>TimeUnit.SECONDS.sleep(1)</code>表示线程休眠1秒，同时我们也可以将SECONDS换成HOUR、DAYS等时间值</li></ul></li></ol><h4 id="yield">yield</h4><ol><li>当一个线程执行到 yield 语句时，它会暂停当前的执行，将CPU的执行权交给其他线程。<ul><li>示例代码</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 --&gt; &quot;</span> + count++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 执行yield</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;           t2 --&gt; &quot;</span> + count++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果如下，t1输出了10w条，t2才1.7w</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t1 --&gt; <span class="number">106221</span></span><br><span class="line">t1 --&gt; <span class="number">106222</span></span><br><span class="line">        t2 --&gt; <span class="number">17256</span></span><br><span class="line">t1 --&gt; <span class="number">106223</span></span><br><span class="line">t1 --&gt; <span class="number">106224</span></span><br></pre></td></tr></table></figure></li><li>具体的实现依赖于操作系统的任务调度器</li></ol><h4 id="线程优先级">线程优先级</h4><ul><li>线程优先级会提示(hint)调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</li><li>如果CPU比较忙，那么优先级高的线程会获得更多的时间片，但CPU闲时，优先级几乎没作用<ul><li>示例代码</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 --&gt; &quot;</span> + count++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;           t2 --&gt; &quot;</span> + count++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    <span class="comment">// t1设置最低优先级</span></span><br><span class="line">    t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">    <span class="comment">// t2设置最高优先级</span></span><br><span class="line">    t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果如下，t1打印的比t2多，CPU闲的时候，优先级几乎没作用 <del>（它已经是个成熟的调度器了，有自己的想法）</del></li></ul>  <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="title">t2</span> --&gt;</span> <span class="number">64136</span></span><br><span class="line">        <span class="function"><span class="title">t2</span> --&gt;</span> <span class="number">64137</span></span><br><span class="line"><span class="function"><span class="title">t1</span> --&gt;</span> <span class="number">90915</span></span><br><span class="line"><span class="function"><span class="title">t1</span> --&gt;</span> <span class="number">90916</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="join方法详解">join方法详解</h3><h4 id="为什么需要join">为什么需要join</h4><ul><li>我们用下面的代码作为引子，打印的r是什么？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;t1开始&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r = <span class="number">10</span>;</span><br><span class="line">        log.debug(<span class="string">&quot;t1结束&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    log.debug(<span class="string">&quot;结果为：&#123;&#125;&quot;</span>, r);</span><br><span class="line">    log.debug(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分析<ul><li>因为主线程和t1是并行执行的，t1线程需要休眠1s后才能执行<code>r = 10</code></li><li>而主线程一开始就要打印r的结果，所以只能输出<code>r = 0</code></li></ul>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">09</span>:<span class="number">22.864</span> <span class="selector-attr">[main]</span> c<span class="selector-class">.Sync</span> - 主线程开始</span><br><span class="line"><span class="number">13</span>:<span class="number">09</span>:<span class="number">22.958</span> <span class="selector-attr">[t1]</span> c<span class="selector-class">.Sync</span> - t1开始</span><br><span class="line"><span class="number">13</span>:<span class="number">09</span>:<span class="number">22.123</span> <span class="selector-attr">[main]</span> c<span class="selector-class">.Sync</span> - 结果为：<span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">09</span>:<span class="number">22.123</span> <span class="selector-attr">[main]</span> c<span class="selector-class">.Sync</span> - 主线程结束</span><br><span class="line"><span class="number">13</span>:<span class="number">09</span>:<span class="number">23.234</span> <span class="selector-attr">[t1]</span> c<span class="selector-class">.Sync</span> - t1结束</span><br></pre></td></tr></table></figure></li><li>解决方法<ul><li>在t1.start()后面加上t1.join()，这样主线程会等待t1执行完毕，最终<code>r = 10</code></li></ul>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">12</span>:<span class="number">25.864</span> c<span class="selector-class">.Sync</span> <span class="selector-attr">[main]</span> - 主线程开始</span><br><span class="line"><span class="number">13</span>:<span class="number">12</span>:<span class="number">25.915</span> c<span class="selector-class">.Sync</span> <span class="selector-attr">[t1]</span> - t1开始</span><br><span class="line"><span class="number">13</span>:<span class="number">12</span>:<span class="number">26.929</span> c<span class="selector-class">.Sync</span> <span class="selector-attr">[t1]</span> - t1结束</span><br><span class="line"><span class="number">13</span>:<span class="number">12</span>:<span class="number">26.929</span> c<span class="selector-class">.Sync</span> <span class="selector-attr">[main]</span> - 结果为：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">12</span>:<span class="number">26.931</span> c<span class="selector-class">.Sync</span> <span class="selector-attr">[main]</span> - 主线程结束</span><br></pre></td></tr></table></figure></li></ul><h4 id="等待多个结果">等待多个结果</h4><ul><li>下面代码耗时大约多久？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 休眠1s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r1 = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 休眠2s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r2 = <span class="number">20</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    log.debug(<span class="string">&quot;r1：&#123;&#125;，r2：&#123;&#125;，耗时：&#123;&#125;ms&quot;</span>, r1, r2, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分析一下<ul><li>t1.join()，等待t1执行完毕，但t2也没有停止，也在运行</li><li>t2.join()，1s后，执行到此，t2也运行了1s，再等待1s也执行完毕了</li></ul></li><li>如果颠倒两个join，运行结果也不会变，最终耗时均为2s左右</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">13</span>:<span class="number">27</span>:<span class="number">50</span>.<span class="number">041</span> c.Sync<span class="meta"> [main] - r1：10，r2：20，耗时：2010ms</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/06/08/pCk5Lxe.png" alt=""></p><h4 id="有时效的join">有时效的join</h4><ul><li>join()方法还有一个带参数的，可以设定最大等待时长毫秒数<ul><li>没等够，输出：<code>14:09:44.417 c.Sync [main] - r：0，耗时：511ms</code></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 休眠1s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">// 最多等0.5s</span></span><br><span class="line">    t1.join(<span class="number">500</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    log.debug(<span class="string">&quot;r：&#123;&#125;，耗时：&#123;&#125;ms&quot;</span>, r, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>等够了，线程执行结束会导致join结束，虽然等1.5s，但1s就结束，耗时1s：<code>14:10:47.975 c.Sync [main] - r：10，耗时：1001ms</code></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 休眠1s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">// 最多等1.5s</span></span><br><span class="line">    t1.join(<span class="number">1500</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    log.debug(<span class="string">&quot;r：&#123;&#125;，耗时：&#123;&#125;ms&quot;</span>, r, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="interrupt方法详解">interrupt方法详解</h3><h4 id="打断sleep、wait、join的线程">打断sleep、wait、join的线程</h4><ul><li>这几个方法都会让线程进入阻塞状态，打断slee的线程，会清空打断状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 休眠2s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">// 休眠1s，打断t1</span></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">    log.debug(<span class="string">&quot;t1打断状态：&#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;Thread-0&quot;</span> java<span class="selector-class">.lang</span><span class="selector-class">.RuntimeException</span>: java<span class="selector-class">.lang</span><span class="selector-class">.InterruptedException</span>: sleep interrupted</span><br><span class="line">at com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo01</span><span class="selector-class">.Sync</span>.lambda<span class="variable">$main</span>$<span class="number">0</span>(Sync<span class="selector-class">.java</span>:<span class="number">25</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">750</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.InterruptedException</span>: sleep interrupted</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.sleep</span>(Native Method)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.sleep</span>(Thread<span class="selector-class">.java</span>:<span class="number">342</span>)</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.TimeUnit</span><span class="selector-class">.sleep</span>(TimeUnit<span class="selector-class">.java</span>:<span class="number">386</span>)</span><br><span class="line">at com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo01</span><span class="selector-class">.Sync</span>.lambda<span class="variable">$main</span>$<span class="number">0</span>(Sync<span class="selector-class">.java</span>:<span class="number">23</span>)</span><br><span class="line">... <span class="number">1</span> more</span><br><span class="line"><span class="number">14</span>:<span class="number">33</span>:<span class="number">07.789</span> c<span class="selector-class">.Sync</span> <span class="selector-attr">[main]</span> - t1打断状态：false</span><br></pre></td></tr></table></figure><h4 id="打断正常运行的线程">打断正常运行的线程</h4><ul><li>打断正常运行的线程，不会清空打断状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> thread.isInterrupted();</span><br><span class="line">            <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, interrupted);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">// 休眠1s，打断t1</span></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">14</span>:<span class="number">38</span>:<span class="number">54</span>.<span class="number">278</span> c.Sync<span class="meta"> [t2] -  打断状态: true</span></span><br></pre></td></tr></table></figure><h4 id="打断park线程">打断park线程</h4><ul><li>打断park线程，不会清空打断状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">57</span>.<span class="number">325</span> c.<span class="keyword">Sync </span>[<span class="built_in">t1</span>] - park...</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">58</span>.<span class="number">329</span> c.<span class="keyword">Sync </span>[<span class="built_in">t1</span>] - unpark...</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">58</span>.<span class="number">329</span> c.<span class="keyword">Sync </span>[<span class="built_in">t1</span>] - 打断状态：true</span><br></pre></td></tr></table></figure><ul><li>如果打断标记已经是true，则park会失效，会一直打印这两条日志</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight plaintext"><figcaption><span>c.Sync [t1] - park...</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">16:34:51.588 c.Sync [t1] - 打断状态：true</span><br><span class="line">16:34:51.588 c.Sync [t1] - park...</span><br><span class="line">16:34:51.588 c.Sync [t1] - 打断状态：true</span><br><span class="line">16:34:51.588 c.Sync [t1] - park...</span><br><span class="line">16:34:51.588 c.Sync [t1] - 打断状态：true</span><br><span class="line">16:34:51.588 c.Sync [t1] - park...</span><br><span class="line">16:34:51.588 c.Sync [t1] - 打断状态：true</span><br><span class="line">16:34:51.588 c.Sync [t1] - park...</span><br></pre></td></tr></table></figure><ul><li>我们可以使用Tread.interrupted()清除打断状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.interrupted());</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">37</span>:<span class="number">37</span>.<span class="number">979</span> c.<span class="keyword">Sync </span>[<span class="built_in">t1</span>] - park...</span><br><span class="line"><span class="number">16</span>:<span class="number">37</span>:<span class="number">38</span>.<span class="number">982</span> c.<span class="keyword">Sync </span>[<span class="built_in">t1</span>] - unpark...</span><br><span class="line"><span class="number">16</span>:<span class="number">37</span>:<span class="number">38</span>.<span class="number">982</span> c.<span class="keyword">Sync </span>[<span class="built_in">t1</span>] - 打断状态：true</span><br></pre></td></tr></table></figure><h3 id="不推荐使用的方法">不推荐使用的方法</h3><ul><li>这三个方法已经过时，而且容易破坏同步代码块，造成线程死锁</li></ul><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">static</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">stop()</td><td style="text-align:center"></td><td style="text-align:center">停止线程运行</td></tr><tr><td style="text-align:center">suspend()</td><td style="text-align:center"></td><td style="text-align:center">挂起（暂停）线程运行</td></tr><tr><td style="text-align:center">resume()</td><td style="text-align:center"></td><td style="text-align:center">恢复线程运行</td></tr></tbody></table><h3 id="终止模式之两阶段终止模式">终止模式之两阶段终止模式</h3><ul><li>两阶段终止模式（Two Phase Termination）<ul><li>在一个线程T1中如何优雅的终止线程T2？这里的优雅指的是给T2一个料理后事的机会</li></ul></li></ul><h4 id="错误思路">错误思路</h4><ul><li>使用线程对象的<code>stop()</code>方法停止线程<ul><li>stop方法会真正杀死线程，如果此时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其他线程将永远无法获取锁</li></ul></li><li>使用<code>System.exit()</code>方法停止线程<ul><li>目的仅仅是停止一个线程，但是这种方法会让整个程序都停止</li></ul></li></ul><h4 id="两阶段终止模式-interrupt">两阶段终止模式-interrupt</h4><p><img src="https://s1.ax1x.com/2023/06/08/pCk5jrd.png" alt=""></p><ul><li>利用isInterrupted<ul><li>interrupt可以打断正在执行的线程，无论这个线程是在sleep、wait还是正常运行</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TPTInterrupt&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TPTInterrupt</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TPTInterrupt</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TPTInterrupt</span>();</span><br><span class="line">        t.start();</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        t.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> currentThread.isInterrupted();</span><br><span class="line">                <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;执行监控记录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">// 因为sleep被打断后会清除打断标记为false，所以这里重新设置打断标记</span></span><br><span class="line">                    thread.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;监控线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">47</span>:<span class="number">09.479</span> c<span class="selector-class">.TPTInterrupt</span> <span class="selector-attr">[监控线程]</span> - 执行监控记录</span><br><span class="line"><span class="number">15</span>:<span class="number">47</span>:<span class="number">11.484</span> c<span class="selector-class">.TPTInterrupt</span> <span class="selector-attr">[监控线程]</span> - 执行监控记录</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.InterruptedException</span>: sleep interrupted</span><br><span class="line">    at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.sleep</span>(Native Method)</span><br><span class="line">    at com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo01</span><span class="selector-class">.TPTInterrupt</span>.lambda<span class="variable">$start</span>$<span class="number">0</span>(Sync<span class="selector-class">.java</span>:<span class="number">59</span>)</span><br><span class="line">    at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">750</span>)</span><br><span class="line"><span class="number">15</span>:<span class="number">47</span>:<span class="number">12.472</span> c<span class="selector-class">.TPTInterrupt</span> <span class="selector-attr">[监控线程]</span> - 料理后事</span><br></pre></td></tr></table></figure></li></ul><h3 id="主线程与守护线程">主线程与守护线程</h3><ul><li>默认情况下，Java线程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它<code>非守护线程</code>运行结束了，即使守护线程的代码没有执行完，也会强制结束</li><li>示例代码如下，将t1线程设置为守护线程，主线程即为非守护线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;守护线程开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;守护线程执行结束&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置该线程为守护线程</span></span><br><span class="line">    t1.setDaemon(<span class="literal">true</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;非守护线程执行结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下，当主线程执行结束，守护线程未打印<code>守护线程执行结束</code>，就被强制结束了</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span>:<span class="number">23</span>:<span class="number">07.989</span> c<span class="selector-class">.Sync</span> <span class="selector-attr">[t1]</span> - 守护线程开始执行</span><br><span class="line"><span class="number">18</span>:<span class="number">23</span>:<span class="number">08.989</span> c<span class="selector-class">.Sync</span> <span class="selector-attr">[main]</span> - 非守护线程执行结束</span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><ul><li>注意：<ul><li>垃圾回收线程就是一种守护线程</li><li>Tomcat中的Acceptor和Poller线程都是守护线程，所以Tomcat接收到shutdown命令后秒回等待它们处理完当前请求</li></ul></li></ul></div><h3 id="五种状态">五种状态</h3><ul><li>五种状态是从<code>操作系统</code>层面来描述的<ul><li><code>初始状态仅</code>是在语言层面创建了线程对象，还未与操作系统线程相关联</li><li><code>可运行状态（就绪状态）</code>指该线程已经被创建（与操作系统线程关联），可以由CPU调度执行</li><li><code>运行状态</code>指获取了CPU时间片运行中的状态<ul><li>当CPU时间片用完，会从运行状态转换至可运行状态，会导致线程上下文的切换</li></ul></li><li><code>阻塞状态</code><ul><li>如果调用了阻塞API，如BIO读写文件，此时该线程实际不会用到CPU，会导致上下文切换，进入阻塞状态</li><li>等BIO操作完毕，会由操作系统唤醒阻塞的线程，转换至可运行状态</li><li>与可运行状态的区别是，对阻塞状态的线程来说，只要它们一直不唤醒，调度器就一直不会考虑调度它们</li></ul></li><li><code>终止状态</code>表示线程已经执行完毕，生命周期已经结束，不会再转换为其他状态</li></ul></li></ul><p><img src="https://s1.ax1x.com/2023/06/09/pCEYfYV.png" alt=""></p><h3 id="六种状态">六种状态</h3><ul><li>这是从Java API层面来描述的，根据Thread State枚举，分为六种状态<ul><li><code>NEW</code>：线程刚被创建，但还没有调用start()方法</li><li><code>RUNNABLE</code>：当调用了start()方法后  <div class="note warning no-icon flat"><p>注意：Java API层面的RUNNABLE状态涵盖了操作系统层面的可运行状态、运行状态和阻塞状态（由于BIO导致的线程阻塞，在Java里无法区分，仍然认为是可运行）</p></div></li><li><code>BLOCKED</code>、<code>WAITINT</code>、<code>TIMED_WAITING</code>都是Java API层面对阻塞状态的细分，后面会在状态转换一节详细描述</li><li><code>TERMINATED</code>：当线程代码运行结束</li></ul></li></ul><p><img src="https://s1.ax1x.com/2023/06/09/pCEtCmd.png" alt=""></p><ul><li>下面我们用代码来验证一下这六种状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestState&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. t1线程刚被创建，还未调用start()方法，此时状态为 NEW</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. t2线程已被创建，并且调用了start()方法，空循坏会保证t2线程不会结束，此时状态为RUNNABLE</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t2&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>) &#123; <span class="comment">// runnable</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. t3线程只是打印一条日志，由于主线程中调用了sleep()，故当我们查看t3线程状态时，t3已经执行完毕，状态为TERMINATED</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t3&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. t4线程中调用了sleep()方法，状态为timed_waiting，即有时限的等待，注意此时t4还拿到了一把锁，后面要用</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t4&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TestState.class) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000000</span>); <span class="comment">// timed_waiting</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. t5线程中调用了t2.join()，需要等待t2线程结束，故状态为waiting，即无时限的等待</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t5&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t2.join(); <span class="comment">// waiting</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t5.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 由于t4线程拿到了锁，但由于t4在sleep，故t6线程拿不到锁，会被阻塞，状态为blocked</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t6&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TestState.class) &#123; <span class="comment">// blocked</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t6.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;t1 state &#123;&#125;&quot;</span>, t1.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t2 state &#123;&#125;&quot;</span>, t2.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t3 state &#123;&#125;&quot;</span>, t3.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t4 state &#123;&#125;&quot;</span>, t4.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t5 state &#123;&#125;&quot;</span>, t5.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t6 state &#123;&#125;&quot;</span>, t6.getState());</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">48.753</span> c.TestState [t3] - running...</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.264</span> c.TestState [main] - t1 <span class="keyword">state</span> NEW</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t2 <span class="keyword">state</span> RUNNABLE</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t3 <span class="keyword">state</span> TERMINATED</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t4 <span class="keyword">state</span> TIMED_WAITING</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t5 <span class="keyword">state</span> WAITING</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t6 <span class="keyword">state</span> BLOCKED</span><br></pre></td></tr></table></figure><h3 id="应用：烧水泡茶">应用：烧水泡茶</h3><ul><li>阅读华罗庚《统筹方法》，给出烧水泡茶的多线程解决方案</li></ul><div class="note info no-icon flat"><ul><li><p>统筹方法，是一种安排工作进程的数学方法。它的实用范围极广泛，在企业管理和基本建设中，以及关系复杂的科研项目的组织与管理中，都可以应用。</p></li><li><p>怎样应用呢？主要是把工序安排好。</p></li><li><p>比如，想泡壶茶喝。当时的情况是：开水没有；水壶要洗，茶壶、茶杯要洗；火已生了，茶叶也有了。怎么办？</p><ul><li>办法甲：洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开了，泡茶喝。</li><li>办法乙：先做好一些准备工作，洗水壶，洗茶壶茶杯，拿茶叶；一切就绪，灌水烧水；坐待水开了，泡茶喝。</li><li>办法丙：洗净水壶，灌上凉水，放在火上，坐待水开；水开了之后，急急忙忙找茶叶，洗茶壶茶杯，泡茶喝。</li></ul></li><li><p>哪一种办法省时间？我们能一眼看出，第一种办法好，后两种办法都窝了工。</p></li><li><p>这是小事，但这是引子，可以引出生产管理等方面有用的方法来。</p></li><li><p>水壶不洗，不能烧开水，因而洗水壶是烧开水的前提。没开水、没茶叶、不洗茶壶茶杯，就不能泡茶，因而这些又是泡茶的前提。它们的相互关系，可以用下边的箭头图来表示：<br><img src="https://s1.ax1x.com/2023/06/10/pCEHn0g.png" alt=""></p></li><li><p>从这个图上可以一眼看出，办法甲总共要16分钟（而办法乙、丙需要20分钟）。如果要缩短工时、提高工作效率，应当主要抓烧开水这个环节，而不是抓拿茶叶等环节。同时，洗茶壶茶杯、拿茶叶总共不过4分钟，大可利用“等水开”的时间来做。</p></li><li><p>是的，这好像是废话，卑之无甚高论。有如走路要用两条腿走，吃饭要一口一口吃，这些道理谁都懂得。但稍有变化，临事而迷的情况，常常是存在的。在近代工业的错综复杂的工艺过程中，往往就不是像泡茶喝这么简单了。任务多了，几百几千，甚至有好几万个任务。关系多了，错综复杂，千头万绪，往往出现“万事俱备，只欠东风”的情况。由于一两个零件没完成，耽误了一台复杂机器的出厂时间。或往往因为抓的不是关键，连夜三班，急急忙忙，完成这一环节之后，还得等待旁的环节才能装配。洗茶壶，洗茶杯，拿茶叶，或先或后，关系不大，而且同是一个人的活儿，因而可以合并成为：<br><img src="https://s1.ax1x.com/2023/06/10/pCEHJXT.png" alt=""></p></li><li><p>看来这是&quot;小题大做&quot;，但在工作环节太多的时候，这样做就非常必要了</p></li><li><p>这里讲的主要是时间方面的事，但在具体生产实践中，还有其他方面的许多事。这种方法虽然不一定能直接解决所有问题，但是我们利用这种方法来考虑问题，也是不无裨益的。</p></li></ul></div><h4 id="解法1：join">解法1：join</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.MakeTea&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTea</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;洗水壶&quot;</span>);</span><br><span class="line">            sleep(<span class="number">15</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;烧开水&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;Kyle&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;洗茶壶&quot;</span>);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;洗茶杯&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;拿茶叶&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t1.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;泡茶&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">52.453</span> c<span class="selector-class">.MakeTea</span> <span class="selector-attr">[Lucy]</span> - 洗茶壶</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">52.453</span> c<span class="selector-class">.MakeTea</span> <span class="selector-attr">[Kyle]</span> - 洗水壶</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">54.458</span> c<span class="selector-class">.MakeTea</span> <span class="selector-attr">[Lucy]</span> - 洗茶杯</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">55.469</span> c<span class="selector-class">.MakeTea</span> <span class="selector-attr">[Lucy]</span> - 拿茶叶</span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">07.463</span> c<span class="selector-class">.MakeTea</span> <span class="selector-attr">[Kyle]</span> - 烧开水  </span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">07.463</span> c<span class="selector-class">.MakeTea</span> <span class="selector-attr">[Lucy]</span> - 泡茶 </span><br></pre></td></tr></table></figure><ul><li>此种解法的缺陷<ul><li>上面模拟的是Lucy等Kyle的水烧开了，Lucy泡茶，如果现在要让Kyle等Lucy把茶叶拿过来，由Kyle泡茶呢？</li><li>上面两个线程其实是各执行各的，如果要模拟Kyle把水壶交给Lucy泡茶，或者模拟Lucy把茶叶交给Kyle泡茶呢？</li></ul></li><li>这个缺陷我们后面会解决</li></ul><h2 id="共享模型之管程">共享模型之管程</h2><h3 id="共享带来的问题">共享带来的问题</h3><h4 id="小故事">小故事</h4><ul><li>老王（操作系统）有一个功能强大的算盘（CPU），现在老王想把算盘租出去，赚点外快</li><li>小南和小女（线程）来使用这个算盘来进行一些计算，并按照时间给老王支付费用</li><li>但小南也不能一天24小时使用算盘，他得时不时小憩一会儿（sleep），又或者去吃饭上厕所（阻塞IO操作），有时候还需要一根烟，没烟的时候思路全无（wait）这些情况统称为阻塞</li><li>在上面的那些情况下，算盘没利用起来，老王觉得有点不划算</li><li>另外，小女也想用用算盘，如果总是让小南占着算盘，小女会觉得很不公平</li><li>于是，老王灵机一动，想了个办法，让他们没人用一会儿，轮流使用算盘（CPU时间片）</li><li>这样，当小南阻塞的时候，算盘可以分配给小女用，不会浪费，反之亦然</li><li>最近执行的计算比较复杂，需要存储一些中间结果，而小南和小女的脑容量（工作内存）不够，所以老王申请了一个笔记本（主存），把一些中间结果先记在本上</li><li>但由于分时系统，有一天还是发生了事故</li><li>小南从笔记本上读取了初值0，做了一个自增+1计算，还没来得及写回结果，此时轮到小女用了</li><li>于是小南嘴里念叨着，结果是1结果是1…，不甘心的上一边待着去了（上下文切换）</li><li>小女此时看到笔记本上是0，于是做了一个-1的运算，并将结果-1写到笔记本上，此时小女的时间也用完了，又轮到小南了</li><li>小南此时将嘴里一直念叨的1，写入了笔记本</li><li>最终小南和小女都觉得自己没做错，但笔记本中的结果是1而不是0</li></ul><h4 id="Java的体现">Java的体现</h4><ul><li>两个线程对一个初值为0的静态变量做自增和自减操作，各执行5000次，观察结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestCalculate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalculate</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                num--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;结果为：&#123;&#125;&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多次运行，我们会发现结果有正有负，也有可能为0</li></ul><h4 id="问题分析">问题分析</h4><ul><li>为什么上面的结果不确定呢？因为Java中对静态变量的自增、自减操作并不是原子操作，这部分在我这篇文章的第二小节中做了详细的解释</li></ul><div class="tag link"><a class="link-card" title="JVM内存模型" href="https://cyborg2077.github.io/2023/04/11/JvmPart5/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">JVM内存模型</p><p class="url">https://cyborg2077.github.io/2023/04/11/JvmPart5/</p></div></a></div><ul><li>对于<code>i++</code>(i为静态变量)，实际上会产生如下字节码指令</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getstatic i     <span class="comment">// 获取静态变量i的值</span></span><br><span class="line">iconst_1        <span class="comment">// 准备常量1</span></span><br><span class="line">iadd            <span class="comment">// 自增</span></span><br><span class="line">putstatic i     <span class="comment">// 将修改后的值存入静态变量i</span></span><br></pre></td></tr></table></figure><ul><li>对于<code>i--</code>也是类似</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getstatic i     <span class="comment">// 获取静态变量i的值</span></span><br><span class="line">iconst_1        <span class="comment">// 准备常量1</span></span><br><span class="line">isub            <span class="comment">// 自减</span></span><br><span class="line">putstatic i     <span class="comment">// 将修改后的值存入静态变量i</span></span><br></pre></td></tr></table></figure><ul><li>Java的内存模型如下，完成静态变量的自增、自减需要在主存与线程内存中进行数据交换<br><img src="https://s1.ax1x.com/2023/04/11/ppOSFv4.png" alt=""></li><li>出现负数的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设i的初始值为0</span></span><br><span class="line">getstatic i         <span class="comment">// 线程1-获取静态变量i的值 线程内i=0</span></span><br><span class="line">getstatic i         <span class="comment">// 线程2-获取静态变量i的值 线程内i=0</span></span><br><span class="line">iconst_1            <span class="comment">// 线程1-准备常量1</span></span><br><span class="line">iadd                <span class="comment">// 线程1-自增 线程内i=1</span></span><br><span class="line">putstatic i         <span class="comment">// 线程1-将修改后的值存入静态变量i 静态变量i=1</span></span><br><span class="line">iconst_1            <span class="comment">// 线程2-准备常量1</span></span><br><span class="line">isub                <span class="comment">// 线程2-自减 线程内i=-1</span></span><br><span class="line">putstatic i         <span class="comment">// 线程2-将修改后的值存入静态变量i 静态变量i=-1</span></span><br></pre></td></tr></table></figure><ul><li>出现正数的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设i的初始值为0</span></span><br><span class="line">getstatic i         <span class="comment">// 线程1-获取静态变量i的值 线程内i=0</span></span><br><span class="line">getstatic i         <span class="comment">// 线程2-获取静态变量i的值 线程内i=0</span></span><br><span class="line">iconst_1            <span class="comment">// 线程1-准备常量1</span></span><br><span class="line">iadd                <span class="comment">// 线程1-自增 线程内i=1</span></span><br><span class="line">iconst_1            <span class="comment">// 线程2-准备常量1</span></span><br><span class="line">isub                <span class="comment">// 线程2-自减 线程内i=-1</span></span><br><span class="line">putstatic i         <span class="comment">// 线程2-将修改后的值存入静态变量i 静态变量i=-1</span></span><br><span class="line">putstatic i         <span class="comment">// 线程1-将修改后的值存入静态变量i 静态变量i=1</span></span><br></pre></td></tr></table></figure><h4 id="临界区-Critical-Section">临界区(Critical Section)</h4><ul><li>一个程序运行多个线程本身是没有问题的，问题出在多个线程访问<code>共享资源</code><ul><li>多个线程读<code>共享资源</code>其实也没有问题</li><li>在多个线程对<code>共享资源</code>读写操作时，发生指令交错，就会出现问题</li></ul></li><li>一段代码内如果存在对<code>共享资源</code>的多线程读写操作，则称这段代码为<code>临界区</code></li></ul><h4 id="竞态条件-Race-Condition">竞态条件(Race Condition)</h4><ul><li>多个线程在临界区内执行，由于代码的<code>执行序列不同</code>，而导致结果无法预测，则称之为发生了<code>竞态条件</code></li></ul><h3 id="synchronized解决方案">synchronized解决方案</h3><ul><li>为了避免临界区的竞态条件发生，有多种手段可以达到目的<ul><li>阻塞式的解决方案：synchronized、Lock</li><li>非阻塞式的解决方案：原子变量</li></ul></li><li>这里使用阻塞式解决方案：synchronized，来解决上述问题，即俗称的<code>对象锁</code>，它采用互斥的方式让同一时刻至多有一个线程能持有<code>对象锁</code>，其他线程再想获取这个<code>对象锁</code>时就会阻塞住。这样就能保证拥有锁的线程可以安全执行临界区的代码，不用担心上下文切换。</li></ul><div class="note warning no-icon flat"><ul><li>注意：虽然Java中的互斥和同步都可以采用synchronized关键字来完成，但它们还是有区别的：<ul><li>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</li><li>同步是由于线程执行的先后、顺序不同，需要一个线程等待其他线程运行到某个点</li></ul></li></ul></div><ul><li>synchronized语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) &#123;</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestCalculate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalculate</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                    num--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;结果为：&#123;&#125;&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以把obj想象成一间房间（撤硕），线程t1、线程t2想象成两个人</li><li>当线程t1执行到<code>synchronized(obj)</code>时，就好比t1进入了撤硕，并反手锁住了门，在门内执行<code>i++</code>操作</li><li>此时如果t2也运行到了<code>synchronized(obj)</code>，它发现门被锁住了，只能在门外等待</li><li>当t1执行完synchronized块内的代码，此时才会解开门上的锁，从撤硕出来，t2线程此时才可以进入撤硕，并反手锁住门，执行它的<code>i--</code>操作</li></ul><h4 id="思考">思考</h4><ul><li>synchronized实际上是使用对象锁保证了临界区内代码的原子性，临界区内的代码对外是不可分割的，不会被线程切换所打断。为了加深理解，我们思考以下几个问题<ol><li>如果把synchronized(obj)放在for循环外面，如何理解？<ul><li>仅在i++操作上加锁，锁住了4条虚拟机指令，但是外层循环了5W次，那就要加锁解锁5W次，这样是比较耗时的，那么此时我们就可以直接在for循环上加锁，这样就只用解锁一次</li></ul></li><li>如果t1 synchronized(obj1)，而t2 synchronized(obj2)会怎样运作？<ul><li>如果t1锁住的是obj1对象，t2锁住的是obj2对象，就好比两个人进入了两个不同的撤硕，没法起到同步的效果</li></ul></li><li>如果t1 synchronized(obj)，而t2没有加会怎么样？<ul><li>这意味着线程 t2 可以自由地对 num 进行自减操作，可能会在线程 t1 修改 num 的过程中，读取到一个中间状态的 num 值。</li></ul></li></ol></li></ul><h4 id="面向对象改进">面向对象改进</h4><ul><li>可以把需要保护的共享变量放入一个类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            value++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            value--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestCalculate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalculate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Room</span> <span class="variable">room</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; room.increment());</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; room.decrement());</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;结果为：&#123;&#125;&quot;</span>, room.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法上的synchronized">方法上的synchronized</h3><ul><li>我们可以直接把synchronized关键字加在方法上，这样等价于用当前对象(this)来作为锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果在静态方法上加synchronized，则是等价于使用该类(Test.class)作为锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不加synchronized的方法">不加synchronized的方法</h4><ul><li>不加synchronized的方法就好比不遵守规则的人，不去老实排队（好比翻墙进去的）</li></ul><h4 id="线程八锁">线程八锁</h4><ul><li>其实就是考查synchronized锁住的是哪个对象，有八种情形</li></ul><ol><li>情况一：线程1和线程2都是用n1作为锁，二者执行顺序随机，结果为<code>12</code>或<code>21</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tmp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.a()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.b()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>情况二：t1和t2拿到的是同一把锁，执行顺序随机，如果t1先执行，则<code>1s后12</code>；如果t2先执行，则<code>2 1s后1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        Tmp.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tmp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.a()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.b()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>情况三：<code>3 1s后12</code>、<code>23 1s后1</code>、<code>32 1s后1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        Tmp.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tmp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.a()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.b()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.c()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>情况四：t1和t2用的锁分别是n1和n2，相当于没锁，由于t1线程需要休眠1s，固结果为<code>2 1s后1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        Tmp.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tmp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.a()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n2.b()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>情况五：t1的锁是<code>Number.class</code>，t2的锁是n1对象，锁不同，相当于没锁，结果同上：<code>2 1s后1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        Tmp.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tmp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.a()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.b()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>情况六：t1和t2的锁均为<code>Number.class</code>，<code>1s后12</code>或<code>2 1s后1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        Tmp.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tmp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.a()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.b()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>情况七：<code>2 1s后1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        Tmp.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tmp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.a()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n2.b()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>情况八：t1和t2的锁均为<code>Number.class</code>，与调用方n1、n2无关，结果<code>1s后12</code>或<code>2 1s后1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        Tmp.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tmp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="type">Number</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n1.a()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; n2.b()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的线程安全分析">变量的线程安全分析</h3><h4 id="成员变量和静态变量是否线程安全？">成员变量和静态变量是否线程安全？</h4><ul><li>如果它们没有共享，则线程安全</li><li>如果它们被共享了，根据它们的状态是否能改变，分为两种情况<ul><li>如果只有读操作，则线程安全</li><li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li></ul></li></ul><h4 id="局部变量是否线程安全">局部变量是否线程安全</h4><ul><li>通常情况下，方法内的局部变量是线程安全的，因为它们只能在方法内部访问，每个线程都有自己的栈帧，而局部变量就存放在栈帧内。</li><li>但局部变量引用的对象未必是线程安全的<ul><li>如果该对象没有逃离方法的作用域，那么它是线程安全的</li><li>如果该对象逃离了方法的作用范围，则需要考虑线程安全</li><li>详情可以参考我这篇文章的<code>2.2.1</code>小结，或者在文章内<kbd>Ctrl</kbd> + <kbd>F</kbd>搜索<code>逃离</code></li></ul>  <div class="tag link"><a class="link-card" title="JVM内存模型" href="https://cyborg2077.github.io/2023/03/27/JvmPart2/"><div class="left"><img src="https://s1.ax1x.com/2023/03/06/ppZ9JIS.png"/></div><div class="right"><p class="text">JVM内存模型</p><p class="url">https://cyborg2077.github.io/2023/03/27/JvmPart2/</p></div></a></div></li></ul><h4 id="局部变量线程安全分析">局部变量线程安全分析</h4><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每个线程调用test1()方法时，局部变量i会在每个线程的栈帧内存中被创建多份，因此不存在共享，使用<code>javap -v</code>命令查看test1()的字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">0</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span>                    <span class="comment">// 将整数10推送到操作数栈顶。</span></span><br><span class="line">       <span class="number">2</span>: istore_0                            <span class="comment">// 将操作数栈顶的整数值存储到局部变量表的索引为0的位置（即将10存储到局部变量i） </span></span><br><span class="line">       <span class="number">3</span>: iinc          <span class="number">0</span>, <span class="number">1</span>                  <span class="comment">// 将局部变量表中索引为0的位置的整数值增加1。</span></span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">3</span>       <span class="number">4</span>     <span class="number">0</span>     i   I</span><br></pre></td></tr></table></figure><ul><li><p>如图<br><img src="https://s1.ax1x.com/2023/06/16/pCM31Gn.png" alt=""></p></li><li><p>局部变量的引用稍有不同，我们先来看一个成员变量的例子，method2和method3都是对成员变量的修改，一个是添加元素，一个是移除元素。</p><ul><li>当多个线程执行的指令交错的时候，可能会出现list中没有元素，但是却执行了remove操作，此时就会报错</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_NUM</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOOP_NUM</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadUnsafe</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadUnsafe</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_NUM; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                test.method01(LOOP_NUM);</span><br><span class="line">            &#125;, <span class="string">&quot;Thread&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadUnsafe</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method01</span><span class="params">(<span class="type">int</span> loopNum)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            <span class="comment">// 临界区，会发生竞态条件</span></span><br><span class="line">            method02();</span><br><span class="line">            method03();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method02</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method03</span><span class="params">()</span> &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>报错</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;Thread1&quot;</span> java<span class="selector-class">.lang</span><span class="selector-class">.IndexOutOfBoundsException</span>: Index: <span class="number">0</span>, Size: <span class="number">0</span></span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.ArrayList</span><span class="selector-class">.rangeCheck</span>(ArrayList<span class="selector-class">.java</span>:<span class="number">657</span>)</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.ArrayList</span><span class="selector-class">.remove</span>(ArrayList<span class="selector-class">.java</span>:<span class="number">496</span>)</span><br><span class="line">at cn<span class="selector-class">.itcast</span><span class="selector-class">.n6</span><span class="selector-class">.ThreadUnsafe</span><span class="selector-class">.method3</span>(TestThreadSafe<span class="selector-class">.java</span>:<span class="number">35</span>)</span><br><span class="line">at cn<span class="selector-class">.itcast</span><span class="selector-class">.n6</span><span class="selector-class">.ThreadUnsafe</span><span class="selector-class">.method1</span>(TestThreadSafe<span class="selector-class">.java</span>:<span class="number">26</span>)</span><br><span class="line">at cn<span class="selector-class">.itcast</span><span class="selector-class">.n6</span><span class="selector-class">.TestThreadSafe</span>.lambda<span class="variable">$main</span>$<span class="number">0</span>(TestThreadSafe<span class="selector-class">.java</span>:<span class="number">14</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><ul><li><p>分析：无论哪个线程中的method02或method03中，引用的都是同一个对象中的list成员变量<br><img src="https://s1.ax1x.com/2023/06/16/pCMddoV.png" alt=""></p></li><li><p>下面我们将list修改为局部变量</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method01</span><span class="params">(<span class="type">int</span> loopNum)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            <span class="comment">// 临界区，会发生竞态条件</span></span><br><span class="line">            method02();</span><br><span class="line">            method03();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method02</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method03</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>此时无论运行多少次，也不会出现上述的问题了。因为此时list是局部变量，每个线程调用时会创建其不同的实例，没有共享<br><img src="https://s1.ax1x.com/2023/06/16/pCMdOTP.png" alt=""></p></li><li><p>我们继续从方法访问修饰符来思考，如果将method02和method03修改为public方法，会不会造成线程安全问题？</p><ol><li>情况一：有其他线程调用method02和method03</li><li>情况二：在情况一的基础上，添加ThreadSafe的子类，子类覆盖method03方法</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method01</span><span class="params">(<span class="type">int</span> loopNum)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            <span class="comment">// 临界区，会发生竞态条件</span></span><br><span class="line">            method02(list);</span><br><span class="line">            method03(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method02</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method03</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeSubClass</span> <span class="keyword">extends</span> <span class="title class_">ThreadSafe</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method03</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            list.remove(<span class="number">0</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多运行几遍就会报错，原因是重写的method03方法将list共享到了新线程，造成两个线程都在修改list对象，从这个例子中可以看出private可以保护方法的线程安全的，限制子类不能覆盖它</li></ul>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;Thread-957&quot;</span> java<span class="selector-class">.lang</span><span class="selector-class">.IndexOutOfBoundsException</span>: Index: <span class="number">0</span>, Size: <span class="number">0</span></span><br><span class="line">    at java<span class="selector-class">.util</span><span class="selector-class">.ArrayList</span><span class="selector-class">.rangeCheck</span>(ArrayList<span class="selector-class">.java</span>:<span class="number">659</span>)</span><br><span class="line">    at java<span class="selector-class">.util</span><span class="selector-class">.ArrayList</span><span class="selector-class">.remove</span>(ArrayList<span class="selector-class">.java</span>:<span class="number">498</span>)</span><br><span class="line">    at com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo01</span><span class="selector-class">.ThreadSafeSubClass</span>.lambda<span class="variable">$method03</span>$<span class="number">0</span>(Test01<span class="selector-class">.java</span>:<span class="number">44</span>)</span><br><span class="line">    at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">750</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见的线程安全类">常见的线程安全类</h3><ol><li>String</li><li>Integer</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>Hashtable</li><li>java.util.concurrent包下的类</li></ol><ul><li>这里说它们是线程安全的是指，当多个线程调用它们<code>同一个</code>实例的某个方法时，是线程安全的，可以理解为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; table.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>), <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; table.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>), <span class="string">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><p>虽然它们的每个方法都是原子的，但多个方法的组合不是原子的</p></div><h4 id="线程安全类方法的组合">线程安全类方法的组合</h4><ul><li>分析以下代码是否线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"><span class="comment">// 两个线程同时执行</span></span><br><span class="line"><span class="keyword">if</span> (table.get(<span class="string">&quot;key&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">    table.put(<span class="string">&quot;key&quot;</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在多线程下，可能会发生指令交错，线程 <code>T2</code> 的操作结果被线程 <code>T1</code> 的操作结果覆盖，导致数据不一致。</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T1：<span class="keyword">table</span>.<span class="keyword">get</span>(&quot;key&quot;) == <span class="keyword">null</span></span><br><span class="line">    T2：<span class="keyword">table</span>.<span class="keyword">get</span>(&quot;key&quot;) == <span class="keyword">null</span></span><br><span class="line">    T2：<span class="keyword">table</span>.put(&quot;key&quot;, v2);</span><br><span class="line">T1：<span class="keyword">table</span>.put(&quot;key&quot;, v1);</span><br></pre></td></tr></table></figure><h4 id="不可变类的线程安全性">不可变类的线程安全性</h4><ul><li>在Java中，String类和Integer类被设计为不可变类（Immutable Class），这意味着一旦创建了对象，其状态就不能被修改。这种不可变性使得String和Integer对象在多线程环境中是线程安全的，因为它们的状态不会发生变化，所以不会导致线程安全问题。<ol><li>String类的线程安全性<ul><li>字符串是不可变的，一旦创建就不能修改。任何对字符串的修改都会创建一个新的字符串对象，而不会修改原始字符串对象。</li><li>因为字符串不可变，所以多个线程可以同时访问同一个字符串对象，而不需要担心竞争条件或数据不一致的问题。</li></ul></li><li>Integer类的线程安全性<ul><li>Integer类是一个包装类，用于封装int类型的值。它也是不可变的，一旦创建就不能修改</li><li>对于常见的整数值（-128 ~ 127），Java使用IntegerCache来重用Integer对象。这意味着多个线程同时访问这些整数值时，会得到相同的Integer对象</li><li>对于超出缓存范围的整数值，每个线程都会获得一个独立的Integer对象，因此不会存在竞态条件。</li></ul></li></ol></li></ul><h4 id="实例分析">实例分析</h4><ol><li>例一</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？否：Hashtable才是线程安全的，此map会被多个线程共享并访问到</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 是否安全？是：字符串是不可变类，是线程安全的</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">S1</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="comment">// 是否安全？是：理由同上</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">S2</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="comment">// 是否安全？否：会被共享，与map理由一致</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">D1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 是否安全？否：final修饰符仅仅是将D2的引用值固定了，但还是可被修改的</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Date</span> <span class="variable">D2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用上述变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>例二</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？否：doGet 方法会被多个线程并发调用。由于 userService 是一个共享的成员变量，多个线程同时调用 doGet 方法可能会导致并发访问问题。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        userService.update(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 记录调用次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以将UserService对象的创建放在doGet内来完成，这样可以保证线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    userService.update(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>例三</li></ol><ul><li>Spring中的对象，不加<code>@Scope(&quot;&quot;prototype)</code>注解声明的话，默认都是单例的，既然对象都是单例的，那么这里的start属性也是共享的，所以是线程不安全的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* *(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* *(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;cost time:&quot;</span> + (end-start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们可以使用环绕通知，将start作为一个局部变量，从而避免线程安全问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* *(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;cost time: &quot;</span> + (end - start));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>例四，从下往上看</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？同下，也是不可变的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        userService.update(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？是：虽然UserDao是成员变量，但是里面没有东西可以改，是线程安全的，类似于无状态不可变</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set password = ? where username = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 是否安全？是：没有成员变量，即使有多个线程来访问，也什么都改不了，只读</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>例五</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？否</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        userService.update(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？否，其中的成员变量被共享，可被修改</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？否：Connection对象作为成员变量，会被共享</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set password = ? where username = ?&quot;</span>;</span><br><span class="line">        conn = DriverManager.getConnection(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>例六</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        userService.update(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// UserDao是作为局部变量被创建的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？是：虽然Connection是成员变量，但是UserDao是在update()方法中作为局部变量创建的，故这里的Connection都是每个线程独立创建的，不会被共享</span></span><br><span class="line">    <span class="type">private</span> <span class="variable">Connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set password = ? where username = ?&quot;</span>;</span><br><span class="line">        conn = DriverManager.getConnection(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>例七</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 是否安全？否：虽然sdf方法是局部变量，但是sdf对象会作为参数被传递给抽象方法foo()，其子类可能会对foo()方法中的sdf做修改，相当于sdf对象逃离了方法作用范围，线程不安全</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        foo(sdf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="title function_">foo</span><span class="params">(SimpleDateFormat sdf)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>().bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中foo的行为是不确定的，可能会对sdf做修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(SimpleDateFormat sdf)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;1999-10-11 00:00:00&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sdf.parse(dateStr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="习题">习题</h3><h4 id="卖票练习">卖票练习</h4><ul><li>测试下面的卖票代码是否存在线程安全问题，并尝试改正</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TicketWindow</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TicketWindow</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖票</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount 预购买的张数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实际卖的张数，余票不足为0 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sell</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.count &gt;= amount) &#123;</span><br><span class="line">            <span class="built_in">this</span>.count -= amount;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们来实际测试一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.ExerciseSell&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExerciseSell</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TicketWindow</span> <span class="variable">window</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindow</span>(<span class="number">1000</span>);</span><br><span class="line">        ArrayList&lt;Thread&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; sellCount = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> window.sell(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">5</span>) + <span class="number">1</span>);</span><br><span class="line">                sellCount.add(count);</span><br><span class="line">            &#125;);</span><br><span class="line">            list.add(thread);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        list.forEach((t) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        log.debug(<span class="string">&quot;卖出：&#123;&#125;张&quot;</span>, sellCount.stream().mapToInt(n -&gt; n.intValue()).sum());</span><br><span class="line">        log.debug(<span class="string">&quot;剩余：&#123;&#125;张&quot;</span>, window.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果发生了超卖现象，原因是在售票方法处，没有加锁，导致多个线程可能同时进来修改票数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">37</span>:<span class="number">37.959</span> c<span class="selector-class">.ExerciseSell</span> <span class="selector-attr">[main]</span> - 卖出：<span class="number">1008</span>张</span><br><span class="line"><span class="number">16</span>:<span class="number">37</span>:<span class="number">37.962</span> c<span class="selector-class">.ExerciseSell</span> <span class="selector-attr">[main]</span> - 剩余：<span class="number">0</span>张</span><br></pre></td></tr></table></figure><ul><li>解决方案是给sell()方法加锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">sell</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.count &gt;= amount) &#123;</span><br><span class="line">        <span class="built_in">this</span>.count -= amount;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">55</span>:<span class="number">15.759</span> c<span class="selector-class">.ExerciseSell</span> <span class="selector-attr">[main]</span> - 卖出：<span class="number">1000</span>张</span><br><span class="line"><span class="number">17</span>:<span class="number">55</span>:<span class="number">15.765</span> c<span class="selector-class">.ExerciseSell</span> <span class="selector-attr">[main]</span> - 剩余：<span class="number">0</span>张</span><br></pre></td></tr></table></figure><h4 id="转账练习">转账练习</h4><ul><li>测试下面代码是否存在线程安全问题，并尝试改正</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> amount, Account target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.money &gt;= amount) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setMoney(money - amount);</span><br><span class="line">            target.setMoney(target.getMoney() + amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.ExerciseTransfer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExerciseTransfer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Account</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                a.transfer(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1000</span>), b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                b.transfer(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1000</span>), a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">&quot;两人总金额：&#123;&#125;&quot;</span>, a.getMoney() + b.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果如下，转来转去，钱还转少了<del>（身为银行，收点手续费怎么啦）</del></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">18</span>:<span class="number">07</span>:<span class="number">44</span>.<span class="number">726</span> c.ExerciseTransfer<span class="meta"> [main] - 两人总金额：1436</span></span><br></pre></td></tr></table></figure><ul><li>分析：这里的共享变量是<code>money</code>，临界区则是<code>transfer()</code>方法，该方法中对money进行了修改，但是没有加锁，但是直接在方法上加synchronized是没用的，这样相当于使用this当前对象来作为锁，如果多个线程同时调用<code>transfer()</code>方法，那么每个线程会获取不同的锁，等于没加锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> amount, Account target)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.money &gt;= amount) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setMoney(money - amount);</span><br><span class="line">            target.setMoney(target.getMoney() + amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>正确的做法是使用<code>相同的锁</code>来对共享资源进行同步，这里可以使用<code>Account.class</code>来作为锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> amount, Account target)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Account.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.money &gt;= amount) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setMoney(money - amount);</span><br><span class="line">            target.setMoney(target.getMoney() + amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Monitor概念">Monitor概念</h3><h4 id="Java对象头">Java对象头</h4><ul><li>以32位虚拟机为例，普通对象</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">--------------------------------------------------------------</span>|</span><br><span class="line">|<span class="string">                   Object Header (64 bits)                    </span>|</span><br><span class="line">|<span class="string">------------------------------------</span>|<span class="string">-------------------------</span>|</span><br><span class="line">|<span class="string">      Mark Word (32 bits)           </span>|<span class="string">  Klass Word (32 bits)   </span>|</span><br><span class="line">|<span class="string">------------------------------------</span>|<span class="string">-------------------------</span>|</span><br></pre></td></tr></table></figure><ul><li>数组对象</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">---------------------------------------------------------------------------------</span>|</span><br><span class="line">|<span class="string">                               Object Header (96 bits)                           </span>|</span><br><span class="line">|<span class="string">--------------------------------</span>|<span class="string">-----------------------</span>|<span class="string">------------------------</span>|</span><br><span class="line">|<span class="string">       Mark Word(32 bits)       </span>|<span class="string">   Klass Word(32 bits) </span>|<span class="string"> array length(32 bits)  </span>|</span><br><span class="line">|<span class="string">--------------------------------</span>|<span class="string">-----------------------</span>|<span class="string">------------------------</span>|</span><br></pre></td></tr></table></figure><ul><li>其中MarkWord结构为</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">-------------------------------------------------</span>|<span class="string">----------------------------</span>|</span><br><span class="line">|<span class="string">                   Mark Word (32 bits)                   </span>|<span class="string">        State       </span>|</span><br><span class="line">|<span class="string">-------------------------------------------------</span>|<span class="string">----------------------------</span>|</span><br><span class="line">|<span class="string"> hashcode:25         </span>|<span class="string"> age:4 </span>|<span class="string">   biased_lock:0   </span>|<span class="string"> 01    </span>|<span class="string">        Normal      </span>|</span><br><span class="line">|<span class="string">-------------------------------------------------</span>|<span class="string">----------------------------</span>|</span><br><span class="line">|<span class="string"> thread:23 </span>|<span class="string"> epoch:2 </span>|<span class="string"> age:4 </span>|<span class="string">   biased_lock:1   </span>|<span class="string"> 01    </span>|<span class="string">        Biased      </span>|</span><br><span class="line">|<span class="string">-------------------------------------------------</span>|<span class="string">----------------------------</span>|</span><br><span class="line">|<span class="string">             ptr_to_lock_record:30               </span>|<span class="string"> 00    </span>|<span class="string"> Lightweight Locked </span>|</span><br><span class="line">|<span class="string">-------------------------------------------------</span>|<span class="string">----------------------------</span>|</span><br><span class="line">|<span class="string">          ptr_to_heavyweight_monitor:30          </span>|<span class="string"> 10    </span>|<span class="string"> Heavyweight Locked </span>|</span><br><span class="line">|<span class="string">-------------------------------------------------</span>|<span class="string">----------------------------</span>|</span><br><span class="line">|<span class="string">                                                 </span>|<span class="string"> 11    </span>|<span class="string">  Marked for GC     </span>|</span><br><span class="line">|<span class="string">-------------------------------------------------</span>|<span class="string">----------------------------</span>|</span><br></pre></td></tr></table></figure><ul><li>64位虚拟机Mark Word</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string">                           Mark Word (64 bits)                      </span>|<span class="string">       State        </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string"> unused:25 </span>|<span class="string"> hashcode:31 </span>|<span class="string"> unused:1 </span>|<span class="string"> age:4 </span>|<span class="string"> biased_lock:0 </span>|<span class="string">  01   </span>|<span class="string">       Normal       </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string"> thread:54 </span>|<span class="string">  epoch:2    </span>|<span class="string"> unused:1 </span>|<span class="string"> age:4 </span>|<span class="string"> biased_lock:1 </span>|<span class="string">  01   </span>|<span class="string">       Biased       </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string">               ptr_to_lock_record:62                        </span>|<span class="string">  00   </span>|<span class="string"> Lightweight Locked </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string">             ptr_to_heavyweight_monitor:62                  </span>|<span class="string">  10   </span>|<span class="string"> Heavyweight Locked </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string">                                                            </span>|<span class="string">  11   </span>|<span class="string">    Marked for GC   </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|<span class="string"> </span></span><br></pre></td></tr></table></figure><h4 id="Monitor-锁">Monitor(锁)</h4><ul><li>Monitor被翻译成<code>监视器</code>或<code>管程</code></li><li>每个Java对象都可以关联一个Monitor对象，如果使用synchronized给对象上锁（重量级）之后，该对象头的MarkWord中就被设置指向Monitor对象的指针</li><li>Monitor结构如下<br><img src="https://s1.ax1x.com/2023/06/18/pC1iNxH.png" alt=""></li><li>刚开始Monitor中Owner为null</li><li>当Thread-2上锁的过程中，如果Thread-3、Thread-4、Thread-5也来执行synchronized(obj)，就会进入阻塞队列等待（EntryList BLOCKED）</li><li>Thread-2执行完同步代码块的内容，然后唤醒EntryList中等待的线程来竞争锁，竞争时是非公平的</li><li>图中WaitSet中的Thread-0、Thread-1是之前获得过锁，但条件不满足进入WAITING状态的线程，后面将wait-notify时会分析</li></ul><div class="note warning no-icon flat"><ul><li>synchronized必须是进入同一个对象的monitor才有上述效果</li><li>不加synchronized的对象不会关联监视器，不遵从以上规则</li></ul></div><h4 id="synchronized原理">synchronized原理</h4><ul><li>原理我们从字节码的角度来分析，示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>javap -v /xx/Test.class</code>编译后的字节码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    <span class="comment">// 方法签名</span></span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    <span class="comment">// 访问修饰符</span></span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"></span><br><span class="line">Code:</span><br><span class="line">  <span class="comment">// 操作数栈深度和本地变量表容量</span></span><br><span class="line">  stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">     <span class="number">0</span>: getstatic     #<span class="number">2</span>                    <span class="comment">// Field lock:Ljava/lang/Object;  // 获取静态字段 lock 的值并将其推送到操作数栈顶部</span></span><br><span class="line">     <span class="number">3</span>: dup                                 <span class="comment">// 复制栈顶的数值（即 lock 引用）并将副本推送到操作数栈顶部</span></span><br><span class="line">     <span class="number">4</span>: astore_1                            <span class="comment">// 将栈顶的数值（即 lock 引用的副本）存储到本地变量 1（args 参数）</span></span><br><span class="line">     <span class="number">5</span>: monitorenter                        <span class="comment">// 进入监视器（锁）保护的同步块</span></span><br><span class="line">     <span class="number">6</span>: getstatic     #<span class="number">3</span>                    <span class="comment">// Field counter:I  执行counter++</span></span><br><span class="line">     <span class="number">9</span>: iconst_1                           </span><br><span class="line">    <span class="number">10</span>: iadd                                 </span><br><span class="line">    <span class="number">11</span>: putstatic     #<span class="number">3</span>                     </span><br><span class="line">    <span class="number">14</span>: aload_1                              </span><br><span class="line">    <span class="number">15</span>: monitorexit                         <span class="comment">// 自增操作完毕，退出监视器（锁）保护的同步块</span></span><br><span class="line">    <span class="number">16</span>: goto          <span class="number">24</span>                    <span class="comment">// 无条件跳转到指令位置 24，继续执行下面的指令</span></span><br><span class="line">    <span class="number">19</span>: astore_2                            <span class="comment">// 这里是异常处理：将栈顶的数值（即异常对象引用）存储到本地变量 2（ex 异常）</span></span><br><span class="line">    <span class="number">20</span>: aload_1                             <span class="comment">// 将本地变量 1（args 参数）加载到操作数栈顶部</span></span><br><span class="line">    <span class="number">21</span>: monitorexit                         <span class="comment">// 释放锁：在异常处理块中，退出监视器（锁）保护的同步块</span></span><br><span class="line">    <span class="number">22</span>: aload_2                             <span class="comment">// 重试异常：将本地变量 2（ex 异常）加载到操作数栈顶部</span></span><br><span class="line">    <span class="number">23</span>: athrow                              <span class="comment">// 抛出异常</span></span><br><span class="line">    <span class="number">24</span>: <span class="keyword">return</span>                              <span class="comment">// 方法返回</span></span><br><span class="line"></span><br><span class="line">Exception table:</span><br><span class="line">   from    to  target type</span><br><span class="line">       <span class="number">6</span>    <span class="number">16</span>    <span class="number">19</span>   any      <span class="comment">// 如果6~16行出现了异常，跳转到19行继续执行</span></span><br><span class="line">      <span class="number">19</span>    <span class="number">22</span>    <span class="number">19</span>   any      <span class="comment">// 如果19~22行出现了异常，跳转到19行继续执行</span></span><br></pre></td></tr></table></figure><ul><li>从字节码中我们可以看出，即使发生了异常，也会释放掉锁</li></ul><div class="note warning no-icon flat"><ul><li>注意：方法级别的synchronized不会再字节码指令中体现</li></ul></div><h3 id="synchronized原理进阶">synchronized原理进阶</h3><h4 id="轻量级锁">轻量级锁</h4><ul><li>轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有在竞争），那么可以使用轻量级锁来优化</li><li>轻量级锁对使用者是<code>透明的</code>，即语法仍然是synchronized，下面我们举个例子来深入轻量级锁的原理</li><li>假设有两个方法同步块，利用同一个对象加锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块A</span></span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>首先会创建锁对象，每个线程的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的MarkWord<br><img src="https://s1.ax1x.com/2023/06/26/pCUcTJ0.png" alt=""></p></li><li><p>其次让锁记录中的Object reference，并尝试使用CAS替换Object的Mark Word，将Mark Word的值存入锁记录<br><img src="https://s1.ax1x.com/2023/06/26/pCUgiQO.png" alt=""></p></li><li><p>如果CAS替换成功，对象头汇总存储了<code>锁记录地址和状态00</code>，表示由该线程给对象加锁，其中<code>00</code>对应的是<code>轻量级锁</code>，如下图所示<br><img src="https://s1.ax1x.com/2023/06/26/pCUgVwd.png" alt=""></p></li><li><p>如果CAS替换失败，有两种情况</p><ol><li>如果是其他线程已经持有了该Object的轻量级锁，表明有竞争，进入锁膨胀的过程</li><li>如果是自己执行了synchronized锁重入，那么再添加一条LockRecord作为重入的计数<br><img src="https://s1.ax1x.com/2023/06/26/pCUgl6S.png" alt=""></li></ol></li><li><p>当退出synchronized代码块（解锁）时，如果有取值为null的锁记录，表示有重入，此时删除锁记录，表示重入计数-1<br><img src="https://s1.ax1x.com/2023/06/26/pCUgs0J.png" alt=""></p></li><li><p>当退出synchronized代码块（解锁）时，锁记录的值不为null，此时使用CAS将MarkWord的值恢复给对象头</p><ul><li>成功，则解锁成功</li><li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁的解锁流程</li></ul></li></ul><h4 id="锁膨胀">锁膨胀</h4><ul><li>如果在尝试加轻量级锁的过程中，CAS操作无法成功，这时一种情况就是有其他线程为此对象加上了轻量级锁（有竞争），这是需要进行锁膨胀，将轻量级锁变为重量级锁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>现在Thread-1尝试加轻量级锁<br><img src="https://s1.ax1x.com/2023/06/26/pCU2sv8.png" alt=""></li><li>由于Thread-0已经对该对象加了轻量级锁，对象的MarkWord后两位已经是00了，那么Thread-1进行CAS操作就会失败，此时进入锁膨胀流程<ul><li>即为Object对象申请Monitor锁，让Object指向重量级锁地址</li><li>然后自己进入Monitor的EntryList BLOCKED，进入阻塞队列等待<br><img src="https://s1.ax1x.com/2023/06/26/pCU2YuD.png" alt=""></li><li>当Thread-0退出同步块解锁时，使用CAS将MarkWord的值恢复给对象头，失败。</li></ul></li></ul><h4 id="自旋优化">自旋优化</h4><ul><li>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持有锁的线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。</li><li>自旋重试成功的情况</li></ul><table><thead><tr><th style="text-align:center">线程 1 （core 1 上）</th><th style="text-align:center">对象 Mark</th><th style="text-align:center">线程 2 （core 2 上）</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">10（重量锁）</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">访问同步块，获取 monitor</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">成功（加锁）</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">访问同步块，获取 monitor</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">执行完毕</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">成功（解锁）</td><td style="text-align:center">01（无锁）</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">成功（加锁）</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">执行同步块</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><ul><li>自旋重试失败的情况</li></ul><table><thead><tr><th style="text-align:center">线程 1（core 1 上）</th><th style="text-align:center">对象 Mark</th><th style="text-align:center">线程 2（core 2 上）</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">10（重量锁）</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">访问同步块，获取 monitor</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">成功（加锁）</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">访问同步块，获取 monitor</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">阻塞</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><ul><li>自旋会占用CPU空间，单核CPU自旋就是浪费，多核CPU自旋才能发挥优势</li><li>在Java6之后自旋锁是自适应的，如果对象刚刚一次自旋操作成功过，那么为这次自旋成功的可能性会很高，那就多自旋几次；反之就少自旋或者不自旋，总之是比较智能的。</li><li>Java7之后就不能控制是否开启自旋功能了。</li></ul><h4 id="偏向锁">偏向锁</h4><ul><li>轻量级锁在没有竞争时，每次重入仍需要进行CAS操作。Java6中引入了偏向锁来做进一步优化：只有第一次使用CAS将线程ID设置到对象头的MarkWord头，之后发现这个线程ID是自己的，那么就表示没有竞争，不用CAS。以后只要不发生竞争，这个对象就归该线程所有。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块 A</span></span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块 B</span></span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块 C</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/06/26/pCU5svq.png" alt=""></p><ul><li><p>偏向状态：先来回顾一下对象头格式</p>  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string">                           Mark Word (64 bits)                      </span>|<span class="string">       State        </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string"> unused:25 </span>|<span class="string"> hashcode:31 </span>|<span class="string"> unused:1 </span>|<span class="string"> age:4 </span>|<span class="string"> biased_lock:0 </span>|<span class="string">  01   </span>|<span class="string">       Normal       </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string"> thread:54 </span>|<span class="string">  epoch:2    </span>|<span class="string"> unused:1 </span>|<span class="string"> age:4 </span>|<span class="string"> biased_lock:1 </span>|<span class="string">  01   </span>|<span class="string">       Biased       </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string">               ptr_to_lock_record:62                        </span>|<span class="string">  00   </span>|<span class="string"> Lightweight Locked </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string">             ptr_to_heavyweight_monitor:62                  </span>|<span class="string">  10   </span>|<span class="string"> Heavyweight Locked </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|</span><br><span class="line">|<span class="string">                                                            </span>|<span class="string">  11   </span>|<span class="string">    Marked for GC   </span>|</span><br><span class="line">|<span class="string">--------------------------------------------------------------------</span>|<span class="string">--------------------</span>|<span class="string"> </span></span><br></pre></td></tr></table></figure></li><li><p>一个对象创建时：</p><ul><li>如果开启了偏向锁（默认是开启的），那么对象创建后，MarkWord的最后三位为101，此时它的thread、epoch、age都为0。</li><li>偏向锁默认是延迟的，不会再程序启动时立即生效，如果想避免延迟，可以添加VM参数：<code>XX:BiasedLockingStartupDelay=0</code>来禁用延迟。</li><li>如果没有开启偏向锁，那么对象创建后，MarkWord的最后三位为001，此时它的hashCode、age均为0，第一次用到hashCode时才会赋值。</li></ul>  <div class="note warning no-icon flat"><ul><li>注意：偏向锁解锁后，线程ID仍存储于对象头中</li></ul></div></li></ul><h3 id="wait-notify">wait notify</h3><h4 id="为什么需要wait">为什么需要wait</h4><ul><li>由于条件不满足，小南不能继续执行计算</li><li>但是小南如果一直占用着锁，等待计算资源的到来，其他人就会一直被阻塞，小南现在属于是占着茅坑不拉屎，效率太低<br><img src="https://s1.ax1x.com/2023/07/27/pCvDk0H.png" alt=""></li><li>于是老王单开了一间休息室（调用wait方法），让小南到休息室（WaitSet）等着去了，并且此时的锁被释放开，其他人可以由老王随机安排进屋</li><li>知道小M将烟送来，大喊一声：你的烟到了（调用notify）方法<br><img src="https://s1.ax1x.com/2023/07/27/pCvDZtI.png" alt=""></li><li>于是小南就离开了休息室，重新进入竞争锁的队列<br><img src="https://s1.ax1x.com/2023/07/27/pCvDKc8.png" alt=""></li></ul><h4 id="原理之wait-notify">原理之wait/notify</h4><ul><li>Owner线程发现条件不满足，调用wait方法，即可进入WaitSet变为WAITING状态</li><li>BLOCKED和WAITING线程都处于阻塞状态，不占用CPU时间片</li><li>BLOCKED线程会在Owner线程释放锁时唤醒</li><li>WAITING线程会在Owner线程调用notify或notifyAll时唤醒，但唤醒后并不意味着立刻获得锁，仍需进入EntryList重新竞争</li></ul><h4 id="API介绍">API介绍</h4><ul><li><p><code>obj.wait()</code>：让进入object监视器的线程到waitSet等待</p></li><li><p><code>obj.notify()</code>：让object上正在waitSet等待的线程中挑一个唤醒</p></li><li><p><code>obj.notifyAll()</code>：让object上正在waitSet等待的线程全部唤醒</p></li><li><p>它们都是线程之间进行协作的手段，都属于Object对象的方法，必须获得此对象的锁，才能调用这几个方法。</p></li><li><p>示例代码，创建两个线程t1和t2，分别执行wait，让二者进入到waitSet等待，在主线程中调用notify来唤醒一个线程</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.NotifyTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;执行...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obj.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;其他代码&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;执行...&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obj.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;其他代码&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;唤醒obj上其他线程&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">            obj.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从执行结果中，我们可以看出，只有一个线程被唤醒了</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">27</span>:<span class="number">53.375</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[t2]</span> - 执行...</span><br><span class="line"><span class="number">14</span>:<span class="number">27</span>:<span class="number">53.375</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[t1]</span> - 执行...</span><br><span class="line"><span class="number">14</span>:<span class="number">27</span>:<span class="number">55.375</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[main]</span> - 唤醒obj上其他线程</span><br><span class="line"><span class="number">14</span>:<span class="number">27</span>:<span class="number">55.375</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[t1]</span> - 其他代码</span><br></pre></td></tr></table></figure><ul><li>如何此时将主线程中的notify()修改为notifyAll()，执行结果如下</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">30</span>:<span class="number">02.045</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[t1]</span> - 执行...</span><br><span class="line"><span class="number">14</span>:<span class="number">30</span>:<span class="number">02.045</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[t2]</span> - 执行...</span><br><span class="line"><span class="number">14</span>:<span class="number">30</span>:<span class="number">04.042</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[main]</span> - 唤醒obj上其他线程</span><br><span class="line"><span class="number">14</span>:<span class="number">30</span>:<span class="number">04.042</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[t2]</span> - 其他代码</span><br><span class="line"><span class="number">14</span>:<span class="number">30</span>:<span class="number">04.042</span> c<span class="selector-class">.NotifyTest</span> <span class="selector-attr">[t1]</span> - 其他代码</span><br></pre></td></tr></table></figure><ul><li>小结<ul><li>wait()方法会释放对象的锁，进入WaitSet等待区，无限制等待，直到notify位置，并且此时其他线程有机会获取对象的锁</li><li>wait(long n)：有时限的等待，到n毫秒后结束等待，或是被notify</li></ul></li></ul><h3 id="wait-notify-的正确姿势">wait notify 的正确姿势</h3><ul><li>首先我们来看看sleep(long n)和wait(long n)的区别<ol><li>sleep是Thread的方法，而wait是Object的方法</li><li>sleep不强制和synchronized配合使用，而wait需要和synchronized一起用</li><li>sleep在睡眠的同时，不会释放对象锁，而wait在等待的时候，会释放对象锁</li></ol></li></ul><h4 id="Step-1">Step 1</h4><ul><li>思考下面的解决方案好不好，为什么？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestNotifyAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">room</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">hasCigarette</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">hasTakeout</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;没烟，先歇会儿&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            hasCigarette = <span class="literal">true</span>;</span><br><span class="line">            log.debug(<span class="string">&quot;烟到了奥&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;送烟的小M&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">08.438</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[小南]</span> - 有烟没？<span class="selector-attr">[false]</span></span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">08.444</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[小南]</span> - 没烟，先歇会儿</span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">09.437</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[送烟的小M]</span> - 烟到了奥</span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">10.445</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[小南]</span> - 有烟没？<span class="selector-attr">[true]</span></span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">10.445</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[小南]</span> - 可以开始干活了</span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">10.445</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[Thread-4]</span> - 可以开始干活了</span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">10.445</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[Thread-3]</span> - 可以开始干活了</span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">10.445</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[Thread-2]</span> - 可以开始干活了</span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">10.445</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[Thread-1]</span> - 可以开始干活了</span><br><span class="line"><span class="number">14</span>:<span class="number">48</span>:<span class="number">10.445</span> c<span class="selector-class">.TestNotifyAll</span> <span class="selector-attr">[Thread-0]</span> - 可以开始干活了</span><br></pre></td></tr></table></figure><ul><li>上面的代码缺点很明显，由于小南调用的是sleep，睡眠期间会阻塞线程，其他线程不能来干活，效率太低</li><li>其次，小南睡眠是固定的2s，通过观察时间戳，就算烟提前到了，他也不会起床干活</li><li>送烟的线程不能加synchronized(room)，因为小南一直锁着门，烟送不进去</li><li>解决方案，使用<code>wait - notify</code>机制</li></ul><h4 id="Step-2">Step 2</h4><ul><li>思考下面的实现，感觉可行吗？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestWaitNotify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">room</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">hasCigarette</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">hasTakeout</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;没烟，先歇会儿&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                hasCigarette = <span class="literal">true</span>;</span><br><span class="line">                log.debug(<span class="string">&quot;烟到了奥&quot;</span>);</span><br><span class="line">                room.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;送烟的小M&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">44.703</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[小南]</span> - 有烟没？<span class="selector-attr">[false]</span></span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">44.708</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[小南]</span> - 没烟，先歇会儿</span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">44.708</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[Thread-4]</span> - 可以开始干活了</span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">44.708</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[Thread-3]</span> - 可以开始干活了</span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">44.708</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[Thread-2]</span> - 可以开始干活了</span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">44.708</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[Thread-1]</span> - 可以开始干活了</span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">44.708</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[Thread-0]</span> - 可以开始干活了</span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">45.701</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[送烟的小M]</span> - 烟到了奥</span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">45.701</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[小南]</span> - 有烟没？<span class="selector-attr">[true]</span></span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">45.701</span> c<span class="selector-class">.TestWaitNotify</span> <span class="selector-attr">[小南]</span> - 可以开始干活了</span><br></pre></td></tr></table></figure><ul><li>解决了阻塞其他线程的问题，但是如果其他线程也存在等待条件呢？</li></ul><h4 id="Step-3">Step 3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestWaitNotifyAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">room</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">hasCigarette</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">hasTakeout</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;没烟，先歇会儿&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;没干成活&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;外卖到了没？[&#123;&#125;]&quot;</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">if</span> (!hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;没外卖，先歇会儿&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;外卖到了没？[&#123;&#125;]&quot;</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">if</span> (hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;没干成活&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小女&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                hasTakeout = <span class="literal">true</span>;</span><br><span class="line">                log.debug(<span class="string">&quot;外卖到了奥&quot;</span>);</span><br><span class="line">                room.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;送外卖的&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">51.925</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小南]</span> - 有烟没？<span class="selector-attr">[false]</span></span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">51.931</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小南]</span> - 没烟，先歇会儿</span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">51.931</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小女]</span> - 外卖到了没？<span class="selector-attr">[false]</span></span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">51.931</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小女]</span> - 没外卖，先歇会儿</span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">52.926</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[送外卖的小M]</span> - 外卖到了奥</span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">52.926</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小南]</span> - 有烟没？<span class="selector-attr">[false]</span></span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">52.926</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小南]</span> - 没干成活</span><br></pre></td></tr></table></figure><ul><li>notify只能唤醒一个WaitSet中的线程，如果此时有其他线程也在等，那么可能唤醒不了正确的线程，这种情况被称之为<code>虚假唤醒</code>。<ul><li>上面的输出结果中，外卖送到了，但是唤醒的确实小南，唤醒了错误的线程</li></ul></li></ul><h4 id="Step-4">Step 4</h4><ul><li>要解决刚刚的问题，可以使用notifyAll来唤醒所有线程，但是用if + wait仅有一次判断几乎，一旦条件不成立，就没有重新判断的机会了。所以我们需要采用<code>while + wait</code>的方式来判断，当条件不成立时，继续wait</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestWaitNotifyAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">room</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">hasCigarette</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">hasTakeout</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">while</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;没烟，先歇会儿&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;外卖到了没？[&#123;&#125;]&quot;</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">while</span> (!hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;没外卖，先歇会儿&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小女&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                hasTakeout = <span class="literal">true</span>;</span><br><span class="line">                log.debug(<span class="string">&quot;外卖到了奥&quot;</span>);</span><br><span class="line">                room.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;送外卖的&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">21</span>:<span class="number">59.246</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小南]</span> - 有烟没？<span class="selector-attr">[false]</span></span><br><span class="line"><span class="number">15</span>:<span class="number">21</span>:<span class="number">59.252</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小南]</span> - 没烟，先歇会儿</span><br><span class="line"><span class="number">15</span>:<span class="number">21</span>:<span class="number">59.252</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小女]</span> - 外卖到了没？<span class="selector-attr">[false]</span></span><br><span class="line"><span class="number">15</span>:<span class="number">21</span>:<span class="number">59.252</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小女]</span> - 没外卖，先歇会儿</span><br><span class="line"><span class="number">15</span>:<span class="number">22</span>:<span class="number">00.244</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[送外卖的]</span> - 外卖到了奥</span><br><span class="line"><span class="number">15</span>:<span class="number">22</span>:<span class="number">00.244</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小女]</span> - 外卖到了没？<span class="selector-attr">[true]</span></span><br><span class="line"><span class="number">15</span>:<span class="number">22</span>:<span class="number">00.244</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小女]</span> - 可以开始干活了</span><br><span class="line"><span class="number">15</span>:<span class="number">22</span>:<span class="number">00.244</span> c<span class="selector-class">.TestWaitNotifyAll</span> <span class="selector-attr">[小南]</span> - 没烟，先歇会儿</span><br></pre></td></tr></table></figure><ul><li>唤醒所有线程，但是小南依然不符合条件，继续等待。将此种方式封装为一个模板，如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    <span class="keyword">while</span>(条件不成立) &#123;</span><br><span class="line">        lock.wait()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 干活</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个线程</span></span><br><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    lock.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保护性暂停模式">保护性暂停模式</h3><h4 id="定义">定义</h4><ul><li>即Guarded Suspension，用在一个线程等待另一个线程的执行结果</li><li>要点<ol><li>有一个结果需要从一个线程传递到另一个线程，让他们关联同一个GuardedObject</li><li>如果有结果不断从一个线程到另一个线程，那么可以使用消息队列</li><li>JDK中，join的实现，Future的实现，采用的就是此模式</li><li>因为要等待另一方的结果，因此归类到同步模式</li></ol></li></ul><h4 id="实现">实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GuardedObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">while</span> (response == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">(Object response)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="built_in">this</span>.response = response;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用-2">应用</h4><ul><li>一个线程等待另一个线程的执行结果，首先编写一个类来执行一些操作，下载baidu.com的网页内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Downloader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">download</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (HttpURLConnection) <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://www.baidu.com/&quot;</span>).openConnection();</span><br><span class="line">        List&lt;String&gt; lines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span></span><br><span class="line">                     <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(conn.getInputStream(), StandardCharsets.UTF_8))) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                lines.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lines;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主线程等待子线程执行下载任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestGuarded&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GuardedObject</span> <span class="variable">guardedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GuardedObject</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 子线程执行下载</span></span><br><span class="line">                List&lt;String&gt; response = Downloader.download();</span><br><span class="line">                log.debug(<span class="string">&quot;下载完毕&quot;</span>);</span><br><span class="line">                guardedObject.complete(response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;waiting...&quot;</span>);</span><br><span class="line">        <span class="comment">// 主线程阻塞等待t1线程下载完毕之后</span></span><br><span class="line">        List&lt;String&gt; response = (List&lt;String&gt;) guardedObject.get();</span><br><span class="line">        log.debug(<span class="string">&quot;获取线程执行结果：【&#123;&#125;】&quot;</span>, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16:43:29.121 c.TestGuarded [main] - waiting...</span><br><span class="line">16:43:30.461 c.TestGuarded [t1] - 下载完毕</span><br><span class="line">16:43:30.461 c.TestGuarded [main] - 获取线程执行结果：【[<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>, <span class="comment">&lt;!--STATUS OK--&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">content-type</span> <span class="attr">content</span>=<span class="string">text/html;charset</span>=<span class="string">utf-8</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">X-UA-Compatible</span> <span class="attr">content</span>=<span class="string">IE</span>=<span class="string">Edge</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">always</span> <span class="attr">name</span>=<span class="string">referrer</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">stylesheet</span> <span class="attr">type</span>=<span class="string">text/css</span> <span class="attr">href</span>=<span class="string">https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>百度一下，你就知道<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">#0000cc</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">wrapper</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">head</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">head_wrapper</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">s_form</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">s_form_wrapper</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">lg</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">hidefocus</span>=<span class="string">true</span> <span class="attr">src</span>=<span class="string">//www.baidu.com/img/bd_logo1.png</span> <span class="attr">width</span>=<span class="string">270</span> <span class="attr">height</span>=<span class="string">129</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">form</span> <span class="attr">name</span>=<span class="string">f</span> <span class="attr">action</span>=<span class="string">//www.baidu.com/s</span> <span class="attr">class</span>=<span class="string">fm</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">bdorz_come</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">ie</span> <span class="attr">value</span>=<span class="string">utf-8</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">f</span> <span class="attr">value</span>=<span class="string">8</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">rsv_bp</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">rsv_idx</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">tn</span> <span class="attr">value</span>=<span class="string">baidu</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_ipt_wr&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">kw</span> <span class="attr">name</span>=<span class="string">wd</span> <span class="attr">class</span>=<span class="string">s_ipt</span> <span class="attr">value</span> <span class="attr">maxlength</span>=<span class="string">255</span> <span class="attr">autocomplete</span>=<span class="string">off</span> <span class="attr">autofocus</span>=<span class="string">autofocus</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn_wr&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">id</span>=<span class="string">su</span> <span class="attr">value</span>=<span class="string">百度一下</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn&quot;</span> <span class="attr">autofocus</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">u1</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://news.baidu.com</span> <span class="attr">name</span>=<span class="string">tj_trnews</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">https://www.hao123.com</span> <span class="attr">name</span>=<span class="string">tj_trhao123</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://map.baidu.com</span> <span class="attr">name</span>=<span class="string">tj_trmap</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://v.baidu.com</span> <span class="attr">name</span>=<span class="string">tj_trvideo</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://tieba.baidu.com</span> <span class="attr">name</span>=<span class="string">tj_trtieba</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl</span>=<span class="string">mn&amp;amp;u</span>=<span class="string">http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1</span> <span class="attr">name</span>=<span class="string">tj_login</span> <span class="attr">class</span>=<span class="string">lb</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u=&#x27;</span>+ <span class="built_in">encodeURIComponent</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>+ (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span> === <span class="string">&quot;&quot;</span> ? <span class="string">&quot;?&quot;</span> : <span class="string">&quot;&amp;&quot;</span>)+ <span class="string">&quot;bdorz_come=1&quot;</span>)+ <span class="string">&#x27;&quot; name=&quot;tj_login&quot; class=&quot;lb&quot;&gt;登录&lt;/a&gt;&#x27;</span>);,                 </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">//www.baidu.com/more/</span> <span class="attr">name</span>=<span class="string">tj_briicon</span> <span class="attr">class</span>=<span class="string">bri</span> <span class="attr">style</span>=<span class="string">&quot;display: block;&quot;</span>&gt;</span>更多产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">ftCon</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">ftConw</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">lh</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://home.baidu.com</span>&gt;</span>关于百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://ir.baidu.com</span>&gt;</span>About Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">cp</span>&gt;</span><span class="symbol">&amp;copy;</span>2017<span class="symbol">&amp;nbsp;</span>Baidu<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://www.baidu.com/duty/</span>&gt;</span>使用百度前必读<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://jianyi.baidu.com/</span> <span class="attr">class</span>=<span class="string">cp-feedback</span>&gt;</span>意见反馈<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span>京ICP证030173号<span class="symbol">&amp;nbsp;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">//www.baidu.com/img/gs.gif</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span>]】</span><br></pre></td></tr></table></figure><h4 id="带超时版">带超时版</h4><ul><li>之前的版本没有超时时间，只能无限等待，那我们现在就要来解决这个问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GuardedObjectWithTimeout</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout millis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 1. 记录初始时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 2. 已经过的时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">passed</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (response == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 3. 设置剩余等待时间</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">waitTime</span> <span class="operator">=</span> timeout - passed;</span><br><span class="line">                <span class="comment">// 4. 如果超时，退出等待</span></span><br><span class="line">                <span class="keyword">if</span> (waitTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait(waitTime);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 5. 计算已经过的时间</span></span><br><span class="line">                passed = System.currentTimeMillis() - begin;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">(Object response)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="built_in">this</span>.response = response;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="测试超时"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#测试超时-1">测试没有超时的情况</button></li><li class="tab"><button type="button" data-href="#测试超时-2">测试超时的情况</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="测试超时-1"><ul><li>测试代码如下，给予一个相对充裕的超时时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestGuarded&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GuardedObjectWithTimeout</span> <span class="variable">guardedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GuardedObjectWithTimeout</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;String&gt; response = Downloader.download();</span><br><span class="line">                log.debug(<span class="string">&quot;下载完毕&quot;</span>);</span><br><span class="line">                guardedObject.complete(response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;waiting...&quot;</span>);</span><br><span class="line">        <span class="comment">// 主线程阻塞等待t1线程下载完毕之后</span></span><br><span class="line">        List&lt;String&gt; response = (List&lt;String&gt;) guardedObject.get(<span class="number">2000</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;获取线程执行结果：【&#123;&#125;】&quot;</span>, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>顺利下载完成，并且得到结果</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">17:40:23.783 c.TestGuarded [main] - waiting...</span><br><span class="line">17:40:25.645 c.TestGuarded [t1] - 下载完毕</span><br><span class="line">17:40:25.645 c.TestGuarded [main] - 获取线程执行结果：【[<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>, <span class="comment">&lt;!--STATUS OK--&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">content-type</span> <span class="attr">content</span>=<span class="string">text/html;charset</span>=<span class="string">utf-8</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">X-UA-Compatible</span> <span class="attr">content</span>=<span class="string">IE</span>=<span class="string">Edge</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">always</span> <span class="attr">name</span>=<span class="string">referrer</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">stylesheet</span> <span class="attr">type</span>=<span class="string">text/css</span> <span class="attr">href</span>=<span class="string">https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>百度一下，你就知道<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">#0000cc</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">wrapper</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">head</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">head_wrapper</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">s_form</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">s_form_wrapper</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">lg</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">hidefocus</span>=<span class="string">true</span> <span class="attr">src</span>=<span class="string">//www.baidu.com/img/bd_logo1.png</span> <span class="attr">width</span>=<span class="string">270</span> <span class="attr">height</span>=<span class="string">129</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">form</span> <span class="attr">name</span>=<span class="string">f</span> <span class="attr">action</span>=<span class="string">//www.baidu.com/s</span> <span class="attr">class</span>=<span class="string">fm</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">bdorz_come</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">ie</span> <span class="attr">value</span>=<span class="string">utf-8</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">f</span> <span class="attr">value</span>=<span class="string">8</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">rsv_bp</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">rsv_idx</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">tn</span> <span class="attr">value</span>=<span class="string">baidu</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_ipt_wr&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">kw</span> <span class="attr">name</span>=<span class="string">wd</span> <span class="attr">class</span>=<span class="string">s_ipt</span> <span class="attr">value</span> <span class="attr">maxlength</span>=<span class="string">255</span> <span class="attr">autocomplete</span>=<span class="string">off</span> <span class="attr">autofocus</span>=<span class="string">autofocus</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn_wr&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">id</span>=<span class="string">su</span> <span class="attr">value</span>=<span class="string">百度一下</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn&quot;</span> <span class="attr">autofocus</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">u1</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://news.baidu.com</span> <span class="attr">name</span>=<span class="string">tj_trnews</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">https://www.hao123.com</span> <span class="attr">name</span>=<span class="string">tj_trhao123</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://map.baidu.com</span> <span class="attr">name</span>=<span class="string">tj_trmap</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://v.baidu.com</span> <span class="attr">name</span>=<span class="string">tj_trvideo</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://tieba.baidu.com</span> <span class="attr">name</span>=<span class="string">tj_trtieba</span> <span class="attr">class</span>=<span class="string">mnav</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl</span>=<span class="string">mn&amp;amp;u</span>=<span class="string">http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1</span> <span class="attr">name</span>=<span class="string">tj_login</span> <span class="attr">class</span>=<span class="string">lb</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u=&#x27;</span>+ <span class="built_in">encodeURIComponent</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>+ (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span> === <span class="string">&quot;&quot;</span> ? <span class="string">&quot;?&quot;</span> : <span class="string">&quot;&amp;&quot;</span>)+ <span class="string">&quot;bdorz_come=1&quot;</span>)+ <span class="string">&#x27;&quot; name=&quot;tj_login&quot; class=&quot;lb&quot;&gt;登录&lt;/a&gt;&#x27;</span>);,                 </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">//www.baidu.com/more/</span> <span class="attr">name</span>=<span class="string">tj_briicon</span> <span class="attr">class</span>=<span class="string">bri</span> <span class="attr">style</span>=<span class="string">&quot;display: block;&quot;</span>&gt;</span>更多产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">ftCon</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">ftConw</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">lh</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://home.baidu.com</span>&gt;</span>关于百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://ir.baidu.com</span>&gt;</span>About Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">cp</span>&gt;</span><span class="symbol">&amp;copy;</span>2017<span class="symbol">&amp;nbsp;</span>Baidu<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://www.baidu.com/duty/</span>&gt;</span>使用百度前必读<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://jianyi.baidu.com/</span> <span class="attr">class</span>=<span class="string">cp-feedback</span>&gt;</span>意见反馈<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span>京ICP证030173号<span class="symbol">&amp;nbsp;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">//www.baidu.com/img/gs.gif</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span>]】</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="测试超时-2"><ul><li>将超时时间设置的短一些</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestGuarded&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GuardedObjectWithTimeout</span> <span class="variable">guardedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GuardedObjectWithTimeout</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;String&gt; response = Downloader.download();</span><br><span class="line">                log.debug(<span class="string">&quot;下载完毕&quot;</span>);</span><br><span class="line">                guardedObject.complete(response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;waiting...&quot;</span>);</span><br><span class="line">        <span class="comment">// 主线程阻塞等待t1线程下载完毕之后</span></span><br><span class="line">        List&lt;String&gt; response = (List&lt;String&gt;) guardedObject.get(<span class="number">500</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;获取线程执行结果：【&#123;&#125;】&quot;</span>, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果如下，等待超时，没有获取到结果</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">42</span>:<span class="number">52.076</span> c<span class="selector-class">.TestGuarded</span> <span class="selector-attr">[main]</span> - waiting...</span><br><span class="line"><span class="number">17</span>:<span class="number">42</span>:<span class="number">52.582</span> c<span class="selector-class">.TestGuarded</span> <span class="selector-attr">[main]</span> - 获取线程执行结果：【null】</span><br><span class="line"><span class="number">17</span>:<span class="number">42</span>:<span class="number">53.403</span> c<span class="selector-class">.TestGuarded</span> <span class="selector-attr">[t1]</span> - 下载完毕</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <h3 id="原理之join">原理之join</h3><ul><li>join方法的实现原理就是基于我们刚刚手写的保护性暂停模式，其底层源码也与我们刚刚写的代码类似</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">isAlive</span><span class="params">()</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millis)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多任务版GuardedObject">多任务版GuardedObject</h3><!-- TODO --><h3 id="生产者消费者模式">生产者消费者模式</h3><!-- TODO --><h3 id="park-unpark">park &amp; unpark</h3><ul><li>它们是LockSupport类中的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暂停当前线程</span></span><br><span class="line">LockSupport.park();</span><br><span class="line"><span class="comment">// 回复某个线程的运行</span></span><br><span class="line">LockSupport.unpark(暂停线程对象);</span><br></pre></td></tr></table></figure><div class="tabs" id="park和unpark"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#park和unpark-1">先park再unpark</button></li><li class="tab"><button type="button" data-href="#park和unpark-2">先unpark再park</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="park和unpark-1"><ul><li>先park再unpark</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestPark&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;start ..&quot;</span>);</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;park ..&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;resume ..&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;unpark ..&quot;</span>);</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>:<span class="number">11</span>:<span class="number">23.497</span> c.<span class="symbol">TestPark</span> [t1] - start ..</span><br><span class="line"><span class="number">20</span>:<span class="number">11</span>:<span class="number">23.500</span> c.<span class="symbol">TestPark</span> [t1] - park ..</span><br><span class="line"><span class="number">20</span>:<span class="number">11</span>:<span class="number">24.496</span> c.<span class="symbol">TestPark</span> [main] - unpark ..</span><br><span class="line"><span class="number">20</span>:<span class="number">11</span>:<span class="number">24.496</span> c.<span class="symbol">TestPark</span> [t1] - resume ..</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="park和unpark-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestPark&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;start ..&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;park ..&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;resume ..&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;unpark ..&quot;</span>);</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">36</span>:<span class="number">34.445</span> c.<span class="symbol">TestPark</span> [t1] - start ..</span><br><span class="line"><span class="number">21</span>:<span class="number">36</span>:<span class="number">35.445</span> c.<span class="symbol">TestPark</span> [main] - unpark ..</span><br><span class="line"><span class="number">21</span>:<span class="number">36</span>:<span class="number">36.447</span> c.<span class="symbol">TestPark</span> [t1] - park ..</span><br><span class="line"><span class="number">21</span>:<span class="number">36</span>:<span class="number">36.447</span> c.<span class="symbol">TestPark</span> [t1] - resume ..</span><br></pre></td></tr></table></figure><ul><li>从结果中看到，我们先执行unpark再执行park，线程依然不会被阻塞，这是为什么呢？<ul><li>继续往下看<code>park &amp; unpark</code>的原理</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>与Object的<code>wait &amp; notify</code>对比<ul><li>wait、notify、notifyAll必须配合Object Monitor一起使用，而park、unpark不必</li><li><code>park &amp; unpark</code>是以线程为单位来阻塞和唤醒线程的，而notify只能随机唤醒一个等待中的线程，notifyAll是唤醒所有等待线程，不精确</li><li><code>park &amp; unpark</code>可以先unpark，而<code>wait &amp; notify</code>只能不能先notify</li></ul></li></ul><h3 id="原理之park-unpark">原理之park &amp; unpark</h3><ul><li>每个线程都有自己的一个Parker对象，由三部分组成<code>_counter</code>、<code>_cond</code>和<code>_mutex</code>，打个比喻<ul><li>线程就像一个旅人，Parker就像他随身携带的背包，<code>_cond</code>就好比背包中的帐篷，<code>_counter</code>就好比背包中的备用干粮(0为耗尽，1为充足)</li><li>调用park就是要看需不需要停下来休息<ul><li>如果备用干粮耗尽，那么就钻进帐篷休息</li><li>如果备用干粮充足，那么就不需要停留，继续前进</li></ul></li><li>调用unpark，就好比令干粮充足<ul><li>如果此时还在帐篷，那就唤醒他继续前进</li><li>如果此时线程还在运行，那么他下次调用park的时候，仅消耗掉备用干粮，不需要停留继续前进<ul><li>但是由于背包有限，多次调用unpark仅会补充一份备用干粮</li></ul></li></ul></li></ul></li></ul><p><img src="https://s1.ax1x.com/2023/07/27/pCxnhlV.png" alt=""></p><ol><li><p>当线程调用Unsafe.park()方法</p></li><li><p>检查<code>_counter</code>，此时<code>_counter = 0</code>，获得<code>_mutex</code>互斥锁</p></li><li><p>线程进入<code>_cond</code>条件变量阻塞</p></li><li><p>设置<code>_counter = 0</code></p></li><li><p>当线程调用Unsafe.unpark()方法，设置<code>_counter = 1</code></p></li><li><p>当前线程调用Unsafe.park()方法</p></li><li><p>检查<code>_counter</code>，此时<code>_counter = 1</code>，线程无需阻塞，继续执行</p></li><li><p>设置<code>_counter = 0</code></p></li></ol><h3 id="重新理解线程状态转换">重新理解线程状态转换</h3><ul><li>假设有<code>Thread t</code><ol><li><code>NEW -&gt; RUNNABLE</code><ul><li>当调用t.start()方法时，由<code>NEW -&gt; RUNNABLE</code></li></ul></li><li><code>RUNNABLE &lt;-&gt; WAITING</code><ul><li>t线程使用<code>synchronized(obj)</code>获取对象锁之后</li><li>调用<code>obj.wait()</code>方法时，t线程由<code>RUNNABLE -&gt; WAITING</code></li><li>调用<code>obj.notify()</code>、<code>obj.notifyAll()</code>、<code>t.interrupt()</code>时<ul><li>竞争锁成功，t线程由<code>WAITING -&gt; RUNNABLE</code></li><li>竞争锁失败，t线程由<code>WAITING -&gt; BLOCKED</code></li></ul></li></ul></li><li><code>RUNNABLE &lt;-&gt; WAITING</code><ul><li>当线程调用t.join()方法时，当前线程会从<code>RUNNABLE -&gt; WAITING</code><ul><li>注意当前线程是在t线程对象的监视器上等待</li></ul></li><li>t线程运行结束，或调用了当前线程的<code>interrupt()</code>时，当前线程从<code>WAITING -&gt; RUNNABLE</code></li></ul></li><li><code>RUNNABLE &lt;-&gt; WAITING</code><ul><li>当前线程调用<code>LockSupport.park()</code>方法，会让当前线程从<code>RUNNABLE -&gt; WAITING</code></li><li>调用LockSupport.unpark(目标线程)，会让目标现成从<code>WAITING -&gt; RUNNABLE</code></li></ul></li><li><code>RUNNABLE &lt;-&gt; TIMED_WAITING</code><ul><li>t线程用synchronized(obj)获取了对象锁后<ul><li>调用<code>obj.wait(long n)</code>方法时，t线程从<code>RUNNABLE -&gt; TIMED_WAITING</code></li><li>t线程等待超过了n毫秒时，或者调用obj.notify()、obj.notifyAll()、t.interrupt()时<ul><li>竞争成功，t线程从<code>TIMED_WAITING -&gt; RUNNABLE</code></li><li>竞争失败，t线程从<code>TIMED_WAITING -&gt; BLOCKED</code></li></ul></li></ul></li></ul></li><li><code>RUNNABLE &lt;-&gt; TIMED_WAITING</code><ul><li>当前线程调用<code>t.join(long n)</code>方法时，当前线程从<code>RUNNABLE -&gt; TIMED_WAITING</code></li><li>当前线程等待超过了n毫秒，或t线程运行结束，或调用了当前线程的<code>interrupt()</code>方法时，当前线程从<code>TIMED_WAITING -&gt; RUNNABLE</code></li></ul></li><li><code>RUNNABLE &lt;-&gt; TIMED_WAITING</code><ul><li>当前线程调用了<code>Thread.sleep(long n)</code>，当前线程从<code>RUNNABLE -&gt; TIMED_WAITING</code></li><li>当前线程等待超过了n毫秒，当前线程从<code>TIMED_WAITING -&gt; RUNNABLE</code></li></ul></li><li><code>RUNNABLE &lt;-&gt; TIMED_WAITING</code><ul><li>当前线程调用<code>LockSupport.parkNanos(long nanos)</code>或<code>LockSupport.parkUntil(long millis)</code>时，当前线程从<code>RUNNABLE -&gt; TIMED_WAITING</code></li><li>调用LockSupport.unpark(目标现成)或调用了线程的interrupt()或等待超时，当前线程从<code>TIMED_WAITING -&gt; RUNNABLE</code></li></ul></li><li><code>RUNNABLE &lt;-&gt; BLOCKED</code><ul><li>t线程用synchronized(obj)获取锁时，如果竞争失败，会从<code>RUNNABLE -&gt; BLOCKED</code></li><li>持有obj锁的线程的同步代码块执行完毕，会唤醒该对象上所有<code>BLOCKED</code>的线程重新竞争，如果其中t线程竞争成功，从<code>BLOCKED -&gt; RUNNABLE</code>，其它失败的线程仍然<code>BLOCKED</code></li></ul></li><li>RUNNABLE &lt;-&gt; TERMINATED<ul><li>当前线程所有代码运行完毕，进入TERMINATED</li></ul></li></ol></li></ul><h3 id="多把锁">多把锁</h3><ul><li>一间大屋子具有两个功能：睡觉和学习，这二者互不相干</li><li>现在小南要学习、小女要睡觉，但是如果共用同一间屋子（仅有一把锁）的话，那么并发度很低，小南和小女是串行执行的。</li><li>解决办法是准备多个房间（即准备多把锁）</li></ul><div class="tabs" id="多把锁"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多把锁-1">一把锁</button></li><li class="tab"><button type="button" data-href="#多把锁-2">多把锁</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多把锁-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestMultiLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;我是小南，我要睡觉&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;我是小女，我要学习&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;小女&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果，小南和小女的执行间隔接近1s，因为小南执行完毕后休眠了1s</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">50.180</span> c<span class="selector-class">.TestMultiLock</span> <span class="selector-attr">[小南]</span> - 我是小南，我要睡觉</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">51.184</span> c<span class="selector-class">.TestMultiLock</span> <span class="selector-attr">[小女]</span> - 我是小女，我要学习</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多把锁-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestMultiLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">sleepLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">studyLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (sleepLock) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;我是小南，我要睡觉&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (studyLock) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;我是小女，我要学习&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;小女&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>采用多把锁的方式，小南和小女几乎是同时执行任务，增强了并发度</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">50</span>:<span class="number">12.606</span> c<span class="selector-class">.TestMultiLock</span> <span class="selector-attr">[小南]</span> - 我是小南，我要睡觉</span><br><span class="line"><span class="number">16</span>:<span class="number">50</span>:<span class="number">12.606</span> c<span class="selector-class">.TestMultiLock</span> <span class="selector-attr">[小女]</span> - 我是小女，我要学习</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>将锁的粒度细分<ul><li>好处：可以提高并发</li><li>坏处：如果一个线程需要同时获得多把锁，容易发生死锁</li></ul></li></ul><h3 id="活跃性">活跃性</h3><h4 id="死锁">死锁</h4><ul><li>刚刚说，使用一个线程使用多把锁的时候，容易发生死锁，下面我们来具体分析一下这个场景<ul><li>t1线程获得A对象锁，接下来想获取B对象锁。</li><li>t2线程获得B对象锁，接下来想获得A对象锁。</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestDeadlock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;lock A&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;lock B&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;lock B&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;lock A&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">        log.debug(<span class="string">&quot;A:&#123;&#125;&quot;</span>, A);</span><br><span class="line">        log.debug(<span class="string">&quot;B:&#123;&#125;&quot;</span>, B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果如下，产生了死锁</li></ul>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>:<span class="number">16</span>:<span class="number">42.469</span> c<span class="selector-class">.TestDeadlock</span> <span class="selector-attr">[main]</span> - A:java<span class="selector-class">.lang</span>.Object@<span class="number">2</span>aafb23c</span><br><span class="line"><span class="number">20</span>:<span class="number">16</span>:<span class="number">42.469</span> c<span class="selector-class">.TestDeadlock</span> <span class="selector-attr">[t2]</span> - lock B</span><br><span class="line"><span class="number">20</span>:<span class="number">16</span>:<span class="number">42.469</span> c<span class="selector-class">.TestDeadlock</span> <span class="selector-attr">[t1]</span> - lock A</span><br><span class="line"><span class="number">20</span>:<span class="number">16</span>:<span class="number">42.473</span> c<span class="selector-class">.TestDeadlock</span> <span class="selector-attr">[main]</span> - B:java<span class="selector-class">.lang</span>.Object@<span class="number">2</span>eee9593</span><br></pre></td></tr></table></figure></li></ul><h4 id="定位死锁">定位死锁</h4><ul><li>检测死锁可以使用jconsole工具，或者使用jps定位进程id，然后使用jstack定位死锁。我这里就用jconsole来检测死锁了<br><img src="https://s1.ax1x.com/2023/07/28/pCzqjUJ.png" alt=""><br><img src="https://s1.ax1x.com/2023/07/28/pCzLpgx.png" alt=""></li><li>从上面的分析中，我们可以看出<ul><li>线程 t1 正在等待获取 java.lang.Object@2eee9593 对象的锁，但它被线程 t2 拥有，通过我们的日志输出，<code>java.lang.Object@2eee9593</code>就是B对象。</li><li>线程 t2 正在等待获取 java.lang.Object@2aafb23c 对象的锁，但它被线程 t1 拥有，通过我们的日志输出，<code>java.lang.Object@2aafb23c</code>就是A对象。</li></ul></li></ul><h4 id="哲学家就餐问题">哲学家就餐问题</h4><ul><li><p>有五位哲学家，分别是苏格拉底、柏拉图、亚里士多德、赫拉克利特、阿基米德，围坐在圆桌旁</p><ul><li>他们只做两件事，思考和吃饭，思考一会儿吃口饭，吃完饭继续思考</li><li>吃饭时要用两根筷子吃，桌上共有5根筷子，每位哲学家左右手边各有一根筷子。</li><li>如果筷子被身边人拿着，自己就得等待<br><img src="https://s1.ax1x.com/2023/07/28/pCzLsIJ.png" alt=""></li></ul></li><li><p>那么现在我们就来模拟一下这个场景</p></li></ul><div class="tabs" id="哲学家就餐"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#哲学家就餐-1">筷子类</button></li><li class="tab"><button type="button" data-href="#哲学家就餐-2">哲学家类</button></li><li class="tab"><button type="button" data-href="#哲学家就餐-3">就餐</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="哲学家就餐-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chopstick</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chopstick</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Chopstick&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="哲学家就餐-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Philosopher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Philosopher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Chopstick left;</span><br><span class="line">    Chopstick right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Philosopher</span><span class="params">(String name, Chopstick left, Chopstick right)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;我踏马吃吃吃&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 拿左手筷子</span></span><br><span class="line">            <span class="keyword">synchronized</span> (left) &#123;</span><br><span class="line">                <span class="comment">// 拿右手筷子</span></span><br><span class="line">                <span class="keyword">synchronized</span> (right) &#123;</span><br><span class="line">                    eat();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 放下右手筷子</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 放下左手筷子</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="哲学家就餐-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;苏格拉底&quot;</span>, c1, c2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;柏拉图&quot;</span>, c2, c3).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;亚里士多德&quot;</span>, c3, c4).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;赫拉克利特&quot;</span>, c4, c5).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;阿基米德&quot;</span>, c5, c1).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行不一会儿，就执行不下去了</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">03</span>:<span class="number">57.796</span> c<span class="selector-class">.Philosopher</span> <span class="selector-attr">[苏格拉底]</span> - 我踏马吃吃吃</span><br><span class="line"><span class="number">21</span>:<span class="number">03</span>:<span class="number">57.796</span> c<span class="selector-class">.Philosopher</span> <span class="selector-attr">[亚里士多德]</span> - 我踏马吃吃吃</span><br><span class="line"><span class="number">21</span>:<span class="number">03</span>:<span class="number">58.804</span> c<span class="selector-class">.Philosopher</span> <span class="selector-attr">[柏拉图]</span> - 我踏马吃吃吃</span><br><span class="line"><span class="number">21</span>:<span class="number">03</span>:<span class="number">59.804</span> c<span class="selector-class">.Philosopher</span> <span class="selector-attr">[柏拉图]</span> - 我踏马吃吃吃</span><br><span class="line"><span class="number">21</span>:<span class="number">04</span>:<span class="number">00.806</span> c<span class="selector-class">.Philosopher</span> <span class="selector-attr">[柏拉图]</span> - 我踏马吃吃吃</span><br><span class="line"><span class="number">21</span>:<span class="number">04</span>:<span class="number">01.816</span> c<span class="selector-class">.Philosopher</span> <span class="selector-attr">[苏格拉底]</span> - 我踏马吃吃吃</span><br></pre></td></tr></table></figure><ul><li>使用jconsole来检测一下是否发生了死锁<br><img src="https://s1.ax1x.com/2023/07/28/pCzX44H.png" alt=""></li><li>确实是发生了死锁</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">名称: 阿基米德</span><br><span class="line">状态: com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">1</span>eadee3上的BLOCKED, 拥有者: 苏格拉底</span><br><span class="line">总阻止数: <span class="number">1</span>, 总等待数: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span><span class="selector-class">.Philosopher</span><span class="selector-class">.run</span>(Philosopher<span class="selector-class">.java</span>:<span class="number">32</span>)</span><br><span class="line">   - 已锁定 com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">45</span>bda0d0</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">名称: 苏格拉底</span><br><span class="line">状态: com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">754</span>b4f67上的BLOCKED, 拥有者: 柏拉图</span><br><span class="line">总阻止数: <span class="number">8</span>, 总等待数: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span><span class="selector-class">.Philosopher</span><span class="selector-class">.run</span>(Philosopher<span class="selector-class">.java</span>:<span class="number">32</span>)</span><br><span class="line">   - 已锁定 com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">1</span>eadee3</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">名称: 柏拉图</span><br><span class="line">状态: com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">18</span>f3778b上的BLOCKED, 拥有者: 亚里士多德</span><br><span class="line">总阻止数: <span class="number">3</span>, 总等待数: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span><span class="selector-class">.Philosopher</span><span class="selector-class">.run</span>(Philosopher<span class="selector-class">.java</span>:<span class="number">32</span>)</span><br><span class="line">   - 已锁定 com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">754</span>b4f67</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">名称: 亚里士多德</span><br><span class="line">状态: com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">68</span>d84ce6上的BLOCKED, 拥有者: 赫拉克利特</span><br><span class="line">总阻止数: <span class="number">7</span>, 总等待数: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span><span class="selector-class">.Philosopher</span><span class="selector-class">.run</span>(Philosopher<span class="selector-class">.java</span>:<span class="number">32</span>)</span><br><span class="line">   - 已锁定 com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">18</span>f3778b</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">名称: 赫拉克利特</span><br><span class="line">状态: com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">45</span>bda0d0上的BLOCKED, 拥有者: 阿基米德</span><br><span class="line">总阻止数: <span class="number">2</span>, 总等待数: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span><span class="selector-class">.Philosopher</span><span class="selector-class">.run</span>(Philosopher<span class="selector-class">.java</span>:<span class="number">32</span>)</span><br><span class="line">   - 已锁定 com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span>.Chopstick@<span class="number">68</span>d84ce6</span><br></pre></td></tr></table></figure><ul><li>现在一人手里一根筷子，都在等待对方释放资源，线程执行不下去了</li><li>解决办法继续看后面的可重入锁</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="活锁">活锁</h4><ul><li>活锁出现在两个线程互相改变对方的结束条件，最终谁也无法结束，例如现在有一个变量为10，一个线程要将其自减至0才结束，另一个线程要将其自增至20才结束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestLiveLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">                log.debug(<span class="string">&quot;count：&#123;&#125;&quot;</span>, count);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">20</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                log.debug(<span class="string">&quot;count：&#123;&#125;&quot;</span>, count);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从结果中可以看到，两个线程一直在僵持，互相改变对方的结束条件，最后谁也无法结束</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">14</span>:<span class="number">38</span>.<span class="number">140</span> c.TestLiveLock [<span class="built_in">t2</span>] - <span class="built_in">count</span>：<span class="number">11</span></span><br><span class="line"><span class="number">21</span>:<span class="number">14</span>:<span class="number">38</span>.<span class="number">140</span> c.TestLiveLock [<span class="built_in">t1</span>] - <span class="built_in">count</span>：<span class="number">10</span></span><br><span class="line"><span class="number">21</span>:<span class="number">14</span>:<span class="number">38</span>.<span class="number">342</span> c.TestLiveLock [<span class="built_in">t1</span>] - <span class="built_in">count</span>：<span class="number">11</span></span><br><span class="line"><span class="number">21</span>:<span class="number">14</span>:<span class="number">38</span>.<span class="number">342</span> c.TestLiveLock [<span class="built_in">t2</span>] - <span class="built_in">count</span>：<span class="number">12</span></span><br><span class="line"><span class="number">21</span>:<span class="number">14</span>:<span class="number">38</span>.<span class="number">544</span> c.TestLiveLock [<span class="built_in">t1</span>] - <span class="built_in">count</span>：<span class="number">10</span></span><br><span class="line"><span class="number">21</span>:<span class="number">14</span>:<span class="number">38</span>.<span class="number">544</span> c.TestLiveLock [<span class="built_in">t2</span>] - <span class="built_in">count</span>：<span class="number">11</span></span><br><span class="line"><span class="number">21</span>:<span class="number">14</span>:<span class="number">38</span>.<span class="number">747</span> c.TestLiveLock [<span class="built_in">t2</span>] - <span class="built_in">count</span>：<span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="饥饿">饥饿</h4><ul><li>如果一个线程由于优先级过低，始终得不到CPU调度执行，也不能够结束。</li></ul><h3 id="ReentrantLock">ReentrantLock</h3><ul><li>相较于synchronized，可重入锁具备如下特点<ol><li>可中断</li><li>可以设置超时时间：ReentrantLock提供了tryLock(long timeout, TimeUnit unit)方法，允许线程在尝试获取锁时设定一个超时时间，在指定的时间内未能获取锁，则可以执行其他逻辑或放弃锁请求。</li><li>可以设置为公平锁：保证多个等待锁的线程按照申请锁的顺序获得锁，避免线程饥饿现象。</li><li>支持多个条件变量：ReentrantLock通过Condition接口支持多个条件变量。一个ReentrantLock对象可以绑定多个Condition实例，每个Condition对象可以让一组线程等待或唤醒，从而实现更灵活的线程通信。就好比synchronized只给不满足条件的线程只提供了一间休息室，唤醒时只能notify随机唤醒一个或者notifyAll唤醒全部，而ReentrantLock提供了多间休息室，并且可以按休息室来唤醒。</li></ol></li><li>基本语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line">reentrantLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    reentrantLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可重入">可重入</h4><ul><li>可重入是指一个线程如果首次获得了这把锁，那么因为它是锁的拥有者，因此有权利再次获得这把锁。<ul><li>如果是不可重入锁，第二次获取锁时，自己也会被挡住。</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestReentrantLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;execute method1&quot;</span>);</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;execute method2&quot;</span>);</span><br><span class="line">            method3();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;execute method3&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul>  <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">21:58:57.369 c.TestReentrantLock [main] -<span class="built_in"> execute </span>method1</span><br><span class="line">21:58:57.373 c.TestReentrantLock [main] -<span class="built_in"> execute </span>method2</span><br><span class="line">21:58:57.373 c.TestReentrantLock [main] -<span class="built_in"> execute </span>method3</span><br></pre></td></tr></table></figure></li></ul><h4 id="可打断">可打断</h4><ul><li>示例代码如下，先让主线程获取锁，然后启动t1线程，t1线程内也尝试获取锁，但由于此时锁的持有者是主线程，所以t1线程会阻塞等待，然后主线程执行打断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestInterrupt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReentrantLock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reentrantLock.lockInterruptibly();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                log.debug(<span class="string">&quot;等锁的过程中被打断了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                reentrantLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            t1.interrupt();</span><br><span class="line">            log.debug(<span class="string">&quot;执行打断&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">13</span>:<span class="number">13.081</span> c<span class="selector-class">.TestInterrupt</span> <span class="selector-attr">[main]</span> - 获得了锁</span><br><span class="line"><span class="number">10</span>:<span class="number">13</span>:<span class="number">13.089</span> c<span class="selector-class">.TestInterrupt</span> <span class="selector-attr">[t1]</span> - 启动</span><br><span class="line"><span class="number">10</span>:<span class="number">13</span>:<span class="number">14.089</span> c<span class="selector-class">.TestInterrupt</span> <span class="selector-attr">[main]</span> - 执行打断</span><br><span class="line"><span class="number">10</span>:<span class="number">13</span>:<span class="number">14.090</span> c<span class="selector-class">.TestInterrupt</span> <span class="selector-attr">[t1]</span> - 等锁的过程中被打断了</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.InterruptedException</span></span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.locks</span><span class="selector-class">.AbstractQueuedSynchronizer</span><span class="selector-class">.doAcquireInterruptibly</span>(AbstractQueuedSynchronizer<span class="selector-class">.java</span>:<span class="number">898</span>)</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.locks</span><span class="selector-class">.AbstractQueuedSynchronizer</span><span class="selector-class">.acquireInterruptibly</span>(AbstractQueuedSynchronizer<span class="selector-class">.java</span>:<span class="number">1222</span>)</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.locks</span><span class="selector-class">.ReentrantLock</span><span class="selector-class">.lockInterruptibly</span>(ReentrantLock<span class="selector-class">.java</span>:<span class="number">335</span>)</span><br><span class="line">at com<span class="selector-class">.cyborg2077</span><span class="selector-class">.demo03</span><span class="selector-class">.Test07</span>.lambda<span class="variable">$main</span>$<span class="number">0</span>(Test07<span class="selector-class">.java</span>:<span class="number">15</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">750</span>)</span><br></pre></td></tr></table></figure><h4 id="锁超时">锁超时</h4><div class="tabs" id="锁超时"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#锁超时-1">立刻失败</button></li><li class="tab"><button type="button" data-href="#锁超时-2">超时失败</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="锁超时-1"><ul><li>立刻失败</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestTryLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReentrantLock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!reentrantLock.tryLock()) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获取锁失败，立刻返回&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获取了锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;释放了锁&quot;</span>);</span><br><span class="line">                reentrantLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        log.debug(<span class="string">&quot;获取了锁&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;释放了锁&quot;</span>);</span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">31</span>:<span class="number">14.310</span> c<span class="selector-class">.TestTryLock</span> <span class="selector-attr">[main]</span> - 获取了锁</span><br><span class="line"><span class="number">10</span>:<span class="number">31</span>:<span class="number">14.313</span> c<span class="selector-class">.TestTryLock</span> <span class="selector-attr">[t1]</span> - 启动</span><br><span class="line"><span class="number">10</span>:<span class="number">31</span>:<span class="number">14.313</span> c<span class="selector-class">.TestTryLock</span> <span class="selector-attr">[t1]</span> - 获取锁失败，立刻返回</span><br><span class="line"><span class="number">10</span>:<span class="number">31</span>:<span class="number">16.313</span> c<span class="selector-class">.TestTryLock</span> <span class="selector-attr">[main]</span> - 释放了锁</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="锁超时-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestTryLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReentrantLock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!reentrantLock.tryLock(<span class="number">3</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;等待1s后获取失败，返回&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获取了锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;释放了锁&quot;</span>);</span><br><span class="line">                reentrantLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        log.debug(<span class="string">&quot;获取了锁&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;释放了锁&quot;</span>);</span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">30</span>:<span class="number">09.663</span> c<span class="selector-class">.TestTryLock</span> <span class="selector-attr">[main]</span> - 获取了锁</span><br><span class="line"><span class="number">10</span>:<span class="number">30</span>:<span class="number">09.666</span> c<span class="selector-class">.TestTryLock</span> <span class="selector-attr">[t1]</span> - 启动</span><br><span class="line"><span class="number">10</span>:<span class="number">30</span>:<span class="number">10.667</span> c<span class="selector-class">.TestTryLock</span> <span class="selector-attr">[t1]</span> - 获取等待<span class="number">1s</span>后失败，返回</span><br><span class="line"><span class="number">10</span>:<span class="number">30</span>:<span class="number">11.667</span> c<span class="selector-class">.TestTryLock</span> <span class="selector-attr">[main]</span> - 释放了锁</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="解决哲学家就餐问题">解决哲学家就餐问题</h4><ul><li>哲学家就餐之所以会出现死锁，是因为一人手里一根筷子，都在等别人放下筷子，那么我们使用刚刚的tryLock来设置一个等待时间，到时自动放下筷子就好了</li></ul><div class="tabs" id="解决哲学家就餐问题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#解决哲学家就餐问题-1">筷子类</button></li><li class="tab"><button type="button" data-href="#解决哲学家就餐问题-2">哲学家类</button></li><li class="tab"><button type="button" data-href="#解决哲学家就餐问题-3">就餐</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="解决哲学家就餐问题-1"><ul><li>修改之前的代码，让筷子类继承ReentrantLock</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chopstick</span> <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chopstick</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Chopstick&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决哲学家就餐问题-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Philosopher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Philosopher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Chopstick left;</span><br><span class="line">    Chopstick right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Philosopher</span><span class="params">(String name, Chopstick left, Chopstick right)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;我踏马吃吃吃&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 尝试获取左手筷子</span></span><br><span class="line">            <span class="keyword">if</span> (left.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 尝试获取右手筷子</span></span><br><span class="line">                    <span class="keyword">if</span> (right.tryLock()) &#123;</span><br><span class="line">                        <span class="comment">// 吃完先放下 右手筷子</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            eat();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            right.unlock();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">// 没拿到右手筷子或者吃完了，把左手筷子也放了</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    left.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决哲学家就餐问题-3"><ul><li>此类不需要做修改，现在再执行，五位哲学家就可以正常吃饭了，不会发生死锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;苏格拉底&quot;</span>, c1, c2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;柏拉图&quot;</span>, c2, c3).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;亚里士多德&quot;</span>, c3, c4).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;赫拉克利特&quot;</span>, c4, c5).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;阿基米德&quot;</span>, c5, c1).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="条件变量">条件变量</h4><ul><li><p>ReentrantLock支持多个条件变量，就好比</p><ul><li>synchronized是那些不满足条件的线程都在同一间休息室等消息</li><li>ReentrantLock支持多间休息室，有专门等烟的休息室、专门等外卖的休息室、唤醒时也是按休息室来唤醒</li></ul></li><li><p>使用要点</p><ol><li>await前需要获得锁</li><li>await执行后，会释放锁，进入conditionObject等待</li><li>await的线程可以通过conditionObject的signal()方法来被唤醒去重新竞争lock锁，await的方法被打断或者超时的时候，也会去重新竞争lock锁</li><li>竞争lock锁成功后，从await后继续执行</li></ol></li><li><p>例子</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestCondition&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">waitCigaretteQueue</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">waitTakeoutQueue</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">hasCigarette</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">hasTakeout</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">while</span> (!hasCigarette) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        waitCigaretteQueue.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.debug(<span class="string">&quot;拿到了烟&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">while</span> (!hasTakeout) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        waitTakeoutQueue.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;拿到了外卖&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小女&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        sendCigarette();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        sendTakeout();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendCigarette</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;送烟的来了&quot;</span>);</span><br><span class="line">            hasCigarette = <span class="literal">true</span>;</span><br><span class="line">            waitCigaretteQueue.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTakeout</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;送外卖的来了&quot;</span>);</span><br><span class="line">            hasTakeout = <span class="literal">true</span>;</span><br><span class="line">            waitTakeoutQueue.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">58</span>:<span class="number">19.515</span> c<span class="selector-class">.TestCondition</span> <span class="selector-attr">[main]</span> - 送烟的来了</span><br><span class="line"><span class="number">11</span>:<span class="number">58</span>:<span class="number">19.518</span> c<span class="selector-class">.TestCondition</span> <span class="selector-attr">[小南]</span> - 拿到了烟</span><br><span class="line"><span class="number">11</span>:<span class="number">58</span>:<span class="number">20.519</span> c<span class="selector-class">.TestCondition</span> <span class="selector-attr">[main]</span> - 送外卖的来了</span><br><span class="line"><span class="number">11</span>:<span class="number">58</span>:<span class="number">20.519</span> c<span class="selector-class">.TestCondition</span> <span class="selector-attr">[小女]</span> - 拿到了外卖</span><br></pre></td></tr></table></figure><h3 id="同步模式之顺序控制">同步模式之顺序控制</h3><h4 id="固定运行顺序">固定运行顺序</h4><ul><li>例如必须先执行线程2再执行线程1<ul><li>使用<code>wait notify</code>来解决，使用此种凡事，需保证先wait再notify，否则wait线程永远得不到唤醒。因此需要设立了一个isT2Ran字段来判断该不该wait。</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.WaitNotify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">isT2Ran</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="comment">// 如果t2没有执行过</span></span><br><span class="line">                <span class="keyword">while</span> (!isT2Ran) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 那么t1等待</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="comment">// t2执行的时候修改标记</span></span><br><span class="line">                isT2Ran = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 并且唤醒等待的线程</span></span><br><span class="line">                obj.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>除此之外还可以使用park和unpark来解决，代码更为简洁，这里的unpark的作用于设立的isT2Ran的作用类似，都可以起到通知t1线程，t2线程已经执行过了的作用。使用此种方式更为灵活，无论t1线程和t2线程的调用顺序如何，都是以线程为单位暂停和恢复，不需要同步对象(obj)和运行标记(isT2Ran)</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.ParkUnpark&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 当t1线程没有许可的时候，t1线程会暂停，有许可的时候，用掉这个许可，恢复当前线程执行</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 给t1线程发放许可</span></span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">            log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="交替输出">交替输出</h4><ul><li>t1输出a五次，t2输出b五次，t3输出c五次<ul><li>使用<code>wait notify</code>来解决</li></ul>  <div class="tabs" id="交替输出"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#交替输出-1">SyncWaitNotify</button></li><li class="tab"><button type="button" data-href="#交替输出-2">测试类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="交替输出-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出内容     等待标记        下一个标记</span></span><br><span class="line"><span class="comment"> *   a          1               2</span></span><br><span class="line"><span class="comment"> *   b          2               3</span></span><br><span class="line"><span class="comment"> *   c          3               1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.SyncWaitNotify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncWaitNotify</span> &#123;</span><br><span class="line">    <span class="comment">// 等待标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> flag;</span><br><span class="line">    <span class="comment">// 循环次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SyncWaitNotify</span><span class="params">(<span class="type">int</span> flag, <span class="type">int</span> loopNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.loopNum = loopNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str       输出内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitFlag  等待标记</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextFlag  下一个标记</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str, <span class="type">int</span> waitFlag, <span class="type">int</span> nextFlag)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (flag != waitFlag) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(str);</span><br><span class="line">                flag = nextFlag;</span><br><span class="line">                <span class="built_in">this</span>.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="交替输出-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SyncWaitNotify</span> <span class="variable">syncWaitNotify</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncWaitNotify</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncWaitNotify.print(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncWaitNotify.print(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncWaitNotify.print(<span class="string">&quot;c&quot;</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.373</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t1]</span> - <span class="selector-tag">a</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t2]</span> - <span class="selector-tag">b</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t3]</span> - c</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t1]</span> - <span class="selector-tag">a</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t2]</span> - <span class="selector-tag">b</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t3]</span> - c</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t1]</span> - <span class="selector-tag">a</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t2]</span> - <span class="selector-tag">b</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t3]</span> - c</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t1]</span> - <span class="selector-tag">a</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t2]</span> - <span class="selector-tag">b</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t3]</span> - c</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t1]</span> - <span class="selector-tag">a</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t2]</span> - <span class="selector-tag">b</span></span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">51.376</span> c<span class="selector-class">.SyncWaitNotify</span> <span class="selector-attr">[t3]</span> - c</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>使用await和signal来解决</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncAwaitSignal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AwaitSignal</span> <span class="variable">awaitSignal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AwaitSignal</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">a</span> <span class="operator">=</span> awaitSignal.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">b</span> <span class="operator">=</span> awaitSignal.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">c</span> <span class="operator">=</span> awaitSignal.newCondition();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            awaitSignal.print(<span class="string">&quot;a&quot;</span>, a, b);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            awaitSignal.print(<span class="string">&quot;b&quot;</span>, b, c);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            awaitSignal.print(<span class="string">&quot;c&quot;</span>, c, a);</span><br><span class="line">        &#125;, <span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        awaitSignal.start(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.AwaitSignal&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AwaitSignal</span> <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AwaitSignal</span><span class="params">(<span class="type">int</span> loopNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loopNum = loopNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str, Condition current, Condition next)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 每个线程都先进自己的休息室等待</span></span><br><span class="line">                current.await();</span><br><span class="line">                log.debug(str);</span><br><span class="line">                <span class="comment">// 叫醒下一个</span></span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Condition condition)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用Park和Unpark来解决</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncParkUnpark</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Thread t1;</span><br><span class="line">    <span class="keyword">static</span> Thread t2;</span><br><span class="line">    <span class="keyword">static</span> Thread t3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParkUnpark</span> <span class="variable">parkUnpark</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParkUnpark</span>(<span class="number">5</span>);</span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            parkUnpark.print(<span class="string">&quot;a&quot;</span>, t2);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            parkUnpark.print(<span class="string">&quot;b&quot;</span>, t3);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t3 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            parkUnpark.print(<span class="string">&quot;c&quot;</span>, t1);</span><br><span class="line">        &#125;, <span class="string">&quot;t3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.ParkUnpark&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParkUnpark</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParkUnpark</span><span class="params">(<span class="type">int</span> loopNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loopNum = loopNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str, Thread next)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(str);</span><br><span class="line">            LockSupport.unpark(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="小结-2">小结</h3><ul><li>通过上面的学习，需要掌握的是<ul><li>分析多线程访问共享资源时，哪些代码片段属于临界区</li><li>使用synchronized互斥解决临界区的线程安全问题<ul><li>掌握synchronized锁对象方法</li><li>掌握synchronized加载成员方法和静态方法语法</li><li>掌握wait/notify同步方法</li></ul></li><li>使用lock互斥锁解决临界区线程安全问题<ul><li>掌握lock使用细节：可打断、锁超时、公平锁、条件变量</li></ul></li><li>学会分析变量的线程安全性、常见的线程安全类的使用</li><li>了解线程活跃性问题：死锁、活锁、饥饿</li><li>应用方面<ul><li>互斥：使用synchronized或Lock达到共享资源互斥效果</li><li>同步：使用wait/notify或Lock的条件变量达到线程间通信效果</li></ul></li><li>原理方面<ul><li>monitor、synchronized、wait/notify原理</li><li>synchronized进阶原理</li><li>park/unpark原理</li></ul></li><li>模式方面<ul><li>同步模式之保护性暂停</li><li>异步模式之生产者消费者</li><li>同步模式之顺序控制</li></ul></li></ul></li></ul><h2 id="共享模型之内存">共享模型之内存</h2><ul><li>上一小节主要讲解的Monitor主要关注的是访问共享变量时，保证临界区代码的原子性</li><li>在这一小节我们来进一步深入学习共享变量在多线程间的<code>可见性问题</code>和命令执行时的<code>有序性问题</code></li></ul><h3 id="Java内存模型">Java内存模型</h3><ul><li>JMM即Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等。</li><li>JMM 体现在以下几个方面<ol><li>原子性：保证指令不会收到线程上下文切换的影响</li><li>可见性：保证指令不会受CPU缓存的影响</li><li>有序性：保证指令不会受CPU指令并行优化的影响</li></ol></li></ul><h3 id="可见性">可见性</h3><h4 id="退不出的循环">退不出的循环</h4><ul><li>先来看一个现象，main线程对run变量的修改对于t线程不可见，导致t线程无法停止，日志迟迟没有打印结束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestRun&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        log.debug(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为什么会出现这种状况呢？我们来分析一下<ol><li>初始状态：t线程刚开始，从主存中读取flag到工作内存<br><img src="https://s1.ax1x.com/2023/04/11/ppOC3MF.png" alt=""></li><li>因为t线程要频繁地从主存中读取flag的值，所以JIT编译器会将run的值缓存至自己工作内存中的高速缓存中，减少对主存中flag的访问，提高效率<br><img src="https://s1.ax1x.com/2023/04/11/ppOCtaR.png" alt=""></li><li>1s后，主线程修改了flag的值为false，并同步至主存，而t线程则是继续从自己的工作内存中读取的flag的值，始终为旧值<br><img src="https://s1.ax1x.com/2023/04/11/ppOCaPx.png" alt=""></li></ol>  <div class="note info no-icon flat"><ul><li>主存就是所有共享信息存储的位置，工作内存是每个线程私有信息存储的位置</li></ul></div></li></ul><h4 id="解决方法">解决方法</h4><ul><li>volatile(易变关键字)：它可以用来修饰成员变量和静态成员变量，避免线程从自己的工作内存中查找变量的值，必须到主存中获取它的值，线程操作volatile变量都是直接操作主存</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        log.debug(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可见性-vs-原子性">可见性 vs 原子性</h3><ul><li>前面的例子体现的就是可见性，它保证的是在多个线程之间，一个线程对volatile变量的修改是对另一个线程可见的，但不保证原子性，仅用于在一个写线程，多个读线程的情况，从字节码的角度看是这样的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getstatic flag <span class="comment">// 线程 t 获取 flag true</span></span><br><span class="line">getstatic flag <span class="comment">// 线程 t 获取 flag true</span></span><br><span class="line">getstatic flag <span class="comment">// 线程 t 获取 flag true</span></span><br><span class="line">getstatic flag <span class="comment">// 线程 t 获取 flag true</span></span><br><span class="line">putstatic flag <span class="comment">// 线程 main 修改 flag 为 false</span></span><br><span class="line">getstatic flag <span class="comment">// 线程 t 获取 flag false</span></span><br></pre></td></tr></table></figure><ul><li>对比一下之前讲线程安全时的例子，两个线程，一个进行自增，一个进行自减，只能保证看到最新值，但不能解决指令交错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设i的初始值为0</span></span><br><span class="line">getstatic i         <span class="comment">// 线程1-获取静态变量i的值 线程内i=0</span></span><br><span class="line">getstatic i         <span class="comment">// 线程2-获取静态变量i的值 线程内i=0</span></span><br><span class="line">iconst_1            <span class="comment">// 线程1-准备常量1</span></span><br><span class="line">iadd                <span class="comment">// 线程1-自增 线程内i=1</span></span><br><span class="line">putstatic i         <span class="comment">// 线程1-将修改后的值存入静态变量i 静态变量i=1</span></span><br><span class="line">iconst_1            <span class="comment">// 线程2-准备常量1</span></span><br><span class="line">isub                <span class="comment">// 线程2-自减 线程内i=-1</span></span><br><span class="line">putstatic i         <span class="comment">// 线程2-将修改后的值存入静态变量i 静态变量i=-1</span></span><br></pre></td></tr></table></figure><ul><li>但是synchronized代码块既可以保证代码块的原子性，又可以保证代码块内变量的可见性。但是缺点是synchronized是属于重量级操作，性能相对较低。</li></ul><h3 id="两阶段终止模式-volatile">两阶段终止模式-volatile</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestTPTVolatile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TPTVolatile</span> <span class="variable">tpt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TPTVolatile</span>();</span><br><span class="line">        tpt.start();</span><br><span class="line">        Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;停止监控&quot;</span>);</span><br><span class="line">        tpt.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TPTVolatile&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TPTVolatile</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;执行监控记录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;监控线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">06</span>:<span class="number">40.611</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[监控线程]</span> - 执行监控记录</span><br><span class="line"><span class="number">13</span>:<span class="number">06</span>:<span class="number">41.614</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[监控线程]</span> - 执行监控记录</span><br><span class="line"><span class="number">13</span>:<span class="number">06</span>:<span class="number">42.616</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[监控线程]</span> - 执行监控记录</span><br><span class="line"><span class="number">13</span>:<span class="number">06</span>:<span class="number">43.113</span> c<span class="selector-class">.TestTPTVolatile</span> <span class="selector-attr">[main]</span> - 停止监控</span><br><span class="line"><span class="number">13</span>:<span class="number">06</span>:<span class="number">43.113</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[监控线程]</span> - 料理后事</span><br></pre></td></tr></table></figure><h3 id="犹豫模式">犹豫模式</h3><h4 id="定义-2">定义</h4><ul><li>Balking（犹豫）模式用在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做了，直接结束返回</li></ul><h4 id="实现-2">实现</h4><ul><li>其实实现起来非常简单，只需要增加一个字段来标识这件事已经有人做了，继续拿上面的监控线程举例</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j(topic = &quot;c.TestTPTVolatile&quot;)</span><br><span class="line">public class Test02 &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        TPTVolatile tpt = new TPTVolatile();</span><br><span class="line">        tpt.start();</span><br><span class="line"><span class="addition">+       tpt.start();</span></span><br><span class="line">        Thread.sleep(3500);</span><br><span class="line">        log.debug(&quot;停止监控&quot;);</span><br><span class="line">        tpt.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Slf4j(topic = &quot;c.TPTVolatile&quot;)</span><br><span class="line">class TPTVolatile &#123;</span><br><span class="line">    private Thread thread;</span><br><span class="line"></span><br><span class="line">    private volatile boolean flag = false;</span><br><span class="line"></span><br><span class="line"><span class="addition">+   private boolean starting = false;</span></span><br><span class="line"></span><br><span class="line">    public void start() &#123;</span><br><span class="line"><span class="addition">+       if (starting) &#123;</span></span><br><span class="line"><span class="addition">+           log.debug(&quot;监控线程已启动，直接结束返回&quot;);</span></span><br><span class="line"><span class="addition">+           return;</span></span><br><span class="line"><span class="addition">+       &#125;</span></span><br><span class="line">        log.debug(&quot;启动监控线程&quot;);</span><br><span class="line"><span class="addition">+       starting = true;</span></span><br><span class="line">        thread = new Thread(() -&gt; &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (flag) &#123;</span><br><span class="line">                    log.debug(&quot;料理后事&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                    log.debug(&quot;执行监控记录&quot;);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &quot;监控线程&quot;);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stop() &#123;</span><br><span class="line">        flag = true;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">26</span>:<span class="number">59.682</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[main]</span> - 启动监控线程</span><br><span class="line"><span class="number">16</span>:<span class="number">26</span>:<span class="number">59.730</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[main]</span> - 监控线程已启动，直接结束返回</span><br><span class="line"><span class="number">16</span>:<span class="number">27</span>:<span class="number">00.731</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[监控线程]</span> - 执行监控记录</span><br><span class="line"><span class="number">16</span>:<span class="number">27</span>:<span class="number">01.732</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[监控线程]</span> - 执行监控记录</span><br><span class="line"><span class="number">16</span>:<span class="number">27</span>:<span class="number">02.736</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[监控线程]</span> - 执行监控记录</span><br><span class="line"><span class="number">16</span>:<span class="number">27</span>:<span class="number">03.231</span> c<span class="selector-class">.TestTPTVolatile</span> <span class="selector-attr">[main]</span> - 停止监控</span><br><span class="line"><span class="number">16</span>:<span class="number">27</span>:<span class="number">03.231</span> c<span class="selector-class">.TPTVolatile</span> <span class="selector-attr">[监控线程]</span> - 料理后事</span><br></pre></td></tr></table></figure><ul><li>它还经常用来实现线程安全的单例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">深入并发编程，实现高效多任务处理</summary>
    
    
    
    <category term="学习笔记" scheme="https://cyborg2077.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JUC" scheme="https://cyborg2077.github.io/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode75</title>
    <link href="https://cyborg2077.github.io/2023/06/03/Leetcode75/"/>
    <id>https://cyborg2077.github.io/2023/06/03/Leetcode75/</id>
    <published>2023-06-03T06:27:09.000Z</published>
    <updated>2023-10-01T13:43:47.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在最前">写在最前</h2><ul><li>力扣官方的学习计划，链接：<a href="https://leetcode.cn/studyplan/leetcode-75/">https://leetcode.cn/studyplan/leetcode-75/</a></li></ul><h2 id="数组-字符串">数组 / 字符串</h2><h3 id="交替合并字符串"><a href="https://leetcode.cn/problems/merge-strings-alternately/">交替合并字符串</a></h3><ul><li>方式一：交替添加字符。如果其中一个字符串比另一个长，会将多余的字符追加到合并后字符串的末尾。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">mergeAlternately</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l1</span> <span class="operator">=</span> word1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">l2</span> <span class="operator">=</span> word2.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">minLen</span> <span class="operator">=</span> Math.min(l1, l2);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; minLen; i++) &#123;</span><br><span class="line">            sb.append(word1.charAt(i));</span><br><span class="line">            sb.append(word2.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minLen == l1)</span><br><span class="line">            sb.append(word2.substring(minLen));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sb.append(word1.substring(minLen));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式二：使用两个指针i和j分别指向两个字符串的当前字符位置。通过一个循环，不断将对应位置的字符添加到结果字符串中，直到其中一个字符串遍历完。然后将剩余未遍历完的字符串直接追加到结果字符串末尾。这种方法避免了substring操作，可以稍微提高性能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">mergeAlternately</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l1</span> <span class="operator">=</span> word1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">l2</span> <span class="operator">=</span> word2.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (i &lt; l1 || j &lt; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; l1)</span><br><span class="line">                sb.append(word1.charAt(i++));</span><br><span class="line">            <span class="keyword">if</span> (j &lt; l2)</span><br><span class="line">                sb.append(word2.charAt(j++));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的最大公因子"><a href="https://leetcode.cn/problems/greatest-common-divisor-of-strings/">字符串的最大公因子</a></h3><ul><li>题目找str1和str2的最大公子串，那么str1和str2都是n个子串组成的，那么如果不满足<code>(str1 + str2).equals(str2 + str1)</code>，那么直接返回空字符串（例如示例三），反之如果满足，则str1和str2长度的最大公因子就是子串长度，我们用substring()可以获取到子串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 求最大公因子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">gcdOfStrings</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="comment">// 不满足条件，返回空字符串</span></span><br><span class="line">        <span class="keyword">if</span> (!(str1 + str2).equals(str2 + str1)) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 满足条件，求str1和str2的最大公因子</span></span><br><span class="line">        <span class="keyword">return</span> str1.substring(<span class="number">0</span>, gcd(str1.length(), str2.length()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拥有最多糖果的孩子"><a href="https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies/">拥有最多糖果的孩子</a></h3><ul><li>找出最多糖果的数量，<code>其余孩子糖果数 + 额外糖果数 &gt;= 最多糖果数</code>，结果为true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Boolean&gt; <span class="title function_">kidsWithCandies</span><span class="params">(<span class="type">int</span>[] candies, <span class="type">int</span> extraCandies)</span> &#123;</span><br><span class="line">        ArrayList&lt;Boolean&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> candy : candies) &#123;</span><br><span class="line">            max = Math.max(max, candy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; candies.length; i++) &#123;</span><br><span class="line">            res.add(candies[i] + extraCandies &gt;= max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="种花问题"><a href="https://leetcode.cn/problems/can-place-flowers/">种花问题</a></h3><ul><li>贪心：当前位置为0，前面为0，后面为0，那就能种。需要注意判断一下边界条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPlaceFlowers</span><span class="params">(<span class="type">int</span>[] flowerbed, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; flowerbed.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flowerbed[i] == <span class="number">0</span></span><br><span class="line">                    <span class="comment">// 右边界</span></span><br><span class="line">                    &amp;&amp; (i + <span class="number">1</span> == flowerbed.length || flowerbed[i + <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 左边界</span></span><br><span class="line">                    &amp;&amp; (i == <span class="number">0</span> || flowerbed[i - <span class="number">1</span>] == <span class="number">0</span>)) &#123;</span><br><span class="line">                flowerbed[i] = <span class="number">1</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转字符串中的元音字母"><a href="https://leetcode.cn/problems/reverse-vowels-of-a-string/submissions/">反转字符串中的元音字母</a></h3><ul><li>双指针，首尾遍历元音字母，找到后交换位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseVowels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; s.length() &amp;&amp; !isTarget(str[l]))</span><br><span class="line">                l++;</span><br><span class="line">            <span class="keyword">while</span> (r &gt; <span class="number">0</span> &amp;&amp; !isTarget(str[r]))</span><br><span class="line">                r--;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                swap(str, l, r);</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isTarget</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;AEIOUaeiou&quot;</span>.indexOf(c) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> str[i];</span><br><span class="line">        str[i] = str[j];</span><br><span class="line">        str[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转字符串中的单词"><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">反转字符串中的单词</a></h3><ul><li>先去除首尾空格，然后正则匹配连续空格切分，最后翻转列表，加入空格拼接，返回结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        String[] res = s.trim().split(<span class="string">&quot;\\s+&quot;</span>); </span><br><span class="line">        Collections.reverse(Arrays.asList(res));</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除自身以外数组的乘积"><a href="https://leetcode.cn/problems/product-of-array-except-self/">除自身以外数组的乘积</a></h3><ul><li>不让用除法，且要在O(n)的时间复杂度内完成，那就只能一层循环，可以通过计算前缀积和后缀积最后使其相乘得出结果</li></ul><table><thead><tr><th style="text-align:center">nums</th><th style="text-align:center">1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td style="text-align:center">pre</td><td style="text-align:center">1</td><td>1</td><td>2</td><td>6</td></tr><tr><td style="text-align:center">suf</td><td style="text-align:center">24</td><td>12</td><td>4</td><td>1</td></tr><tr><td style="text-align:center">res</td><td style="text-align:center">24</td><td>12</td><td>8</td><td>6</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 前缀积计算</span></span><br><span class="line">        <span class="type">int</span>[] pre = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        pre[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            pre[i] = nums[i - <span class="number">1</span>] * pre[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后缀积计算</span></span><br><span class="line">        <span class="type">int</span>[] suf = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        suf[n - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            suf[i] = suf[i + <span class="number">1</span>] * nums[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 结果计算</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] = pre[i] * suf[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>降低到O(1)的空间复杂度：用res数组代替pre数组，用一个suf变量代替suf数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] = nums[i - <span class="number">1</span>] * res[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">suf</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            res[i] *= suf;</span><br><span class="line">            suf *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递增的三元子序列"><a href="https://leetcode.cn/problems/increasing-triplet-subsequence/">递增的三元子序列</a></h3><h3 id="压缩字符串"><a href="https://leetcode.cn/problems/string-compression/">压缩字符串</a></h3><h2 id="双指针">双指针</h2><h3 id="移动零"><a href="https://leetcode.cn/problems/move-zeroes/">移动零</a></h3><ul><li>方式一：双指针遍历，快指针遍历不为0的元素，赋值给慢指针，快指针遍历到末尾结束，慢指针将剩余元素设0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>, slow = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 快指针遍历不为0的元素</span></span><br><span class="line">        <span class="keyword">for</span> (; fast &lt; nums.length; fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 赋值给慢指针</span></span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 慢指针将剩余元素设0</span></span><br><span class="line">        <span class="keyword">for</span> (; slow &lt; nums.length; slow++) &#123;</span><br><span class="line">            nums[slow] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>, slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; fast &lt; nums.length; fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[fast];</span><br><span class="line">                nums[fast] = nums[slow];</span><br><span class="line">                nums[slow++] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断子序列"><a href="https://leetcode.cn/problems/is-subsequence/">判断子序列</a></h3><ul><li>双指针遍历，如果s是t的子序列，那么s中的所有元素都会按顺序在t中依次出现，一个指针遍历s，另一个指针遍历t，最终判断指针是否遍历到了s的末尾</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length(), n = t.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == t.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="盛最多水的容器"><a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a></h3><ul><li>设双指针<code>i</code>, <code>j</code>分别指向<code>height[0]</code>, <code>height[n - 1]</code>，并逐渐向内收缩，那么面积<code>S(i, j) = (j - i) * min(height[i], height[j])</code>，此时的面积取决于<code>min(height[i], height[j])</code><ul><li>如果向内移动短板，那么<code>min(height[i], height[j])</code>是可能增大的（也有可能变小），即移动短板面积可能会增大</li><li>如果向内移动长板，那么<code>min(height[i], height[j])</code>是减小或不变的，即移动长板面积一定会变小</li></ul></li><li>所以为了求出最大面积，肯定是不能移动长板的，只能移动短板赌一波，每次移动短板之后更新最大值即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 双指针一首一尾</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="comment">// 移动短板，更新最大值</span></span><br><span class="line">            ans = height[i] &lt; height[j] ?</span><br><span class="line">                    Math.max(ans, (j - i) * height[i++]) :</span><br><span class="line">                    Math.max(ans, (j - i) * height[j--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="K-和数对的最大数目">K 和数对的最大数目</h3><h2 id="滑动窗口">滑动窗口</h2><h3 id="子数组最大平均数-I"><a href="https://leetcode.cn/problems/maximum-average-subarray-i/">子数组最大平均数 I</a></h3><ul><li>计算固定长度区间内数的最大平均值，采用滑动窗口的思想，即维护一个长度为k的滑动窗口，先计算长度为k的窗口初值，然后每次窗口向右移动的时候，加上最右边的元素，减掉最左边的元素，更新窗口最大值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">findMaxAverage</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 计算长度为k的窗口的初值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> sum;</span><br><span class="line">        <span class="comment">// 每次向右移动时</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 加上最右端元素，减去最左端元素</span></span><br><span class="line">            sum = sum + nums[i] - nums[i - k];</span><br><span class="line">            <span class="comment">// 更新最大值</span></span><br><span class="line">            res = Math.max(res, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取平均</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> * res / k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定长子串中元音的最大数目"><a href="https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/">定长子串中元音的最大数目</a></h3><ul><li>一样的套路，唯一一点区别就是需要判断新加入元素和剔除元素是否为元音字母</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxVowels</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            current += isVowel(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> current;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; chars.length; i++) &#123;</span><br><span class="line">            current = current + isVowel(chars[i]) - isVowel(chars[i - k]);</span><br><span class="line">            res = Math.max(res, current);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">isVowel</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (c == <span class="string">&#x27;a&#x27;</span> || c == <span class="string">&#x27;e&#x27;</span> || c == <span class="string">&#x27;i&#x27;</span> || c == <span class="string">&#x27;o&#x27;</span> || c == <span class="string">&#x27;u&#x27;</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大连续1的个数-III"><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/">最大连续1的个数 III</a></h3><ul><li>将问题转换为：找一个最长子数组，该子数组最多包含k个0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestOnes</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, count = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>, n = nums.length;</span><br><span class="line">        <span class="comment">// 右边界遍历到结尾</span></span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="comment">// 右边界右移，如果遇到0，则计数+1</span></span><br><span class="line">            <span class="keyword">if</span> (nums[right] == <span class="number">0</span>)</span><br><span class="line">                count++;</span><br><span class="line">            <span class="comment">// 如果此时left ~ right的子数组中的0已经超过了k个</span></span><br><span class="line">            <span class="keyword">while</span> (count &gt; k) &#123;</span><br><span class="line">                <span class="comment">// 左边界右移，如果左边界遇到了0，则将其移除，计数-1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[left++] == <span class="number">0</span>)</span><br><span class="line">                    count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 每次操作完毕更新结果</span></span><br><span class="line">            res = Math.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 右边界右移</span></span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删掉一个元素以后全为1的最长子数组"><a href="https://leetcode.cn/problems/longest-subarray-of-1s-after-deleting-one-element/">删掉一个元素以后全为1的最长子数组</a></h3><ul><li>与上题类似，将其转换为：找一个最长子数组，最多只包含1个0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, count = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>, n = nums.length;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] == <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[left++] == <span class="number">0</span>) &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀和">前缀和</h2><h3 id="找到最高海拔"><a href="https://leetcode.cn/problems/find-the-highest-altitude/">找到最高海拔</a></h3><ul><li>简单的前缀和</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestAltitude</span><span class="params">(<span class="type">int</span>[] gain)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> x : gain) &#123;</span><br><span class="line">           sum += x;</span><br><span class="line">           res = Math.max(res, sum);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找数组的中心下标"><a href="https://leetcode.cn/problems/find-pivot-index/">寻找数组的中心下标</a></h3><ul><li>求前缀和和后缀和，然后从左往右遍历，找到第一个前缀和和后缀和相等的下标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        preSum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] extSum = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        extSum[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">            extSum[n - <span class="number">1</span> - i] = extSum[n - i] + nums[n - i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preSum[i] == extSum[i])</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优化思路：如果有符合条件的中心下标，则有<code>左求和 × 2 + 中心下表值 = 总和</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leftSum * <span class="number">2</span> + nums[i] == sum) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            leftSum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表-哈希集合">哈希表 / 哈希集合</h2><h3 id="找出两数组的不同"><a href="https://leetcode.cn/problems/find-the-difference-of-two-arrays/">找出两数组的不同</a></h3><ul><li>请叫我API侠</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findDifference</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : nums2) &#123;</span><br><span class="line">            set2.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : nums1) &#123;</span><br><span class="line">            set1.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : nums2) &#123;</span><br><span class="line">            set1.remove(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : nums1) &#123;</span><br><span class="line">            set2.remove(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        res.add(set1.stream().toList());</span><br><span class="line">        res.add(set2.stream().toList());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更方便的API</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findDifference</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : nums2) &#123;</span><br><span class="line">            set2.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : nums1) &#123;</span><br><span class="line">            set1.add(n);</span><br><span class="line">            set2.remove(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : nums2) &#123;</span><br><span class="line">            set1.remove(n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> List.of(List.copyOf(set1), List.copyOf(set2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="独一无二的出现次数"><a href="https://leetcode.cn/problems/unique-number-of-occurrences/">独一无二的出现次数</a></h3><ul><li>哈希表存储每个数字出现的次数，判断value是否有重复值，把value存入HashSet，观察value的个数会不会减少即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">uniqueOccurrences</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : arr) &#123;</span><br><span class="line">            map.put(n, map.get(n) == <span class="literal">null</span> ? <span class="number">0</span> : map.get(n) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(map.values()).size() == map.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="确定两个字符串是否接近">确定两个字符串是否接近</h3><h3 id="相等行列对">相等行列对</h3><h2 id="栈">栈</h2><h3 id="从字符串中移除星号">从字符串中移除星号</h3><h3 id="行星碰撞">行星碰撞</h3><h3 id="字符串解码">字符串解码</h3><h2 id="队列">队列</h2><h3 id="最近的请求次数">最近的请求次数</h3><h3 id="Dota2-参议院">Dota2 参议院</h3><h2 id="链表">链表</h2><h3 id="删除链表的中间节点">删除链表的中间节点</h3><h3 id="奇偶链表">奇偶链表</h3><h3 id="反转链表">反转链表</h3><h3 id="链表最大孪生和">链表最大孪生和</h3><h2 id="二叉树-深度优先搜索">二叉树 - 深度优先搜索</h2><h3 id="二叉树的最大深度">二叉树的最大深度</h3><h3 id="叶子相似的树">叶子相似的树</h3><h3 id="统计二叉树中好节点的数目">统计二叉树中好节点的数目</h3><h3 id="路径总和-III">路径总和 III</h3><h3 id="二叉树中的最长交错路径">二叉树中的最长交错路径</h3><h3 id="二叉树的最近公共祖先">二叉树的最近公共祖先</h3><h2 id="二叉树-广度优先搜索">二叉树 - 广度优先搜索</h2><h3 id="二叉树的右视图">二叉树的右视图</h3><h3 id="最大层内元素和">最大层内元素和</h3><h2 id="二叉搜索树">二叉搜索树</h2><h3 id="二叉搜索树中的搜索">二叉搜索树中的搜索</h3><h3 id="删除二叉搜索树中的节点">删除二叉搜索树中的节点</h3><h2 id="图-深度优先搜索">图 - 深度优先搜索</h2><h3 id="钥匙和房间">钥匙和房间</h3><h3 id="省份数量">省份数量</h3><h3 id="重新规划路线">重新规划路线</h3><h3 id="除法求值">除法求值</h3><h2 id="图-广度优先搜索">图 - 广度优先搜索</h2><h3 id="迷宫中离入口最近的出口">迷宫中离入口最近的出口</h3><h3 id="腐烂的橘子">腐烂的橘子</h3><h2 id="堆-优先队列">堆 / 优先队列</h2><h3 id="数组中的第K个最大元素">数组中的第K个最大元素</h3><h3 id="无限集中的最小数字">无限集中的最小数字</h3><h3 id="最大子序列的分数">最大子序列的分数</h3><h3 id="雇佣-K-位工人的总代价">雇佣 K 位工人的总代价</h3><h2 id="二分查找">二分查找</h2><h3 id="猜数字大小">猜数字大小</h3><h3 id="咒语和药水的成功对数">咒语和药水的成功对数</h3><h3 id="寻找峰值">寻找峰值</h3><h3 id="爱吃香蕉的珂珂">爱吃香蕉的珂珂</h3><h2 id="回溯">回溯</h2><h3 id="电话号码的字母组合">电话号码的字母组合</h3><h3 id="组合总和-III">组合总和 III</h3><h2 id="动态规划-一维">动态规划 - 一维</h2><h3 id="第-N-个泰波那契数">第 N 个泰波那契数</h3><h3 id="使用最小花费爬楼梯">使用最小花费爬楼梯</h3><h3 id="打家劫舍">打家劫舍</h3><h3 id="多米诺和托米诺平铺">多米诺和托米诺平铺</h3><h2 id="动态规划-多维">动态规划 - 多维</h2><h3 id="不同路径">不同路径</h3><h3 id="最长公共子序列">最长公共子序列</h3><h3 id="买卖股票的最佳时机含手续费">买卖股票的最佳时机含手续费</h3><h3 id="编辑距离">编辑距离</h3><h2 id="位运算">位运算</h2><h3 id="比特位计数">比特位计数</h3><h3 id="只出现一次的数字">只出现一次的数字</h3><h3 id="或运算的最小翻转次数">或运算的最小翻转次数</h3><h2 id="前缀树">前缀树</h2><h3 id="实现-Trie-前缀树">实现 Trie (前缀树)</h3><h3 id="搜索推荐系统">搜索推荐系统</h3><h2 id="区间集合">区间集合</h2><h3 id="无重叠区间">无重叠区间</h3><h3 id="用最少数量的箭引爆气球">用最少数量的箭引爆气球</h3><h2 id="单调栈">单调栈</h2><h3 id="每日温度">每日温度</h3><h3 id="股票价格跨度">股票价格跨度</h3>]]></content>
    
    
    <summary type="html">Leetcode 75 面试必考精华版，75题覆盖全量考点</summary>
    
    
    
    <category term="力扣" scheme="https://cyborg2077.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="Leetcode" scheme="https://cyborg2077.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Maven面试题</title>
    <link href="https://cyborg2077.github.io/2023/05/20/InQMaven/"/>
    <id>https://cyborg2077.github.io/2023/05/20/InQMaven/</id>
    <published>2023-05-20T04:20:27.000Z</published>
    <updated>2023-10-01T13:43:47.560Z</updated>
    
    <content type="html"><![CDATA[<ol><li>什么是Maven？</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Maven是一个开源的项目管理和构建工具，用于帮助开发人员自动化构建、测试和部署Java项目。它提供了一个标准化的项目结构和一套强大的构建规则，以及丰富的插件生态系统，使得项目的构建和依赖管理变得简单和可靠。</li><li>Maven的核心概念包括项目对象模型（Project Object Model，POM）、坐标、依赖管理和生命周期。项目对象模型是一个XML文件，描述了项目的基本信息、依赖信息、插件配置等。</li><li>依赖管理功能可以让开发人员方便的生命和管理项目所依赖的外部库和模块。生命周期定义了一系列的构建阶段和插件目标，开发人员可以根据需求执行不同的构建任务。</li></ul>              </div>            </details><ol start="2"><li>Maven能为我们解决什么问题？</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ol><li>添加第三方jar包<ul><li>使用Maven之前，我们都是手动复制jar包到项目的<code>WEB-INF/lib</code>下，每个项目都会有一份，造成大量重复文件。而Maven将jar包放在本地仓库中统一管理，需要jar包只需要用坐标的方式引用即可。</li></ul></li><li>jar包之间的依赖关系<ul><li>jar包之间往往是不独立的，很多jar包需要在其他jar包的支持下才能够正常工作，成为jar包之间的依赖关系，如果我们手动去导入，要知道jar包之间的依赖关系并一一导入，这样是极其麻烦而且容易出错的。如果我们使用maven，它能够将当前jar包所依赖的其他所有jar包全部导入。</li></ul></li><li>获取第三方jar包<ul><li>开发过程中我们需要用到很多jar包，每个jar包在官网的获取方式不尽相同，给工作带来了额外的困扰。但是使用Maven可以以坐标的方式依赖一个jar包，Maven从中央仓库进行下载，并同时下载这个jar包依赖的其他jar包</li></ul></li><li>将项目拆分为过个工程模块<ul><li>随着项目的规模越来越大，已经不可能通过package结构来划分模块，必须将项目拆分为多个工程协同开发。</li></ul></li></ol>              </div>            </details><ol start="3"><li>说说Maven有什么优缺点？</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>优点<ol><li>简化了项目依赖管理</li><li>易于上手，对于新手来说，了解几个常用命令即可满足日常工作需求</li><li>便于与持续集成工具（jenkins）整合</li><li>便于项目升级，无论是项目本身还是项目使用的依赖</li><li>maven有很多插件，便于功能扩展，例如生产站点、自动发布版本等</li></ol></li><li>缺点<ul><li>Maven是一个庞大的构建系统，学习难度大，入门容易但精通难</li><li>Maven采用约定大于配置的策略，虽然上手容易，但一旦出现问题，很难调试（例如网络环境较差，导致很多repository无法访问）</li></ul></li></ul>              </div>            </details><ol start="4"><li>什么是Maven的坐标？</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Maven坐标是用于唯一标识一个项目或模块的信息，它由一组固定的属性组成，包括groupId、artifactId和Version<ul><li>groupId(组织名称)：用于表示项目所属的组织或团队，一般情况下，它的命名是翻转的域名（com.example），但也可以根据实际需求来自定义。</li><li>artifactId(项目组织)：artifactId是指项目的唯一标识符，用于区分不同的项目。它通常是项目的名称，用于在仓库中唯一标识一个项目，在同一个groupId下，不同的项目应该有不同的artifactId</li><li>version(版本号)：version表示项目的版本号。它用于区分不同版本的项目，以便在依赖管理和构建过程中正确选择和使用。版本号可以采用标准的数字格式（例如1.0、2.1.7）或其他约定的格式。</li></ul></li><li>通过组合这些属性，Maven的坐标提供了一种唯一标识的定位项目的方式。在依赖管理中，其他项目可以通过引用该坐标来声明对该项目的依赖。Maven会根据这些坐标信息，自动下载并引入所需的依赖项。</li></ul>              </div>            </details><ol start="5"><li>讲一下maven的生命周期</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <table><thead><tr><th style="text-align:center">阶段</th><th style="text-align:center">处理</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">validate</td><td style="text-align:center">验证项目</td><td style="text-align:center">验证项目是否正确且所有必须信息是可用的</td></tr><tr><td style="text-align:center">compile</td><td style="text-align:center">执行编译</td><td style="text-align:center">源代码编译在此阶段完成</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">测试</td><td style="text-align:center">使用适当的单元测试框架(例JUnit)运行测试</td></tr><tr><td style="text-align:center">package</td><td style="text-align:center">打包</td><td style="text-align:center">创建JAR/WAR包如在 pom,xml 中定义提及的包</td></tr><tr><td style="text-align:center">verify</td><td style="text-align:center">检查</td><td style="text-align:center">对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td style="text-align:center">install</td><td style="text-align:center">安装</td><td style="text-align:center">安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td style="text-align:center">deploy</td><td style="text-align:center">部署</td><td style="text-align:center">拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td></tr></tbody></table>              </div>            </details><ol start="6"><li>说说你熟悉哪些maven命令？</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <table><thead><tr><th style="text-align:center">Maven 命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">mvn archetype:generate</td><td style="text-align:center">创建 Maven 项目</td></tr><tr><td style="text-align:center">mvn compile</td><td style="text-align:center">编译源代码</td></tr><tr><td style="text-align:center">mvn deploy</td><td style="text-align:center">发布项目</td></tr><tr><td style="text-align:center">mvn test-compile</td><td style="text-align:center">编译测试源代码</td></tr><tr><td style="text-align:center">mvn test</td><td style="text-align:center">运行应用程序中的单元测试</td></tr><tr><td style="text-align:center">mvn site</td><td style="text-align:center">生成项目相关信息的网站</td></tr><tr><td style="text-align:center">mvn clean</td><td style="text-align:center">清除项目目录中的生成结果</td></tr><tr><td style="text-align:center">mvn package</td><td style="text-align:center">根据项目生成的 JAR</td></tr><tr><td style="text-align:center">mvn install</td><td style="text-align:center">在本地 Repository 中安装 JAR</td></tr><tr><td style="text-align:center">mvn eclipse:eclipse</td><td style="text-align:center">生成 Eclipse 项目文件</td></tr><tr><td style="text-align:center">mvn jetty:run</td><td style="text-align:center">启动 Jetty 服务</td></tr><tr><td style="text-align:center">mvn tomcat:run</td><td style="text-align:center">启动 Tomcat 服务</td></tr><tr><td style="text-align:center">mvn clean package -Dmaven.test.skip=true</td><td style="text-align:center">清除以前的包后重新打包，跳过测试类</td></tr></tbody></table>              </div>            </details><ol start="7"><li>如何解决依赖传递引起的版本冲突？</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <p>可以通过在依赖项声明中使用<code>&lt;exclusions&gt;</code>标签来排除特定的传递依赖项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>conflicting-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>conflicting-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><ol start="8"><li>说说maven的依赖原则</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ol><li>最短路径原则（依赖传递的路径越短越优先）</li><li>pom文件申明顺序优先（路径长度一样，则先申明的优先）</li><li>覆写原则（当前pom文件里申明的直接覆盖父工程传过来的）</li></ol>              </div>            </details><ol start="9"><li>说说依赖的解析机制</li></ol><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ol><li>读取POM文件：Maven首先读取项目的POM文件，其中包含了项目依赖的配置信息。</li><li>解析依赖坐标：Maven解析POM文件中的依赖坐标，包括groupId、artifactId和version等信息，这些坐标唯一标识了一个依赖项。</li><li>检查本地仓库：Maven首先检查本地仓库（通常位于用户目录的.m2目录下），看是否已经存在所需的依赖项。如果已经存在，并且版本匹配，则直接使用本地仓库中的依赖项，无需下载。</li><li>下载依赖项：如果本地仓库中不存在所需的依赖项，或者版本不匹配，Maven会尝试从配置的远程仓库（如Maven中央仓库）下载依赖项。Maven会根据依赖坐标构建远程仓库的URL，下载相应的JAR文件。</li><li>解析依赖关系：Maven解析依赖项的传递关系。它会检查所下载的依赖项的POM文件，找到他们的传递依赖项，并重复以上步骤来解析和下载传递依赖项。</li><li>版本冲突解决：当存在多个依赖项的不同版本时，Maven使用冲突解决机制来确定最终使用的版本。通常会选择路径最短的依赖项（最短路径原则）或者根据POM文件中声明顺序选择优先的版本。</li><li>构建依赖树：Maven根据解析结果构建一个依赖树，表示项目的依赖关系和层次结构。这个依赖树包括直接依赖和传递依赖。</li><li>传递依赖管理：Maven会将解析的依赖项添加到项目的类路径中，以便在编译、测试和运行时使用。它还会管理传递依赖的范围和冲突解决。</li></ol>              </div>            </details> ]]></content>
    
    
    <summary type="html">Maven相关面试题</summary>
    
    
    
    <category term="面试题" scheme="https://cyborg2077.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="Maven" scheme="https://cyborg2077.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Redis面试题</title>
    <link href="https://cyborg2077.github.io/2023/05/07/InQRedis/"/>
    <id>https://cyborg2077.github.io/2023/05/07/InQRedis/</id>
    <published>2023-05-07T11:56:38.000Z</published>
    <updated>2023-10-01T13:43:47.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要用缓存？">为什么要用缓存？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>使用缓存的目的就是提升读写性能。在实际的业务场景下，更多的是为了提升读性能，带来更好的性能和并发量。Redis的读写性能比MySQL好的多，我们就可以把MySQL中的热点数据缓存到Redis，提升读取性能，同时减轻了MySQL的读取压力。</li></ul>              </div>            </details><h2 id="什么是Redis？">什么是Redis？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis是一个高性能的内存数据存储系统，也可以称为键值存储系统。它支持多种数据结构，包括字符串、哈希、列表、集合、有序集合等，还提供了一些高级功能，如发布订阅、事务、Lua脚本等。Redis的特点是数据存储在内存中，可以快速读写，同时支持数据持久化到磁盘中。Redis还具有分布式特性，可以通过分片和赋值来实现高可用和高扩展性。</li><li>Redis主要应用于缓存、会话存储、消息队列、排行榜等场景，具有快速、稳定、可靠等优点。由于其出色的性能和易用性，Redis已经成为最受欢迎的内存数据库之一。</li></ul>              </div>            </details><h2 id="使用Redis有哪些好处？">使用Redis有哪些好处？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>使用Redis有以下几个好处<ol><li>高性能：Redis将数据存储在内存中，读写速度非常快，可以达到几十万甚至上百万QPS，特别适合高并发场景。</li><li>数据结构丰富：Redis支持多种数据结构，如字符串、哈希、列表、集合、有序集合等，可以满足不同场景下的需求。</li><li>持久化：Redis支持将数据持久化到磁盘中，以保证数据的安全性和可恢复性。</li><li>分布式特性：Redis支持分片和复制，可以实现高可用和高扩展性，支持数据在多台服务器之间的共享。</li><li>丰富的功能：Redis提供了许多高级功能，如事务、Lua脚本、发布订阅、过期策略等，可以满足更加复杂的业务需求。</li></ol></li></ul>              </div>            </details><h2 id="为什么要是用Redis而不是用Memcached呢？">为什么要是用Redis而不是用Memcached呢？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis和Memcached都是流行的内存缓存系统，它们都可以在内存中快速读写数据，但是在一些方面有所不同，下面是Redis相较于Memcached的一些优点<ol><li>数据结构更丰富：Redis支持多种数据结构，例如字符串、哈希、列表、集合、有序集合等，这些数据结构可以直接映射到实际的数据模型中，方便业务开发和数据处理。</li><li>多种持久化方式：Redis支持多种持久化方式，包括哦RDB（快照）和AOF（日志），这些持久化方式可以保证数据的安全性和可恢复性。</li><li>多种复制方式：Redis支持主从复制和哨兵模式，可以实现高可用和自动故障转移，而Memcached则需要通过第三方工具来实现高可用。</li><li>更好的性能：Redis在读写性能和并发能力上相较于Memcached更好，尤其是在多核CPU环境下，Redis可以充分利用多核的优势，提高系统的吞吐量。</li><li>更丰富的功能：Redis提供了更丰富的功能，如事务、Lua脚本、发布订阅、过期策略等，可以满足更加负载的业务需求。</li></ol></li></ul>              </div>            </details><h2 id="说说Redis线程模型">说说Redis线程模型</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis采用单线程模型，也就是说所有的请求都由同一个线程来处理。这个线程主要负责网络IO、请求解析、命令执行和数据返回等业务。Redis内部通过事件驱动机制来实现异步IO操作，包括文件事件和时间事件。具体来说，Redis在启动时会创建一个事件处理器，来监听客户端套接字的读写事件，并在事件发生时触发响应的回调函数来处理事件。</li><li>Redis单线程模型的优点是代码简洁、易于维护和调试，同时可以避免多线程并发带来的同步和锁的问题。此外，Redis还采用了多路复用机制，可以将多个客户端的请求合并到一起，减少IO操作的次数，提高系统的吞吐量和响应速度。</li><li>当然，Redis的单线程模型也存在一些缺点，如无法充分利用多核CPU的优势，容易受到单点故障的影响等。为了解决这些问题，Redis引入了多个进程和多个实例的方案，如主从复制、哨兵模式和集群模式等。这些方案可以提高系统的可用性和扩展性，同时保持了Redis简洁、高效的特点。</li></ul>              </div>            </details><h2 id="为什么Redis单线程模型效率也能那么高？">为什么Redis单线程模型效率也能那么高？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ol><li>C语言实现，效率高</li><li>纯内存操作</li><li>基于非阻塞的IO复用模型机制</li><li>单线程的话可以避免多线程的频繁上下文切换问题</li><li>丰富的数据结构，全程采用哈希结构，读取速度非常快，对数据存储进行了一些优化，例如压缩表、跳表等。</li></ol>              </div>            </details><h2 id="为什么Redis需要把所有数据放到内存中？">为什么Redis需要把所有数据放到内存中？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis之所以将所有数据都放在内存中，是因为它设计的目标是高性能、高吞吐量和低延迟，而内存访问的速度比磁盘访问的速度快很多。如果数据存储在硬盘中，磁盘I/O会严重影响Redis的性能。而且Redis还提供了数据持久化功能，不用担心服务器重启对内存中数据的影响。</li></ul>              </div>            </details><h2 id="Redis的同步机制了解吗？">Redis的同步机制了解吗？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis支持主从同步和从从同步，而在进行第一次主从同步时，需要现在主节点上执行BGSAVE命令，将当前内存中的数据持久化道磁盘上生成RDB文件，并且将主节点需要将后续修改操作记录到内存缓冲区中。在这个过程中，主节点会将生成的RDB文件发送给从节点，从节点接收并加载RDB文件到自己的内存中。加载完成后，从节点会通知主节点，将主节点在复制期间产生的命令同步到从节点，以此完成主从同步过程。</li></ul>              </div>            </details><h2 id="pipeline有什么好处，为什么要是用Pipeline？">pipeline有什么好处，为什么要是用Pipeline？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>使用Pipeline的好处在于可以将多次I/O往返的时间缩短为一次，从而提高Redis的吞吐量和性能。Pipeline允许客户端将多个Redis命令打包成一次请求发送给Redis服务器，Redis服务器收到后，将多个命令按顺序执行，并将执行结果按照请求的顺序返回给客户端，这样就避免了每次请求都要进行网络通信的开销。</li></ul>              </div>            </details><h2 id="说一下Redis有什么优点和缺点？">说一下Redis有什么优点和缺点？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>优点：<ol><li>高性能：Redis使用C语言编写，采用单线程模型，将数据全部存储在内存中，加上异步I/O和时间驱动机制等优化，使得Redis在读写数据时的性能非常高。</li><li>数据结构丰富：Redis支持多种数据结构，如字符串、列表、哈希表、集合、有序集合等，这些数据结构可以满足不同的业务需求。</li><li>持久化机制：Redis提供了两张持久化机制，即RDB和AOF，可以将内存中的数据持久化到磁盘上，保证了数据的可靠性和安全性。</li><li>高可用性：Redis提供了主从复制和Sentinel机制，可以实现数据的高可用性和容错能力。</li></ol></li><li>缺点：<ol><li>内存受限：Redis将所有数据存储在内存中，如果数据量很大，会受到内存大小的限制，不适合存储大规模数据。</li><li>持久化机制可能带来性能损失：由于Redis提供了持久化机制，数据需要同步到磁盘上，真会导致写入性能的下降。</li><li>单线程模型可能存在瓶颈：尽管Redis采用了单线程模型，但是在极端情况下，可能会出现性能瓶颈，影响系统性能。</li><li>不支持多机数据共享：Redis不支持多机数据共享，需要使用其他技术如主从复制和Sentinel机制来实现高可用性和容错能力。</li></ol></li></ul>              </div>            </details><h2 id="Redis缓存刷新策略有哪些？">Redis缓存刷新策略有哪些？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis提供了以下几种缓存刷新策略<ol><li>基于过期时间：可以设置key的过期时间，当过期时间到达后，Redis会自动删除该key。</li><li>基于LRU算法：Redis使用LRU算法来淘汰最近最少使用的key，以保留热点数据。</li><li>基于LFU算法：Redis使用LFU算法来淘汰最不经常使用的key，以保留热点数据。</li><li>基于手动刷新：可以手动删除缓存中的key，或者通过发送通知来通知客户端删除key。</li><li>基于定时刷新：可以定时清空缓存，或者定时刷新缓存中的数据，以保持数据的及时性。</li></ol></li></ul>              </div>            </details><h2 id="Redis持久化方式有哪些？有什么区别？">Redis持久化方式有哪些？有什么区别？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis提供两种持久化机制：RDB和AOF。</li><li>RDB(Redis DataBase)持久化：会将Redis在内存中的数据快照保存到磁盘上，形成一个RDB文件，该文件包含了Redis在某个时间点上的数据快照<ul><li>优点：<ol><li>只有一个dump.rdb文件，方便持久化</li><li>容灾性好，一个文件可以保存到安全的磁盘。</li><li>性能最大化，fork子进程来完成写操作，让主进程继续处理命令，I/O最大化</li><li>数据集较大时，比AOF的启动效率更高。</li></ol></li><li>缺点：<ol><li>数据安全性较低，RDB是间隔一段时间进行持久化，如果持久化之间Redis发生故障，会发生数据丢失，因此这种方式更适合数据要求不严谨的时候。</li></ol></li></ul></li><li>AOF(Append Only File)持久化：是将Redis写操作记录到一个文件中，每次Redis执行一条写命令，就将该命令写入AOF文件中，这样可以保证每条命令都能被保存下来。AOF文件可以进行追加和重写操作，当文件太大时，Redis会自动进行重写，将多次修改合并成一条，以减少磁盘占用空间。<ul><li>优点：<ol><li>数据安全：AOF持久化可以配置<code>appendfsync</code>属性，它可以指定AOF文件的刷盘策略。默认情况下<code>appendfsync</code>的值为<code>everysec</code>。即每秒中将AOF缓存中的数据写入磁盘一次。但是，用户也可以将<code>appendfsync</code>的值设置为<code>always</code>，这样每次执行写操作都会立即将AOF缓存中的数据写入磁盘。这样即使Redis发生异常情况。只要AOF文件中已经记录了相应的写操作，就可以通过AOF文件来恢复数据。</li><li>数据一致性：AOF持久化是通过append模式写入文件的，即每次写操作都是追加到AOF文件末尾。因此，即使Redis在写入AOF文件的过程中宕机，AOF文件也不会损坏，而是只会丢失一部分的数据。当Redis重新启动是，会通过redis-check-aof工具将AOF文件中不一致的数据进行修复，保证数据的一致性。需要注意的是，使用AOF持久化时，如果Redis频繁执行写操作，那么AOF文件可能会非常大，可能影响性能。因此，用户可以通过配置AOF重写规则，定期对AOF文件进行压缩，以减小文件大小。</li></ol></li><li>缺点：<ol><li>AOF文件比RDB文件大，且恢复速度慢。</li><li>数据集较大时，比RDB启动效率低。</li></ol></li></ul></li><li>Redis支持同时使用RDB和AOF持久化机制。在使用时，Redis会先尝试使用AOF文件来恢复数据，如果AOF文件不存在或者恢复失败，Redis会尝试使用RDB文件来恢复数据。同时使用两种持久化机制可以在保证数据完整性的同时提高恢复速度。</li></ul>              </div>            </details><h2 id="持久化有两种，那么该怎么选择呢？">持久化有两种，那么该怎么选择呢？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ol><li>不要仅仅使用RDB，因为那样会导致丢失很多数据。虽然RDB持久化机制的忒但是可以生成数据的快照，这样在恢复数据的时候非常快速。但是RDB持久化只在发生故障时执行，如果Redis崩溃或意外关闭，可能会丢失最近执行的一些命令。因此，建议使用AOF持久化来记录Redis执行的所有写操作，并将RDB持久化用于冷备。</li><li>也不要仅仅使用AOF，虽然AOF持久化机制可以记录Redis执行的所有写操作，因此在数据恢复方面会比RDB更加健壮，但是它也存在一些问题。如果仅使用AOF进行冷备，那么在恢复数据时，它可能会比RDB持久化慢。如果只使用AOF持久化，那么可能会因为AOF文件过大导致性能下降。</li><li>Redis支持同时使用AOF和RDB持久化机制。使用AOF持久化可以保证数据不丢失，并作为数据恢复的首选，使用RDB持久化作为冷备，以提供快速数据恢复选项。这种方式可以利用AOF和RDB持久化机制的优点来提高数据安全性和恢复速度。</li><li>如果同时使用RDB和AOF持久化机制，在Redis重启时，会使用AOF来重构数据，因为AOF中的数据更加完整。</li></ol>              </div>            </details><h2 id="怎么使用Redis实现消息队列？">怎么使用Redis实现消息队列？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis可以使用list结构作为队列来实现消息队列，使用rpush生产消息，使用lpop消费消息。当lpop没有消息的时候，需要适当的sleep一会儿再重试。但是也可以使用blpop命令来阻塞住，直到消息到来，避免了sleep操作。</li><li>如果需要实现生产一次消费多次的场景，可以使用pub/sub主题订阅者模式，实现<code>1:N</code>的消息队列。</li><li>但是pub/sub的缺点是在消费者下线的情况下，生产的消息会丢失。因此，如果需要更可靠的消息队列，需要使用专业的消息队列，例如RabbitMQ。</li><li>此外，Redis还可以使用sortedset结构来实现延时队列。使用时间戳作为score，消息内容作为key，调用zadd来生产消息。消费者可以使用zrangebyscore指令获取N秒之前的数据，然后轮询进行处理。</li></ul>              </div>            </details><h2 id="说说你对Redis事务的理解">说说你对Redis事务的理解</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>什么是Redis事务？<ul><li>Redis中的事务是一组命令的集合，是Redis的最小执行单位。它可以保证一次执行多个命令，每个事务是一个单独的隔离操作，事务中的所有命令都会被序列化、按顺序地执行，服务端在执行事务的过程中，不会被其他客户端发送来的命令请求打断。Redis事务通过MULTI、EXEC、DISCARD、WATCH等命令来实现的。</li></ul></li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">MULTI</td><td style="text-align:center">开启一个事务</td></tr><tr><td style="text-align:center">EXEC</td><td style="text-align:center">提交事务，从命令队列中取出提交的操作命令，进行实际执行</td></tr><tr><td style="text-align:center">DISCARD</td><td style="text-align:center">放弃一个事务，清空命令队列</td></tr><tr><td style="text-align:center">WATCH</td><td style="text-align:center">检测一个或多个键的值在事务执行期间是否发生变化，如果发生变化，那么当前事务放弃执行</td></tr></tbody></table><ul><li>Redis事务的注意点有哪些？<ol><li>Redis事务是不支持回滚的。</li><li>Redis服务端在执行事务的过程中，不会被其他客户端发送来的命令请求打断，直到事务命令全部执行完毕才会执行其他客户端的命令。</li></ol></li><li>Redis事务为什么不支持回滚？<ul><li>Redis的事务不支持回滚，但是执行的命令如果有语法错误，Redis会执行失败，这些问题可以从程序层面捕获并解决。但是如果出现其他问题，则依然会继续执行剩下的命令。这样做的原因是因为回滚需要增加很多工作，而不支持回滚可以保持简单、快速的特性。</li></ul></li></ul>              </div>            </details><h2 id="Redis为什么设计成单线程的？">Redis为什么设计成单线程的？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis的单线程设计是其高性能的重要原因之一。Redis单线程的设计思想主要是为了避免多线程带来的上下文切换、锁竞争等开销。从而提高Redis的效率和性能。</li><li>具体来说，Redis单线程的设计主要有以下几个方面的考虑：<ol><li>避免上下文切换：在多线程环境下，线程的切换会涉及到上下文的切换，这个切换本身就就会消耗CPU资源和时间。而Redis单线程的设计可以避免这种上下文切换的开销，从而提高Redis的性能。</li><li>避免锁竞争：在多线程环境下，线程之间共享数据时需要使用锁来保证数据的一致性和可靠性。而所本身也会带来开销和竞争，降低Redis的效率和性能。而Redis单线程的设计可以避免这种锁竞争的开销，从而提高Redis的性能。</li><li>减少内存分配：在多线程环境下，线程之间需要共享内存，而内存共享会涉及到内存分配和管理的开销。而Redis单线程的设计可以避免这种内存分配的开销，从而提高Redis的效率和性能。</li></ol></li></ul>              </div>            </details><h2 id="什么是Bigkey？会存在什么影响？">什么是Bigkey？会存在什么影响？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Bigkey指的是Redis中的大键，即占用内存较多的键值对。造成的影响如下：<ol><li>内存占用：Bigkey会占用大量的内存资源，导致Redis内存不足，从而影响Redis的性能和可用性。</li><li>网络传输：Bigkey会增加网络传输的负担，因为在进行数据备份和复制的时候，需要将Bigkey的数据全部传输，从而增加了网络带宽的使用。</li><li>超时阻塞：由于Bigkey占用的空间较大，所以Redis在对其操作时，可能会消耗过长的时间，导致客户端超时阻塞。因为Redis采用单线程模型，当处理一个大key时，其他请求必须等待该操作完成后才能执行，而这个操作可能会需要较长的时间，从而导致阻塞。为了避免这种情况的发生，可以对bigkey进行拆分或优化。</li><li>内存碎片：Bigkey会导致Redis中出现内存碎片，从而影响Redis的内存使用效率，导致Redis内存占用率上升。</li></ol></li></ul>              </div>            </details> <h2 id="说说Redis哈希槽的概念">说说Redis哈希槽的概念</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis哈希槽是Redis集群中用来实现数据分片的一种机制，可以将所有的键均匀地分布到多个节点上，以实现高可用和高性能分布式数据存储。</li><li>具体来说，Redis集群将整个数据集分为16384个哈希槽，每个节点负责其中的一部分哈希槽，节点之间通过Gossip协议进行通信，维护整个集群的状态。当一个客户端想要访问一个键时，Redis会根据键名计算出该键对应的哈希值，然后找到哈希槽的编号，再根据哈希槽的映射关系，将请求路由到对应节点上。</li></ul>              </div>            </details><h2 id="Redis常见性能问题和解决方案有哪些？">Redis常见性能问题和解决方案有哪些？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ol><li>网络延迟：Redis的性能很大程度上受限于网络延迟，因此需要尽可能减少网络传输次数和数据量，避免过多的网络IO操作<ul><li>解决方案：可以使用Redis的Pipline特性，将多个请求打包发送，减少网络传输的次数；也可以使用Redis的批量操作命令，将多个数据一次性提交，减少网络传输的数据量。</li></ul></li><li>大量的数据读写：Redis的单线程模型会在高并发读写的情况下出现性能瓶颈，导致响应时间变长。<ul><li>解决方案：可以使用Redis的主从复制和集群特性，将数据分布在多个节点上，增加系统的读写并发能力。</li></ul></li><li>慢查询：当Redis中存在大量慢查询操作时，会影响Redis的整体性能。<ul><li>解决方案：可以使用Redis的slowlog功能，记录Redis的慢查询操作，并使用Redis的监控工具进行监控，及时发现慢查询问题。</li></ul></li><li>内存使用过多：Redis需要将所有的数据存储在内存中，当数据量过大时，会占用大量的内存资源，导致Redis的性能下降。<ul><li>解决方案：可以使用Redis的持久化功能，将数据写入磁盘中，以释放内存空间；也可以使用Redis的内存优化技巧，如删除不必要的数据、合理使用Redis的数据结构等。</li></ul></li><li>阻塞操作：当Redis执行某些操作时，会阻塞其他操作的执行，从而影响Redis的整体性能。<ul><li>解决方案：可以使用Redis的异步操作特性，将阻塞操作转化为异步操作，以提高Redis的性能和吞吐量。</li></ul></li></ol>              </div>            </details><h2 id="如果Redis中有1亿个key，其中有10w个key是以某个固定的已知前缀开头的，如何将它们全部找出来？">如果Redis中有1亿个key，其中有10w个key是以某个固定的已知前缀开头的，如何将它们全部找出来？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>我们可以使用keys命令或scan命令，然而在数据量庞大的环境下，不推荐使用keys命令。<ol><li>keys命令是遍历查询的，时间复杂度为O(n)，数据量越大查询时间越长，且Redis是单线程的，使用keys命令会导致线程阻塞一段时间，从而导致Redis会出现假死问题，直到keys命令执行完毕才能恢复，这在生产环境下是不可接受的。此外，keys命令没有分页功能，会一次性查询出所有符合条件的key值，输出的信息非常多。</li><li>相对来说，scan命令比keys命令更适合生产环境。sacn命令可以实现和keys命令相同的匹配功能，但是在执行过程中不会阻塞线程，并且查询的数据可能存在重复，需要客户端去重。因为scan命令是通过游标方式查询的，所以不会导致Redis出现假死问题。Redis在查询过程中会把游标返回给客户端，单词返回控制且游标不为0，则说明遍历还没有结束，客户端继续遍历查询。但是，scan命令在检索的过程中，被删除的元素是不会被查询出来的，如果在迭代过程中有元素被修改，scan命令也不能保证查询出对应的元素。相对来说，scan命令查找花费的时间会比keys命令长。</li></ol></li></ul><div class="note info no-icon flat"><ul><li>补充：假死问题<ul><li>Redis假死问题是指当Redis实例在进行某些耗时操作时（例如遍历所有key），由于Redis是单线程的，所以这个操作会导致Redis线程被阻塞，从而导致Redis无法处理其他请求，造成Redis服务不可用的状态。在这种情况下，Redis似乎已经死了，但其实Redis线程仍在执行操作，只是无法处理其他请求而已。因此，这种状态被称为Redis假死问题。避免Redis假死问题的常见方法是使用Redis提供的异步命令和管道技术，以避免在生产环境中会使用遍历所有key的操作。</li></ul></li></ul></div>              </div>            </details><h2 id="如果有大量的key需要设置同一时间过期，一般需要注意什么？">如果有大量的key需要设置同一时间过期，一般需要注意什么？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>如果大量缓存同时失效，会导致大量的请求直接访问数据库，容易造成数据库崩溃或者降低数据库的性能，进而影响整个系统的稳定性。</li><li>为了预防这种情况的发生，我们最好在设计数据过期时间的时候，都加上一个随机值，让过期时间更加分散，从而尽量避免大量的key在同一时刻失效。</li></ul>              </div>            </details><h2 id="什么情况下可能会导致Redis阻塞？">什么情况下可能会导致Redis阻塞？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis可能出现阻塞的情况包括：<ol><li>Redis主线程在执行阻塞命令（如<code>BRPOP</code>、<code>BLPOP</code>、<code>BRPOPLPUSH</code>、<code>SUBSCRIBE</code>等）时，会阻塞其他客户端的请求，直到命令执行完毕才能继续处理其他请求。</li><li>Redis主线程在执行某些耗时的命令（如<code>SORT</code>、<code>KEYS</code>等）时，也会阻塞其他客户端的请求，同样需要等待命令执行完毕后才能继续处理其他请求。</li><li>Redis内存使用达到最大限制时，执行写操作（如<code>SET</code>、<code>INCR</code>等）可能会导致Redis阻塞。这是因为Redis需要执行内存回收操作以释放内存空间，如果回收操作耗时过长，就会导致Redis阻塞。</li><li>Redis主从同步过程中，如果主库无法及时响应从库的同步请求，就会导致从库阻塞，无法继续进行数据同步。</li></ol></li><li>对于这些阻塞情况，可以采取一些措施来避免或减少阻塞的影响，例如<ol><li>尽可能使用非阻塞命令，例如<code>LPUSH</code>和<code>RPOP</code>代替<code>BLPOP</code>，使用Lua脚本实现多个操作的原子性等。</li><li>尽量避免使用耗时的命令或对大数据集进行操作，如果必须使用，可以考虑将这些操作放在后台进行。</li><li>设置合理的内存使用上限，同时使用内存淘汰策略来控制内存使用情况。</li><li>配置合理的主从架构，避免主库过于繁忙，导致从库同步阻塞。</li></ol></li></ul>              </div>            </details> <h2 id="怎么提高缓存命中率？">怎么提高缓存命中率？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>提高缓存命中率可以采取以下措施：<ol><li>预热缓存：在系统启动的时候，将一些热点数据提前加载到缓存中，可以避免在系统运行时出现缓存穿透和缓存雪崩的情况。</li><li>增加缓存容量：增加缓存容量可以缓存更多的数据，从而提高缓存命中率。</li><li>优化缓存设计：合理的缓存设计是提高缓存命中率的前提，包括选择合适的数据结构、缓存过期时间、缓存的key命名等。</li><li>使用多级缓存：多级缓存可以将热点数据缓存在更快速、容量更小的缓存中，减少从慢速缓存或者数据库中读取数据的次数。</li><li>缓存穿透处理：针对一些缓存中不存在，但是经常被查询的数据，可以采取布隆过滤器或设置空值等方式来进行预判，避免缓存穿透的情况。</li><li>建立读写分离的架构：将读请求和写请求分别处理，读请求可以直接从缓存中读取数据，写请求更新数据库后再更新缓存，从而避免缓存和数据库的一致性问题。</li></ol></li></ul>              </div>            </details><h2 id="Redis如何解决key冲突？">Redis如何解决key冲突？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>如果两个key的名字相同，后一个key会覆盖前一个key。因此，为了避免key冲突，最好为每一个key取一个独特的、易于辨识的名称。</li><li>通常可以使用业务名和参数来区key，这样可以避免key冲突，同时也方便业务逻辑的管理和维护。</li></ul>              </div>            </details><h2 id="Redis报内存不足怎么处理？">Redis报内存不足怎么处理？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>可以考虑以下几种处理方式：<ol><li>增加物理内存：增加Redis所在服务器的物理内存，可以让Redis有更多的空间来存储数据。</li><li>减少数据量：可以删除一些已经不再使用的数据，或者将一些数据进行持久化，以释放内存。设置缓存淘汰策略，提高内存的使用效率。</li><li>修改Redis配置：可以调整Redis配置文件中的一些参数，如maxmemory等，增加Redis可用内存。</li><li>使用Redis集群：可以将数据分散在多个Redis节点中，每个节点存储一部分数据，从而减少单个Redis实例的内存使用量。</li></ol></li></ul>              </div>            </details> <h2 id="缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级都了解吗？">缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级都了解吗？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>简述其概念如下<ol><li>缓存雪崩：指在某个时间段内缓存集体过期失效或缓存服务重启，导致大量请求都落到数据库上，从而导致数据库崩溃的情况。</li><li>缓存穿透：指查询一个不存在的数据，由于缓存没有命中，导致所有的请求都会到数据库上，造成数据库压力过大，严重的可能会导致数据库宕机。</li><li>缓存预热：指系统上线后，将相关的缓存数据直接加载到缓存系统中，避免在用户请求过程中因没有预先加载而导致缓存穿透的现象。</li><li>缓存更新：指对数据库中的数据更新时，同时更新缓存中的数据，保证缓存数据和数据库的一致性。</li><li>缓存降级：指在缓存失效或缓存访问异常时，为了保证系统的可用性，通过一些机制，将请求转发到其他服务或者直接返回默认值，从而避免系统崩溃或者因为缓存故障导致业务受损。</li></ol></li><li>常见的Redis缓存降级策略包括：<ol><li>熔断降级：当Redis缓存故障或者超时时，系统会进入熔断状态，所有请求奖杯转发到备用服务或者直接返回默认值。</li><li>限流降级：当Redis缓存无法处理所有请求时，系统会采用限流策略，限制访问流量，保护系统资源，避免系统崩溃。</li><li>数据降级：当Redis缓存故障时，系统可以返回默认值，避免因缓存故障导致业务受损。</li></ol></li></ul>              </div>            </details><h2 id="热点数据和冷数据是什么？">热点数据和冷数据是什么？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>热点数据和冷数据是根据数据被访问的频率来进行划分的。<ul><li>热点数据值的是被频繁访问的数据，通常是系统的核心数据，例如热门商品、热门文章、热门活动等，这些数据的访问量非常高，如果没有得到有效的缓存优化，系统将会面临严重的性能问题。</li><li>冷数据则相反，指的是不经常被访问的数据，它们的数据访问频率较低，例如旧的文章、过期的活动等。</li></ul></li><li>了解热点数据和冷数据对于缓存设计和优化非常重要，因为不同的数据需要采用不同的缓存策略。<ul><li>例如对于热点数据需要采用缓存预热、缓存更新等策略来保证缓存的命中率，而对于冷数据则可以采用懒加载等策略来避免不必要的缓存开销。</li></ul></li></ul>              </div>            </details><h2 id="Memcached和Redis的区别都有哪些？">Memcached和Redis的区别都有哪些？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Memcached和Redis是两种常用的缓存系统，它们的区别如下：<ol><li>数据类型：Redis支持更丰富的数据类型，包括字符串、哈希、列表、集合、有序集合等，而Memcached仅支持简单的键值对存储。</li><li>持久化：Redis支持数据的持久化，可以将数据写入磁盘，而Memcached不支持数据的持久化。</li><li>分布式支持：Memcached天生支持分布式，多个节点可以组成一个集群，而Redis的分布式支持需要通过集群、分片等方式实现。</li><li>性能：在单机环境下，Redis的性能通常比Memcached更好，但在分布式环境下，由于网络通信开销的增加，两者的性能差距可能会减小。</li><li>缓存策略：Redis支持更多的缓存策略，比如LRU（最近最少使用）、LFU（最少使用）、随机等，而Memcached仅支持LRU。</li><li>应用场景：Redis更适合需要丰富数据类型、支持持久化、缓存策略较多、单机性能较好的场景；而Memcached更适合需要高速读写、分布式支持、缓存策略相对简单的场景。</li></ol></li></ul>              </div>            </details><h2 id="Redis的数据类型，以及每种数据类型的使用场景？">Redis的数据类型，以及每种数据类型的使用场景？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>常见的几种数据类型和使用场景如下：<ol><li>字符串(String)：字符串类型是Redis最基本的数据结构，一个键最大能存储512MB。<ul><li>使用场景：适用于计数器、分布式锁、缓存等常见。</li></ul></li><li>列表(List)：列表是链表结构，可以在头部和尾部添加元素。<ul><li>使用场景：可以做简单的消息队列功能。利用Irange命令，做基于Redis的分页功能。</li></ul></li><li>集合(Set)：集合是通过哈希表实现的无序集合，每个元素都是独一无二的。<ul><li>使用场景：适用于好友关系、共同好友等去重和计算交集、并集、差集的场景。</li></ul></li><li>哈希(Hash)：哈希结构类似于关联数组，由字段和值组成。<ul><li>使用场景：适用于对象缓存。</li></ul></li><li>有序集合(Sorted Set)：有序集合类似于集合，不同的是每个元素都会关联一个权重(score)，按照权重进行排序。<ul><li>使用场景：排行榜、带权重的任务队列等场景。</li></ul></li><li>位图(BitMap)：用于存储二进制位的数据结构，可以进行位运算，支持高效的位图计算。<ul><li>使用场景：用户签到记录。</li></ul></li><li>地理位置(Geo)：用于存储地理位置信息的数据结构。<ul><li>使用场景：附近的酒店、餐厅。</li></ul></li><li>HyperLogLog：用于进行基数计数的数据结构，支持高效的对大量元素进行去重统计。<ul><li>使用场景：网站的UV统计。</li></ul></li></ol></li></ul>              </div>            </details><h2 id="Redis的过期策略以及内存淘汰机制">Redis的过期策略以及内存淘汰机制</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis的过期策略和内存淘汰机制如下：<ol><li>过期策略：Redis中可以设置key的过期时间，过期时间到期后，key将会自动被删除。Redis提供了两种不同的过期策略：<ul><li>定时删除：在设置key过期的同时，创建一个定时器，当过期时间到达时，就会立即删除该key。</li><li>惰性删除：再获取某个key的值时，先检查该key是否过期，如果过期就删除，否则返回该key的值。</li><li>Redis默认使用惰性删除策略。</li></ul></li><li>内存淘汰机制：当Redis内存达到了最大限制时，需要从内存中删除一些数据。Redis提供了多种内存淘汰机制：<ul><li>noeviction：当内存空间不足以容纳新写入数据时，新写入操作会报错，这种方式不会删除任何数据，应该只用于特殊场景。</li><li>allkeys-lru：当内存空间不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（LRU算法）。这是Redis默认的淘汰策略。</li><li>allkeys-random：从所有key中随机选择一些进行删除。</li><li>volatile-lru：当内存空间不足以容纳新写入数据时，再设置了过期时间的键空间中，移除最近最少使用的key（LRU算法）。</li><li>volatile-ramdom：从设置了过期时间的key中随机选择一些进行删除。</li><li>volatile-ttl：从设置了过期时间的key中，根据过期时间的先后顺序进行删除，越早过期的越优先删除。</li></ul></li></ol></li></ul>              </div>            </details><h2 id="为什么Redis的操作是原子性的，怎么保证原子性？">为什么Redis的操作是原子性的，怎么保证原子性？</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis的操作是原子性的，是因为Redis是单线程的，Redis中的所有操作都是在一个单线程中执行，这样就可以避免并发的环境下多个线程同时修改同一个键值对的问题。在Redis中，任何一个操作都是原子性的，要么执行成功，要么执行不成功。如果一个操作包含多个步骤，那么这些步骤会被当成一个整体，要么全部执行成功，要么全部不执行。</li><li>Redis保证原子性的方式主要有两种：事务和Lua脚本。在事务中，Redis会将多个命令打包成一个事务进行执行，事务中的所有命令都会在一次操作中被执行，要么全部执行成功，要么全部不执行。而Lua脚本则可以将多个操作打包成一个原子性的操作进行执行，这个操作要么全部执行成功，要么全部不执行。另外，Redis还提供了一些原子性操作，例如INCR、DECR等，这些操作都是原子性的。</li><li>在并发环境下，如果多个线程同时执行get和set命令，可能会出现竞争条件，从而导致数据不一致的问题。但是如果使用Redis提供的原子性操作INCR，则不会存在这种问题，因为INCR命令是原子性的。</li><li>因此可以使用Redis事务或者Redis+Lua的方式保证多个命令在并发中的原子性，或者使用Redis提供的原子性操作。</li></ul>              </div>            </details><h2 id="面试模拟">面试模拟</h2><ul><li>面试官：什么是缓存穿透？怎么解决？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>emm，我想一下<ul><li>缓存穿透是指查询一个不存在的数据，如果从存储层查询不到数据，则不会写入缓存，此时就会导致每次请求这个不存在的数据，都会到DB里去查询，可能会导致DB挂掉，这种情况大概率是遭到了攻击。</li><li>解决方案的话，一般可以缓存空数据，即缓存这个不存在的数据。另外一种解决方案就是使用布隆过滤器</li></ul></li></ul>              </div>            </details><ul><li>面试官：好的，那你能介绍一下布隆过滤器吗？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，是这样<ul><li>布隆过滤器主要是用于检索一个元素绝对不在集合中或可能在集合中。它的底层主要是先去初始化一个比较大的数组，里面存放二进制的0或1，在一开始都是0，当一个key来了之后经过3个哈希函数的计算，模于数组长度找到数据的下标，然后把下标位置的0改为1，这样的话，三个数组下标的位置就能标明一个key的存在，查找的过程也是一样的。</li><li>当然这个也是有缺点的，布隆过滤器可能存在一些误判，我们一般是可以设置这个误判率的，大概不会超过5%，因为哈希冲突不可能避免，所以这个误判是必然存在的，要不然就增加数组长度。但其实5%的误判率一般项目也是能接受的，不至于高并发下压倒数据库。<br><img src="https://s1.ax1x.com/2023/07/23/pCq6DtP.png" alt=""></li><li>用上图来举个例子<ol><li>初始化布隆过滤器为 16 位，每一位初始值都为 0。</li><li>将 <code>Fredy</code> 录入布隆过滤器，经过三个哈希函数的计算，将第 1、3、7 位设为 1。</li><li>将 <code>Eli</code> 录入布隆过滤器，经过三个哈希函数的计算，将第 10、12、15 位设为 1。</li><li>查询 <code>Tom</code>，经过三个哈希函数的计算，得到第 0、2、5 位，这三个位置上的数字都是 0。根据布隆过滤器的规则，可以判断 <code>Tom</code> 绝对不在数据库中。</li><li>查询 <code>Lily</code>，经过三个哈希函数的计算，得到第 7、12、15 位，这三个位置上的数字都是 1。这里需要澄清一点：虽然这三个位置上的数字都是 1，但布隆过滤器只能判断 <code>Lily</code> 可能存在于数据库中，而不能确定 <code>Lily</code> 真的在数据库中。因为这三个位上的 1 可能是由 <code>Fredy</code> 和 <code>Eli</code> 共同组成的，所以存在一定的误判率。</li><li>当布隆过滤器判断数据一定不存在，就不用查询数据库，直接返回不存在的结果。当布隆过滤器判断可能存在，那么查询数据库，以确认元素是否真的存在。</li></ol></li></ul></li></ul>              </div>            </details><ul><li>面试官：什么是缓存击穿？怎么解决？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>emm，我想想<ul><li>缓存击穿是指在缓存中设置了过期时间的某个key，在某个时间点这个key正好过期，导致缓存失效，恰好此时有大量病发情趣同时访问该key，这些请求会直接访问后端数据库，造成数据库压力骤增，严重影响系统性能，甚至直接压垮数据库。</li><li>解决方案的话，我了解的有两种<ul><li>方案一：使用互斥锁<ol><li>当缓存失效时，不立即去加载数据库，而是先使用Redis的<code>SETNX</code>(Set if Not Exists)命令去设置一个互斥锁，只有一个请求能够成功设置互斥锁，其他请求会在这一步被阻塞</li><li>成功设置互斥锁的请求，再去加载数据库，并将加载的数据回设到缓存中</li></ol></li><li>方案二：逻辑过期<ol><li>在设置缓存key的同时，额外存储一个过期时间字段到缓存中，但是不给当前key设置过期时间</li><li>当查询请求到达时，首先从缓存中取出数据，并且额外判断一下存储key的过期时间字段，若过期则认为缓存失效</li><li>当缓存失效时，开启另外一个线程进行数据的异步加载和缓存更新，当前请求直接返回缓存中的旧数据，但这部分数据可能不是最新</li><li>这种方案一定程度上保证了高可用性，避免了大量请求直接打到数据库。</li></ol></li></ul></li><li>当然两种方案各有利弊<ul><li>方案一使用了互斥锁，保证了数据的强一致性，到哪性能可能会受到锁的竞争影响，而且需要考虑死锁的问题</li><li>方案二优先考虑的是高可用和性能，但不能保证强一致性，有可能会出现缓存和数据库数据不一致的情况。</li><li>实际使用中根据我们的需求来选择要保证一致性还是可用性。</li></ul></li></ul></li></ul>              </div>            </details><ul><li>面试官：什么是缓存雪崩？怎么解决？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>缓存雪崩是指换成那种设置了相同的过期时间，导致大量缓存在同一时刻同时失效，进而导致所有的请求直接转发到了后端数据库，导致数据库瞬时压力过大，可能直接压垮数据库。它与缓存击穿的区别在于，缓存雪崩是很多key同时失效，而缓存击穿是某一个key缓存失效</li><li>解决方案主要是在设置缓存的时候，可以给每个缓存的过期时间加上一个随机值，例如在原有的失效时间基础上，再加上一个1~5分钟的随机值。</li></ul>              </div>            </details><ul><li>面试官：Redis作为缓存，MySQL的数据如何与Redis进行同步呢？（双写一致性问题）</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，这个需要分为两种情况。<ul><li>保证强一致性：使用读写锁。<ul><li>如果是需要保证强一致性的话，可以采用Redisson实现的读写锁，在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写、读读都互斥，这样能保证在写数据的同时不会让其他线程来读数据，避免其他线程读到脏数据。这里需要注意读方法和写方法上需要使用同一把锁。</li><li>排他锁的底层使用的也是setnx，保证同时只有一个线程操作被锁住的方法</li></ul></li><li>然后不追求强一致性，数据同步可以有一定的延时。<ul><li>可以采用阿里的canal组件来实现数据同步：不需要更改业务代码，部署一个canal服务，canal服务会把自己伪装成MySQL的一个从节点，当MySQL数据更新以后，canal会读取binlog数据，然后通过canal的客户端获取到数据，更新缓存即可。</li></ul></li></ul></li></ul>              </div>            </details><ul><li>面试官：Redis作为缓存，数据的持久化是怎么做的呢？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>在Redis中提供了两种数据持久化的方法<ol><li>RDB<ul><li>RDB是一个快照文件，它是把Redis内存存储的数据写到磁盘上，当Redis实例宕机恢复数据的时候，方便从RDB的快照文件中恢复数据。</li></ul></li><li>AOF<ul><li>AOF的含义是追加文件，当Redis操作写命令的时候，都会存储到这个文件中，当Redis实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据。</li></ul></li></ol></li></ul>              </div>            </details><ul><li>面试官：那这两种方式，哪种恢复的比较快呢？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>RDB因为是二进制文件，在保存的时候体积也是比较小的，所以恢复的比较快，但是它有可能会丢失数据，因为Redis内部设置了触发RDB的机制，所以可能会丢失一段时间的缓存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1      ## 900秒内，如果至少有1个key发生了变化，则触发一次持久化操作</span><br><span class="line">save 300 10     ## 300秒内，10个key变化</span><br><span class="line">save 60 10000   ## 60秒内，10000个key变化</span><br></pre></td></tr></table></figure><ul><li>AOF恢复的速度慢一些，但是它丢失数据的风险要小很多，在Redis的配置文件中也可以配置AOF的刷盘策略，采用everysec的话，最多丢失一秒的数据</li></ul><table><thead><tr><th style="text-align:center">配置项</th><th style="text-align:center">刷盘时机</th><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">Always</td><td style="text-align:center">同步刷盘</td><td style="text-align:center">可靠性高，几乎不丢数据</td><td style="text-align:center">性能影响大</td></tr><tr><td style="text-align:center">everysec</td><td style="text-align:center">每秒刷盘</td><td style="text-align:center">性能适中</td><td style="text-align:center">最多丢失1秒数据</td></tr><tr><td style="text-align:center">no</td><td style="text-align:center">操作系统控制</td><td style="text-align:center">性能最好</td><td style="text-align:center">可靠性较差，可能丢失大量数据</td></tr></tbody></table><ul><li>实际环境中，都是结合使用RDB和AOF来使用的。</li></ul>              </div>            </details><ul><li>面试官：Redis的数据过期策略有哪些？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，Redis提供了两种数据过期删除策略<ul><li>第一种是惰性删除，在设置key过期时间后，我们不去管它，当我们需要使用该key时，我们再检查其是否过期，如果过期，我们就删除它，没过期，我们就返回该key。这种方法的缺点是，如果有大量冷数据，长时间不会被使用到，会占用内存空间，不会被及时清理掉。</li><li>第二种是定期删除，每隔一段时间，我们就对一些key进行检查，删除里面已经过期的key。定期清理的两种模式<ol><li>SLOW模式是定时任务，执行频率默认为10HZ，每次不超过25ms，不过也可以通过Redis的配置文件来手动配置</li><li>FAST模式执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于2ms，每次耗时不超过1ms</li></ol></li><li>Redis的过期删除策略，一般都是结合这二者一起来使用的。</li></ul></li></ul>              </div>            </details><ul><li>面试官：Redis的数据淘汰策略有哪些？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，Redis支持八种不同的策略来选择要删除的key<ol><li>noeviction： 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略。</li><li>volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</li><li>allkeys-random：对全体key ，随机进行淘汰。</li><li>volatile-random：对设置了TTL的key ，随机进行淘汰。</li><li>allkeys-lru： 对全体key，基于LRU算法进行淘汰，LRU的意思是最近最少使用</li><li>volatile-lru： 对设置了TTL的key，基于LRU算法进行淘汰</li><li>allkeys-lfu： 对全体key，基于LFU算法进行淘汰，LFU的意思是最少频率使用</li><li>volatile-lfu： 对设置了TTL的key，基于LFU算法进行淘汰</li></ol></li></ul>              </div>            </details><ul><li>面试官：假如数据库中有1000w数据，Redis中只能缓存20w条数据，如何保证Redis中的数据都是热点数据</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，这个问题可以从Redis的数据淘汰策略来考虑，如果需要保留热点数据，那么可以根据最近最少使用来淘汰数据，即LRU算法，这样剩下的就是热点数据了。</li></ul>              </div>            </details><ul><li>面试官：Redis内存用完了会发生什么？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，这个问题得看配置的Redis数据淘汰策略是什么，如果是默认的配置，Redis内存用完以后直接报错，可以根据自己的需求来设置数据淘汰策略，我一般都是使用的LRU来淘汰数据。</li></ul>              </div>            </details><ul><li>面试官：Redis的分布式锁如何实现</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，Redis中提供了一个SETNX命令，即Set if Not Exists<ul><li>由于Redis是单线程的，所以使用该命令后，只能有一个客户端对某一个key设置值，在没有过期或删除该key之前，其他客户端是不能设置这个key的</li></ul></li></ul>              </div>            </details><ul><li>面试官：那你是如何控制Redis实现分布式锁的有效时长呢？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，采用Redis的SETNX命令确实不太好控制这个时长，但是可以采用Redis的一个框架，Redisson来实现。<ul><li>在Redisson中需要手动加锁，并且可以控制锁的失效时间和等待时间，当锁住的一个业务还没有执行完成时，Redisson的看门狗机制会每隔一段时间来检查当前业务是否还持有锁，如果持有锁，就增加锁的持久时间，当业务执行完成之后手动释放锁即可。</li></ul></li></ul>              </div>            </details><ul><li>面试官：Redis集群有哪些方案？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>Redis提供的集群方案有三种：主从复制、哨兵模式、Redis分片集群</li></ul>              </div>            </details><ul><li>面试官：那你来介绍一下主从同步</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，是这样的，单节点的Redis并发能力有限，要进一步提高Redis的并发能力，可以搭建主从集群，实现读写分离。一般都是一主多从，主节点负责写入数据，从节点负责读数据，主节点写入数据之后，需要将数据同步到从节点中。</li></ul>              </div>            </details><ul><li>面试官：那你继续说一下主从同步的流程吧</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>主从同步分为两个阶段，一个是全量同步，一个是增量同步<ul><li>全量同步是指从节点第一次与主节点建立连接的时候<ol><li>从节点请求主节点同步数据，从节点会携带自己的replication id和offset偏移量</li><li>主节点判断是否是第一次请求，判断的依据是，主节点与从节点是否是同一个replication id，然后不是，那主节点就会把自己的replication id和offset发送给从节点，让主节点和从节点的信息保持一致</li><li>与此同时，主节点会执行bgsave，生成RDB文件后，发送给从节点去执行，从节点先把自己的数据清空，然后执行主节点发来的RDB文件，这样就保持了一致。</li><li>如果在从节点执行RDB文件的期间，仍有请求到了主节点，那么主节点会以命令的方式记录到缓冲区，缓冲区是一个日志文件，最后把这个日志文件发送给从节点，这样就保证了主节点和从节点数据完全一致，后期再进行同步数据的时候，都是依赖于这个日志文件。这个就是全量同步</li></ol></li><li>增量同步是指，当从节点服务重启之后，数据不一致了，这个时候，从节点会请求主节点同步数据，主节点还是先判断是不是第一次请求，判断的语句还是replication id，不是第一次请求的话，就获取从节点的offset值，然后主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步。</li></ul></li></ul>              </div>            </details><ul><li>面试官：怎么保证Redis的高并发高可用</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>首先可以搭建主从集群，再加上使用Redis中的哨兵模式，哨兵模式可以实现主从集群的自动故障恢复，里面就包含了对主从服务的监控、自动故障回复、通知；如果主节点故障，哨兵会将一个从节点提升为主节点，当故障实例恢复正常之后，也是以最新的主节点为主。同时哨兵也充当Redis客户端的服务发现来源，当集群发生故障转移的时候，会将最新消息推送给Redis客户端，所以一般项目都会采用哨兵模式来保证Redis的高并发高可用</li></ul>              </div>            </details><ul><li>面试官：Redis是单线程的，为什么还那么快？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ol><li>首先Redis完全是基于内存的，内存的读写速度是非常快的，并且Redis是由C语言编写的</li><li>采用单线程，可以避免不必要的上下文切换的竞争条件</li><li>使用I/O多路复用模型，非阻塞IO<ul><li>I/O多路复用指的是利用单个线程来监听多个socket，并在某个socket就绪的时候，得到通知，从而避免无效的等待，充分利用CPU资源。目前I/O多路复用都是采用的epoll模式实现，它会通知用户进程socket就绪的同时，把已就绪的socket写入用户空间，不需要挨个遍历socket来判断是否就绪。提升了性能。</li></ul></li><li>Redis的网络模型使用I/O多路复用结合事件处理器来应对多个socket请求，例如，提供了连接应答处理器、命令回复处理器、命令请求处理器。<ul><li>Redis因为是基于内存的，内存读写速度非常快，所以性能瓶颈不在内存，而是在网络I/O，具体是在命令的解析这一块，假如很多的客户端都来读数据，那么他们都会携带自己的命令，Redis需要接收网络请求的数据，转化为Redis命令，那么Redis此时可能就忙不过来了。在Redis 6.0之后引入了多线程，用于解析网络请求。但是真正去执行命令的时候，还是使用的单线程。</li></ul></li></ol>              </div>            </details>]]></content>
    
    
    <summary type="html">Redis相关面试题</summary>
    
    
    
    <category term="面试题" scheme="https://cyborg2077.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="Redis" scheme="https://cyborg2077.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL面试题</title>
    <link href="https://cyborg2077.github.io/2023/05/06/InQMySQL/"/>
    <id>https://cyborg2077.github.io/2023/05/06/InQMySQL/</id>
    <published>2023-05-06T13:40:59.000Z</published>
    <updated>2023-10-01T13:43:47.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库的三范式是什么">数据库的三范式是什么</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ol><li>第一范式：列不可再分</li><li>第二范式：行可以唯一区分，主键约束</li><li>第三范式：表的非主属性不能依赖于其他表的非主属性，外键约束</li></ol><ul><li>三级范式是一级一级依赖的，第二范式建立在第一范式上，第三范式建立在第一、第二范式上</li></ul>              </div>            </details><h2 id="MySQL数据库引擎有哪些">MySQL数据库引擎有哪些</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <table><thead><tr><th style="text-align:center">Engine</th><th style="text-align:center">Support</th><th style="text-align:center">Comment</th><th style="text-align:center">Transactions</th><th style="text-align:center">XA</th><th style="text-align:center">Savepoints</th></tr></thead><tbody><tr><td style="text-align:center">InnoDB</td><td style="text-align:center">DEFAULT</td><td style="text-align:center">Supports transactions, row-level locking, and foreign keys</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td></tr><tr><td style="text-align:center">MRG_MYISAM</td><td style="text-align:center">YES</td><td style="text-align:center">Collection of identical MyISAM tables</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr><tr><td style="text-align:center">MEMORY</td><td style="text-align:center">YES</td><td style="text-align:center">Hash based, stored in memory, useful for temporary tables</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr><tr><td style="text-align:center">BLACKHOLE</td><td style="text-align:center">YES</td><td style="text-align:center">/dev/null storage engine (anything you write to it disappears)</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr><tr><td style="text-align:center">MyISAM</td><td style="text-align:center">YES</td><td style="text-align:center">MyISAM storage engine</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr><tr><td style="text-align:center">CSV</td><td style="text-align:center">YES</td><td style="text-align:center">CSV storage engine</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr><tr><td style="text-align:center">ARCHIVE</td><td style="text-align:center">YES</td><td style="text-align:center">Archive storage engine</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr><tr><td style="text-align:center">PERFORMANCE_SCHEMA</td><td style="text-align:center">YES</td><td style="text-align:center">Performance Schema</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr><tr><td style="text-align:center">FEDERATED</td><td style="text-align:center">NO</td><td style="text-align:center">Federated MySQL storage engine</td><td style="text-align:center">NULL</td><td style="text-align:center">NULL</td><td style="text-align:center">NULL</td></tr></tbody></table><ul><li>MySQL常用引擎包括：MyISAM、InnoDB、MEMORY<ol><li>InnoDB：InnoDB是MySQL的默认存储引擎。它支持事务、行级锁和外键约束等特性，适用于需要高并发、高可靠性、高可用性和数据安全性的应用场景。</li><li>MyISAM：MyISAM是MySQL的另一个常见的存储引擎，它不支持事务和行级锁，但是支持全文检索和压缩包等特性，适用于读密集、写少的应用场景。</li><li>MEMORY：MEMORY引擎是一种基于内存的存储引擎，适用于对读写速度要求非常高的应用场景，但是数据不能持久化。</li></ol></li></ul>              </div>            </details><h2 id="说说InnoDB和MyISAM的区别">说说InnoDB和MyISAM的区别</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>InnoDB和MyISAM是MySQL最常用的两种存储引擎，它们有以下几个区别<ol><li>事务和锁：InnoDB支持事务和行级锁，而MyISAM不支持事务，只支持表级锁。因此在高并发的场景下，InnoDB可以提供更好的并发性能和数据一致性，而MyISAM的锁机制可能会导致读写冲突和性能问题。</li><li>索引：InnoDB的索引是B+树索引，而MyISAM的索引是B树索引。B+树索引对于范围查询和排序等操作的性能更好，而B树索引对于等值查询的性能更好。</li><li>全文检索：MyISAM支持全文检索，而InnoDB不支持全文检索。如果需要进行全文检索，可以使用MySQL的全文检索引擎(如Sphinx)，或者使用其他支持全文检索的数据库</li><li>外键约束：InnoDB支持外键约束，而MyISAM不支持外键约束。使用外键约束可以保证数据的完整性和一致性，避免数据异常和错误。</li><li>数据安全性：InnoDB支持崩溃恢复和数据恢复，可以保证数据的安全性和完整性。而MyISAM不支持崩溃恢复和数据恢复，一旦发生崩溃，可能会导致数据丢失或不一致。</li><li>InnoDB不保存表的具体行数，执行<code>SELECT COUNT(*) FROM table</code>时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快。</li></ol></li></ul>              </div>            </details><h2 id="数据库事务">数据库事务</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>数据库事务是指一系列数据库操作被视为一个单独的逻辑单元，要么全部成功执行，要么全部失败回滚。事务的目的是确保数据的完整性和一致性，即使在多个并发访问的情况下也保证数据的正确性。</li><li>在数据库中，事务通常由以下四个属性组成，即ACID:<ol><li>原子性(Atomicity)：事务是一个原子操作，要么全部执行，要么全部回滚，不存在部分执行的情况。</li><li>一致性(Consistency)：事务执行前后，数据库中的数据必须满足约束条件和完整性规则，即数据库中的数据必须处于一致的状态。</li><li>隔离性(Isolation)：多个事务并发执行时，每个事务都应该感觉不到其他事务的存在，每个事务的执行应该独立于其他事务的执行。</li><li>持久性(Durability)：一旦事务执行成功，它对数据库的修改应该是永久性的，即使发生系统故障或重启，数据库也应该能够恢复到事务执行成功的状态。</li></ol></li><li>通过使用事务，可以确保数据库操作的原子性和一致性，避免数据异常和错误。</li></ul>              </div>            </details><h2 id="索引是什么">索引是什么</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>索引是一种特殊的数据结构，用于加快数据库中数据查询的速度。它类似于书中的目录，可以帮助快速查找特定的数据。</li><li>在数据库中，索引通常是在表的一列或多列上创建的。创建索引后，数据库会使用类似于二分查找的算法来查找数据，从而大大提高了数据查询的速度。</li><li>索引可以大大提高数据查询的速度，但也会增加数据修改的时间和磁盘空间的使用。因此，在选择索引时，需要根据实际情况进行权衡。一般来说，应该对经常用于查询的列或用于表之间连接的列创建索引，同时避免创建过多的索引和不必要的索引，以免对数据库性能产生负面影响。</li><li>我们通常所说的索引，包括聚集索引、覆盖索引、组合索引、前缀索引、唯一索引等，没有特别说明，默认都是使用B+树结构组织的索引。</li></ul>              </div>            </details><h2 id="SQL优化手段有哪些">SQL优化手段有哪些</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>SQL优化是指对数据库中的SQL语句进行调整和优化，以提高查询和修改数据的效率，下面是一些常用的SQL优化手段<ol><li>查询语句中不要使用<code>SELECT *</code>：使用<code>SELECT *</code>会查询出所有的列，包括可能不需要的列，这样会增加查询的数据量，影响查询的效率。在实际应用中，应该尽量指定需要查询的列。</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 优化前</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line">## 优化后</span><br><span class="line"><span class="keyword">SELECT</span> id, name, age <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>尽量减少子查询，使用关联查询(LEFT JOIN、RIGHT JOIN、INNER JOIN)替代：子查询是指在一个查询语句中嵌套另一个查询语句。由于子查询需要进行多次查询，因此会降低查询的效率。可以使用关联查询来替代子查询，以减少查询次数。</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 优化前</span><br><span class="line"><span class="keyword">SELECT</span> name, age, (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> salary <span class="keyword">WHERE</span> salary.user_id <span class="operator">=</span> user.id) <span class="keyword">AS</span> max_salary <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line">## 优化后</span><br><span class="line"><span class="keyword">SELECT</span> user.name user.age <span class="built_in">MAX</span>(salary.salary) <span class="keyword">AS</span> max_salary</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> salary <span class="keyword">ON</span> user.id <span class="operator">=</span> salary.user_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user.id, user.name, user.age;</span><br></pre></td></tr></table></figure><ol start="3"><li>减少使用<code>IN</code>或<code>NOT IN</code>，使用<code>EXISTS</code>、<code>NOT EXISTS</code>或关联查询替代：<code>IN</code>和<code>NOT IN</code>查询会对列表中的每个值进行匹配，因此查询效率较低。可以使用<code>EXISTS</code>或<code>NOT EXISTS</code>查询语句或关联查询语句替代</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 优化前</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> user_id <span class="keyword">FROM</span> <span class="keyword">order</span> <span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">## 优化后</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">order</span> <span class="keyword">WHERE</span> order.user_id <span class="operator">-</span> user.id <span class="keyword">AND</span> order.status <span class="operator">=</span> <span class="string">&#x27;completed&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li><code>OR</code>的查询尽量使用<code>UNION</code>和<code>UNION ALL</code>代替（在确认没有重复数据或不用去重数据时，UNION ALL会更好）：<code>OR</code>查询语句会对多个条件进行匹配，而<code>UNION</code>和<code>UNION ALL</code>查询语句会将多个查询语句的结果合并。在确定没有重复数据或不需要剔除重复数据时，使用<code>UNION ALL</code>会比<code>UNION</code>更高效。</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 优化前</span><br><span class="line"></span><br><span class="line">## 优化后</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>尽量避免在<code>WHERE</code>子句中使用<code>!=</code>、<code>&lt;&gt;</code>操作符，否则引擎将放弃使用索引而进行全表扫描，可以使用<code>=</code>操作符或<code>NOT</code>操作符来替代</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 优化前</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> age <span class="operator">&lt;&gt;</span> <span class="number">18</span>;</span><br><span class="line">## 优化后</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">18</span> <span class="keyword">OR</span> age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li>尽量避免在<code>WHERE</code>子句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描，如</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> tb <span class="keyword">WHERE</span> id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">## 改为如下形式，前提是num设置默认值为<span class="number">0</span>，确保num列不会出现<span class="keyword">NULL</span>值</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> tb <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><h2 id="简单说说DROP、DELETE与TRUNCATE的区别">简单说说DROP、DELETE与TRUNCATE的区别</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>DROP、DELETE、TRUNCATE都是MySQL中用于删除数据或对象的语句，他们的区别如下<ol><li>DROP：用于删除整个数据库、表或视图等对象，同时删除对象机器相关的约束、触发器和索引等。DROP语句是无法恢复的，一旦执行成功，对象将永久删除。</li><li>DELETE：用于删除表中的数据行，但不删除表本身或表结构。DELETE语句可以使用WHERE子句指定要删除的数据行，如果没有指定WHERE子句，将删除表中的所有数据。DELETE语句是可逆的，使用ROLLBACK语句可以撤销删除操作。</li><li>TRUNCATE：也是用于删除表中的数据行，与DELETE不同的是，TRUNCATE语句删除表中所有数据（不支持WHERE子句）。TURNCATE比DELETE更快且更有效率，同时也是无法恢复的。</li></ol></li><li>DELETE语句是DML，这个操作会放到ROLLBACK SEGEMENT中，事务提交后才生效，如果有相应的TRIGGER，执行时会被触发</li><li>DROP和TRUNCATE是DDL，操作立即生效，无法回滚，操作不触发TRIGGER</li></ul>              </div>            </details><h2 id="什么是视图">什么是视图</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>视图(View)是一种虚拟的表，是从一个或多个基本表(或视图)导出的表。视图并不存储数据，而是通过查询基本表得到数据的结果集，因此视图中的数据是动态的，会根据基本表的数据变化而自动更新。</li><li>视图可以看做是一种数据过滤器或数据抽象层，可以隐藏底层表的细节，提供更加简单、直观的数据访问接口，方便用户进行查询和分析。通过视图，用户可以只看到他们需要的数据，而不需要了解底层表的具体结构和关系。</li><li>例如下面的视图从员工表中过滤出工资大于5000的员工的信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> high_salary_employee <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> emp_id, emp_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employee</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><ul><li>通过创建这个视图，用户可以直接查询工资大于5000的员工信息，而不用每次都写出SELECT查询语句</li></ul>              </div>            </details><h2 id="什么是内连接、左外连接、右外链接">什么是内连接、左外连接、右外链接</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>内连接(Inner Join)：匹配两张表中相关联的记录</li><li>左外连接(Left Outer Join)：除了匹配两张表中相关联的记录外，还会匹配左表中剩余的记录，右表中未匹配到的字段用NULL表示</li><li>右外链接(Right Outer Join)：除了匹配两张表中相关联的记录歪，还会匹配右表中剩余的记录，左表中未匹配到的字段用NULL表示</li></ul>              </div>            </details><h2 id="并发事务带来哪些问题">并发事务带来哪些问题</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一条数据进行操作）。并发虽然是必须的，但是同样会导致以下几个问题<ol><li>脏读(Dirty read)：当事务A正在访问数据并且对数据进行了修改，而这种修改还没有被提交到数据库中，此时事务B也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么事务B读到的数据就是<code>脏数据</code>，依据<code>脏数据</code>所做的操作可能是不正确的。</li><li>丢失修改(Lost to modify)：是指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务修改了这个数据后，第二个事务也修改了这个事务，那么就会导致第一个事务修改的结果被丢失，因此成为丢失修改。<ul><li>例如事务A读取表中的数据<code>age=10</code>，事务B也读取<code>age=10</code>，事务A修改<code>age=age+1</code>，事务B修改<code>age=age+2</code>，最终结果<code>age=12</code>，事务A的修改被丢失</li></ul></li><li>不可重复读(Unrepeatable read)：是指在一个事务内多次读取同一事务。在这个事务还没有结束时，另一个事务也访问该数据，那么在第一个事务中的两次读数据之间，由于第二个失误的修改导致第一个事务两次读取的数据可能不太一样，这就发生了在一个食物内两次读到的数据是不一样的情况，因此被称为不可重复读。</li><li>幻读(Phantonm read)：幻读与不可重复读类似，它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，因此被称为幻读。</li></ol></li><li>不可重复读和幻读的区别：<ul><li>不可重复读的重点是修改：例如多次读取一条记录，发现其中某些列的值被修改了。</li><li>幻读的重点在于新增或删除：例如多次按照固定的查询语句查询记录，发现读取到的记录数增多了或是减少了</li></ul></li></ul>              </div>            </details><h2 id="事务隔离级别有哪些？MySQL的默认隔离级别是什么">事务隔离级别有哪些？MySQL的默认隔离级别是什么</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>事务隔离级别是指多个事务之间互相隔离的程度，目的是保证事务的一致性和隔离性，MySQL支持四种隔离级别，分别是<ol><li>读未提交(Read Uncommitted)：最低的隔离级别，一个事务可以读取另一个事务未提交的数据，容易出现脏读、不可重复读、幻读的问题。</li><li>读已提交(Read Committed)：一个事务只能读取另一个事务已经提交的数据，可以避免脏读问题，但是可能出现不可重复读和幻读的问题。</li><li>可重复度(Repeatable Read)：一个事务开始后，不允许其他事务修改该事物使用的数据，可以避免脏读和不可重复读的问题，但是可能出现幻读问题。</li><li>串行化(Serializable)：最高的隔离级别，完全的隔离事务，每个事务都必须等待前一个事务提交后才能执行，避免了所有并发问题。</li></ol></li></ul>              </div>            </details><h2 id="大表如何优化">大表如何优化</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>优化大表的性能是数据库优化的重要部分，下面是一些常用的优化方案<ol><li>垂直分隔(Vrtical Partitioning)：将大表按照业务逻辑拆分为多个表，每个表只包含特定的字段，可以减少每个表的行数和列数，提高查询效率。</li><li>水平分隔(Horizontal Partitioning)：将大表按照某个字段(如时间、地域等)进行分区，将不同的数据存储在不同的分区中，可以减少单个表的行数，提高查询效率。</li><li>数据库分库分表(Sharding)：将大表拆分为多个小表，分散在多个数据库或者表空间中，可以提高并发访问能力和数据处理能力，但是需要考虑数据的一致性和跨分区查询等问题。</li><li>索引优化：对于大表，需要特别注意索引的设计和优化，尽量避免全表扫描和索引失效等问题。</li><li>数据库优化参数调整：对于大表，需要根据实际情况适当调整数据库的一些参数，例如缓存大小、并发连接数、线程池大小等。</li><li>定期清理无用数据：对于大表，需要定期清理无用数据，以减少表的行数和提高查询效率。</li></ol></li><li>详细内容可以参考：<a href="https://segmentfault.com/a/1190000006158186">MySQL大表优化方案</a></li></ul>              </div>            </details><h2 id="分库分表后，id主键如何处理">分库分表后，id主键如何处理</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>将大表拆分为多个表后，如果每个表的主键都是从1开始累加的，这样是不对的，我们需要一个全局唯一的ID来标识</li><li>生成全局ID有下面几种方式<ol><li>UUID：不适合作为主键，太长了，并且无序不可读，查询效率低。比较适合用于生成卫衣的名字标识，例如文件名。</li><li>数据库自增id：两台数据库分别设置不同的自增补偿，生成不重复ID的策略来实现高可用。这种方式生成的ID有序，但是需要独立部署数据库实例，成本高，还会有性能瓶颈。</li><li>利用Redis生成ID：性能比较好，灵活方便，不依赖于数据库，但是引入了新组件造成系统更加复杂，可用性降低，编码更加复杂，增加了系统成本</li><li>Twitter的snowflake算法（雪花算法）</li></ol></li></ul>              </div>            </details><h2 id="说说在MySQL中，一条查询SQL是如何执行的">说说在MySQL中，一条查询SQL是如何执行的</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>大致分为以下几个步骤<ol><li>获取连接：使用MySQL连接器连接到数据库。</li><li>查询缓存：key为SQL语句，value为查询结果，如果查到就直接返回。但是不建议使用此缓存，在MySQL 8.0版本中已经将查询缓存删除掉了</li><li>分析器：将SQL语句进行分词和语法分析，判断语法是否正确，如果语法不正确，会在这个阶段发现并报错。</li><li>优化器：对SQL语句进行优化，选择最优的执行计划。执行计划是指在表中查询数据的方法，包括使用哪些索引、连接表的顺序等。优化器会根据表中的索引、表大小、统计信息等因素，选择最优的执行计划。</li><li>执行器：根据优化器选择的执行计划执行SQL语句。执行器负责打开表，根据表的引擎定义，使用引擎提供的接口获取数据，进行筛选和计算，最终返回查询结果。</li></ol></li></ul>              </div>            </details><h2 id="索引有什么缺点">索引有什么缺点</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>虽然索引可以加速查询，但是也存在以下缺点<ol><li>索引会增加数据的存储空间：索引需要占用一定的存储空间，尤其是对于大表来说，索引可能会占用相当大的空间。</li><li>索引会降低数据的修改速度：当数据表中的数据发生修改时，索引也需要进行相应的更新操作。因此，对于经常需要修改的表，索引可能会降低数据的修改速度。</li><li>索引不适用于所有类型的查询：虽然索引可以加速许多类型的查询，但不是所有的查询都可以使用索引进行优化。例如对于使用<code>LIKE</code>或<code>%</code>操作符的模糊查询，索引可能会失效。</li><li>索引可能会降低数据库的整体性能：虽然索引可以加速查询，但是过多的索引可能会降低数据库的整体性能。因为索引也会占用一定的系统资源，例如CPU、内存等，如果索引太多，会导致系统资源不足，从而影响数据库的整体性能。</li></ol></li></ul>              </div>            </details><h2 id="MySQL中varchar和char的区别？varchar-30-中的30代表的含义">MySQL中varchar和char的区别？varchar(30)中的30代表的含义</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>varchar和char是两种不同的数据类型，它们的主要区别在于存储方式和存储空间的使用。具体来说，char是一种固定长度的字符类型，而varchar是一种可变长度的字符类型。</li><li>在char类型中，如果指定了一个长度为N的char字段，那么该字段总是占用N个字符的存储空间，即使实际存储的字符数小于N，也不会释放多余的存储空间。</li><li>在varchar类型中，如果指定了一个长度为N的varchar字段，那么改组段可以存储最多N个字符的数据，但实际存储的字符数可能会小于N，此时该字段将只占用实际存储的字符数的存储空间，而不是固定长度的存储空间</li><li>在varchar(30)中，30表示该字段可以存储的最大字符数为30，但实际存储的字符数可能小于30。如果实际使用中存储的自付超过了30，那么MySQL将自动抛出错误或者截断数据。</li></ul>              </div>            </details><h2 id="int-11-中11代表的意义">int(11)中11代表的意义</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>在MySQL中，int(11)中的11表示字段的显示宽度，而不是字段的最大值或者存储空间。</li></ul>              </div>            </details><h2 id="为什么SELECT-COUNT-FROM-table在InnoDB比MyISAM慢">为什么<code>SELECT COUNT(*) FROM table</code>在InnoDB比MyISAM慢</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>在MySQL中，执行<code>SELECT COUNT(*) FROM table</code>语句时，会对表中的每一行进行一次计数操作，因此需要遍历整个表。</li><li>对于MyISAM表来说，表中保存了行数的计数器，因此在执行<code>SELECT COUNT(*) FROM table</code>时，只需要读取计数器的值，而不需要遍历整个表，因此执行速度非常快。</li><li>但是在InnoDB中，由于数据存储的特殊性质和实现方式，没有类似于MyISAM的计数器来保存表中的行数，因此MySQL需要遍历整个表来进行计数操作。</li></ul>              </div>            </details> <h2 id="MySQL索引类型有哪些">MySQL索引类型有哪些</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>MySQL支持多种类型的索引，包括以下几种<ol><li>B树索引：这是MySQL中最基本的索引类型，采用B树结构存储数据，适用于查找单个值的场景。</li><li>B+树索引：B+树是B树的一种变体，在B树的基础上增加了叶子结点的指针。形成一个链表，适用于范围查找和排序的场景。</li><li>哈希索引：这种索引采用哈希算法来快速定位数据，适用于等值查询场景，但不支持范围查询和排序。</li><li>全文索引：这种索引用于全文搜索，适用于对文本进行模糊匹配和搜索的场景。</li></ol></li></ul>              </div>            </details><h2 id="什么时候不要使用索引">什么时候不要使用索引</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>索引虽然可以加快查询速度，但是在某些情况下也会带来额外的性能消耗，甚至会降低查询效率。以下是不适合使用索引的情况<ol><li>数据量非常小：对于非常小的数据集，索引可能不会带来显著的性能提升，反而会增加额外的开销。</li><li>经常进行插入、删除或修改操作：对表进行更新操作时，索引也需要更新和维护，会导致额外的性能开销。如果对表的更新操作比较频繁，那么使用索引可能会影响性能。</li><li>有大量重复的列：如果某个列存在大量重复的值，就算这个列没有唯一性约束，也不建议对其建立索引。因为索引的目的是帮助数据库加速数据的查找和匹配，而如果一个列存在大量重复的值，建立索引反而会降低查询的效率。</li></ol></li></ul>              </div>            </details><h2 id="说说什么是MVCC">说说什么是MVCC</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>MVCC(Multi-Version Concurrency Control, 多版本并发控制)是一种用于保证数据库并发性的技术。</li><li>在传统的数据库并发控制机制中，锁定是控制并发访问的主要手段。当多个事务同时访问同一行数据时，系统会对该行数据进行锁定，直到其中一个事务完成操作并释放锁之后，其他事务才能访问该行数据。这种方式虽然可以确保数据的一致性和安全性，但是会引入许多问题，如死锁、性能瓶颈等。</li><li>MVCC采用了一种不同的方式来控制并发访问。在MVCC中，每个事务都可以看到一个<code>版本</code>（或者说是快照）的数据，不同的事务之间使用不同的版本来避免冲突。当一个事务更新某个数据时，系统会创建一个新的版本，并在事务提交时将其写入磁盘。其他事务继续使用旧版本的数据，直到它们提交或回滚事务，然后再使用新版本的数据。这样可以避免锁定和死锁等问题，并提高并发访问的效率。</li></ul>              </div>            </details><h2 id="MVCC可以为数据库解决什么问题">MVCC可以为数据库解决什么问题</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>MVCC可以解决数据库中并发性和一致性的问题。数据库中的并发性问题包括了读写冲突、死锁等，而MVCC通过采用乐观锁的方式，允许多个事务同时读取一个数据，同时又能够保证数据的一致性。</li><li>具体来说，MVCC实现了以下特性<ol><li>可重复度：通过使用每个事物的独立版本快照来避免数据被其他并发事务修改而导致的读取不一致的问题。</li><li>非阻塞读：读操作不会阻塞写操作，写操作也不会阻塞读操作。</li><li>无锁写：MVCC使用CAS(Compare-And-Swap)操作来实现乐观锁，避免了传统锁机制的瓶颈和缺陷。</li><li>避免死锁：MVCC不使用传统锁机制，避免了传统锁机制中可能发生的死锁的问题。</li><li>高并发：MVCC通过提供并发事务的独立快照来保证读取的一致性，从而提高了数据库的并发性能。</li></ol></li><li>总之，MVCC能够使数据库在高并发的情况下保持一致性和可靠性，使得多个事务可以同时访问同一个数据库，从而提高了数据库的并发性能。</li></ul>              </div>            </details><h2 id="说说MVCC的实现原理">说说MVCC的实现原理</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>MVCC的实现原理主要包括版本号、快照、回滚段、多版本索引等技术。<ol><li>版本号：每个数据行都有一个版本号，用来标识该行数据的版本。在MySQL中，InnoDB存储引擎使用一个6字节的事务ID和一个7字节的递增计数器来表示版本号。</li><li>快照：每个事务在开始执行时，会建立一个快照(Snapshot)，用来记录当前时间点的数据库状态。这个快照可以看做是一个事务的<code>视图</code>，反映了它所能看到的数据状态。在查询时，系统会根据事务的快照，返回相应版本的数据。</li><li>回滚段：在MVCC中，每个事务都会创建一个回滚段(Rollback Segment)，用来保存该事物所做的修改。如果事务需要回滚，系统就可以利用回滚段中的信息来回复数据的原始状态。</li><li>多版本索引：为了支持MVCC，数据库通常会使用多版本索引(Multi-Version Index)来记录数据的版本信息。多版本索引包含多个版本的数据，每个版本都有自己的版本号和快照信息。当事务执行查询时，系统会根据事务的快照，返回相应版本的数据。</li></ol></li><li>MVCC的实现原理可以概括为：每个事务都有自己的快照，用来记录当前时间点的数据状态。在查询时，系统会根据事务的快照，返回相应版本的数据。当事务需要回滚时，系统会创建一个新的版本，并将旧版本标记为<code>已删除</code>。如果事务需要回滚，系统就可以利用回滚段中的信息，恢复数据的原始状态。多版本索引用于记录数据的版本信息，以便系统能够快速地找到相应版本的数据。这些技术相互配合，实现了MVCC的高效并发控制。</li></ul>              </div>            </details><h2 id="说说MySQL数据库的锁">说说MySQL数据库的锁</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>MySQL数据库中的锁分为共享锁(Shared Lock)和排它锁(Exclusive Lock)两种。<ol><li>共享锁：也被称为读锁，允许多个事务同时读取同一份数据，但不允许任何事物对数据进行修改，找到所有共享锁都被释放。</li><li>排他锁：也被称为写锁，只允许一个事务对数据进行修改，其他事务无法读取或修改数据，直到排他锁被释放。</li></ol></li><li>MySQL还支持表级锁行级锁两种粒度的锁<ol><li>表级锁：是对整张表的锁，可以锁定整个表，避免其他事务对该表进行任何操作。表级锁的优点是简单，系统开销小，适用于对表进行全局性操作；缺点是粒度太大，会导致并发性能下降。MyISAM使用表级锁。</li><li>行级锁：是针对单个数据行的锁，只锁定需要修改的数据行，避免其他事务对该数据进行操作。行级锁的优点是粒度小，发生冲突概率低，可以提高并发性能；缺点是实现复杂，需要维护锁定的数据行和事务的状态，容易出现死锁。InnoDB支持行锁（必须有索引才能实现，否则会自动锁全表，变成表级锁）</li></ol></li></ul>              </div>            </details><h2 id="什么是锁升级">什么是锁升级</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>锁升级是指将行级锁升级为表级锁的过程。MySQL中默认使用的是行级锁，在一些特殊情况下，需要使用表级锁，但是如果表上已经存在行级锁，就需要将行级锁升级为表级锁，从而保证数据的一致性和完整性。</li><li>锁升级一般会在以下情况发生：<ol><li>当前会话需要更新的行数太多，导致获取行级锁的时间过长，从而影响系统的并发性能，此时可以将行级锁升级为表级锁。</li><li>当前会话需要执行的操作已经涉及到整张表的数据，比如对表进行TRUNCATE、DROP等操作，此时需要将行级锁升级为表级锁。</li></ol></li><li>锁升级的过程是自动的，由MySQL内部的锁管理器来控制，具体实现细节可以参考MySQL的官方文档。需要注意的是，锁升级会对系统的性能产生一定的影响，因此在实际的应用中需要谨慎使用，尽量避免锁升级的情况。</li></ul>              </div>            </details><h2 id="说说悲观锁和乐观锁">说说悲观锁和乐观锁</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>悲观锁和乐观锁是两种常见的并发控制方式。<ol><li>悲观锁的思想是：假设并发访问的情况下，数据很可能会被其他用户修改，因此在访问数据前就会加锁，防止其他用户对数据进行修改。悲观锁的实现方式一般是通过数据库的锁机制来实现的，例如行级锁、表级锁等。</li><li>乐观锁的思想是：假设并发访问的情况下，数据很少会发生冲突，因此在访问数据前不会加锁，而是通过在数据上增加版本号等机制来判断数据是否被修改。乐观锁的实现方式一般是通过在数据表中增加一个版本号或时间戳等字段，每次修改数据时都会更新这个版本号，如果读取数据是发现版本号与预期的不一致，则说明数据已经被其他用户修改，需要重新读取数据。</li></ol></li></ul>              </div>            </details><h2 id="怎样尽量避免死锁的出现">怎样尽量避免死锁的出现</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>死锁是指多个事务在互相等待对方释放资源而无法继续执行的情况，这种情况下需要DBMS的干预才能解除死锁。下面是一些尽量避免死锁的方法：<ol><li>尽量减少事务持有资源的时间，比如避免在事务中进行大量计算和逻辑处理。</li><li>尽量在事务开始时就确定需要访问的数据，避免在事务中根据条件动态检索数据。</li><li>避免长时间占用多个资源，比如对多个表进行更新操作。</li><li>尽量使用较短的事务，这样锁的等待时间会减少。</li><li>优化SQL语句，尽量避免全表扫描或索引失效等情况。</li></ol></li><li>如果死锁无法避免，那么可以使用以下方式作为保底手段解除死锁：<ol><li>设置等待超时机制：当一个事务在一定时间内无法获得锁，就主动放弃等待并结束事务，然后再重试。</li><li>死锁检测：DBMS定时检测系统中的死锁情况，并将其解除。这种方法会消耗一定的系统资源，所以不适合在高并发的环境中使用。</li></ol></li></ul>              </div>            </details><h2 id="使用MySQL的索引时需要注意什么">使用MySQL的索引时需要注意什么</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>使用MySQL的索引时需要注意以下几点<ol><li>应尽量避免在<code>WHERE</code>子句中使用<code>!=</code>或<code>&lt;&gt;</code>操作符，否则将引擎放弃用索引而进行全表扫描。优化器将无法通过索引来确定将要命中的行数，因此需要查询该表的所有行。</li><li>应尽量避免在<code>WHERE</code>子句中用<code>OR</code>来连接条件，否则将导致引擎放弃使用索引而进行全表扫猫，如: <code>SELECT id FROM t WHERE num = 10 OR num = 20</code></li><li>应尽量避免在<code>WHERE</code>子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描.</li><li>应尽量避免在<code>WHERE</code>子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描.</li><li>不要在<code>WHERE</code>子句中的<code>=</code>左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</li><li>复合索引遵循最左前缀原则。</li><li>如果<code>MySQL</code>评估使用索引比全表扫描更慢，会放弃使用索引。如果此时想要索引，可以在语句中添加强制索引。</li><li>列类型是字符串类型，查询时一定要给值加引号，否则索引失效.</li><li>LIKE 的模糊查询可能会导致无法使用索引。原因是 LIKE 语句中的通配符（% 或 _）使得索引失效。如果需要模糊匹配，可以使用全文索引引擎（例如ElasticSearch）</li><li>表字段为NULL，也不可以使用索引的</li></ol></li></ul>              </div>            </details><h2 id="主键和候选键有什么区别">主键和候选键有什么区别</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>主键和候选键都是用来唯一标识一张表中每个行的键，但是它们之间有一些区别<ol><li>主键必须是非空、唯一的。</li><li>候选键也是唯一标识一张表中每个行的键，但不是必须非空的，在一个表中可以有多个候选键，也可以没有候选键。</li><li>主键是一种特殊的候选键，它是表的主要标识，用于保证表中的每个行的唯一性。如果没有指定主键，则可以选择一个合适的候选键作为主键。候选键可以是多个，但只有一个可以成为主键。</li></ol></li></ul>              </div>            </details><h2 id="主键和索引有什么区别">主键和索引有什么区别</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>主键和索引都可以用来唯一标识一张表中的记录，但它们有一些区别<ol><li>主键是一种唯一性约束，保证表中每一行数据的唯一性。而索引知识一种辅助数据结构，用于提高查询效率。</li><li>主键一定会创建一个唯一索引，但是有唯一索引的列不一定是主键。</li><li>主键不允许为空值，唯一索引列允许为空值。</li><li>一个表只能有一个主键，但是可以有多个唯一索引。</li><li>主键可以被其他表引用为外键，唯一索引列不可以。</li></ol></li></ul>              </div>            </details><h2 id="MySQL如何做到高可用方案">MySQL如何做到高可用方案</h2><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>MySQL的高可用方案可以通过以下几种方式实现：<ol><li>主从复制：将一个MySQL实例作为主节点，其余MySQL实例作为从节点，主节点上的操作会被自动同步到从节点上，从而达到高可用的目的。当主节点出现故障时，可以将其中一个从节点提升为新的主节点，从而保证系统的可用性。</li><li>数据库集群：将多个MySQL实例组成一个集群，每个示例都可以处理请求，当其中一个实例出现故障时，其他实例会自动接管请求，从而保证系统的可用性。</li><li>数据库代理：通过引入数据库代理层，将多个MySQL实例进行统一管理，提供负载均衡、故障转移、自动切换等功能，从而达到高可用的目的。</li><li>数据库备份和恢复：通过定期备份数据库，将备份数据存储到其他位置，当出现故障时，可以通过备份数据进行快速恢复，从而达到高可用的目的。</li></ol></li></ul>              </div>            </details><h2 id="面试模拟">面试模拟</h2><ul><li>面试官：了解过索引吗？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>索引在项目中还是比较常见的，它是帮助MySQL高效获取数据的数据结构，主要是用来提高数据检索的效率，降低数据库的IO成本，同时通过索引列对数据进行排序，降低数据排序的成本，也能降低CPU的消耗</li></ul>              </div>            </details><ul><li>面试官：索引底层的数据结构了解过吗？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>MySQL现在默认的存储引擎是InnoDB，它采用的是B+树的数据结构来存储索引，选择B+树的主要原因是<ol><li>阶数（树杈）更多，路径更短</li><li>磁盘读写代价更低，飞叶子节点只存储指针，叶子结点存储数据</li><li>B+树便于扫库和去检查询，因为叶子结点是一个双向链表<br><img src="https://s1.ax1x.com/2023/07/23/pCqI5qK.png" alt=""></li></ol></li><li>使用二叉树或者红黑树效率都不高，二叉树在不平衡的情况下，会退化为链表。红黑树虽然能保证平衡性来降低树的高度，但是红黑树只是二叉树，阶数低，如果遇到庞大的数据量，二叉树也会很高，效率也是不如B+树<br><img src="https://s1.ax1x.com/2023/07/23/pCq5S6P.png" alt=""></li><li>B树的非叶子结点和叶子结点都会存放数据，范围查询效率低，并且不太稳定<br><img src="https://s1.ax1x.com/2023/07/23/pCqo9Ig.png" alt=""></li></ul>              </div>            </details><ul><li>面试官：什么是聚簇索引？什么是非聚簇索引？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>聚簇索引有且只有一个，主要是指数据与索引放到一块，B+树的叶子结点保存了整行数据，一般情况下都是主键作为聚簇索引的</li><li>非聚簇索引指的是数据与索引分开存储，B+树的叶子结点保存对应的主键，可以有多个，一般我们自定义的索引都是非聚簇索引<br><img src="https://s1.ax1x.com/2023/07/23/pCqoHmV.png" alt=""></li></ul>              </div>            </details><ul><li>面试官：知道什么是回表查询吗？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>这个和刚刚介绍的聚簇索引和非聚簇索引有很大关系的，回表的意思是，通过非聚簇索引找到数据对应的主键值，然后通过主键值去聚簇索引中查找出整行的数据，这个过程就是回表。<br><img src="https://s1.ax1x.com/2023/07/23/pCq76IS.png" alt=""></li></ul>              </div>            </details><ul><li>面试官：知道什么叫覆盖索引吗？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>覆盖索引值的是select查询语句使用了索引，返回的列必须能在索引中全部找到，如果我们使用id查询，它会直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。</li><li>如果按照非聚集索引查询数据的时候，返回的列中没有创建索引，有可能会触发回表查询，所以尽量避免使用<code>SELECT *</code>，尽量在返回的列中都包含添加索引的字段</li></ul>              </div>            </details><ul><li>面试官：MySQL超大分页怎么处理？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>超大分页一般都是在数据量比较大的时候，我们使用limit分页查询，并且需要对数据进行排序，这个时候效率就很低，我们可以采用覆盖索引和子查询来解决。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行该命令，会先排序前900010条数据，仅返回后10条记录，查询的代价非常大</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_stu limit <span class="number">9000000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>先分页查询数据的id字段，确定了id之后，再使用子查询来过滤，只查询这个id列表中的数据就可以了，因为查询id的时候，走的是覆盖索引，这样效率就会提升很多</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> tb_stu t, (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> tb_stu <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">9000000.</span> <span class="number">10</span>) a</span><br><span class="line"><span class="keyword">WHERE</span> t.id <span class="operator">=</span> a.id</span><br></pre></td></tr></table></figure>              </div>            </details><ul><li>面试官：索引创建原则有哪些？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，这个情况有很多，不过都有一个大前提，首先表中的数据要超过10万条以上，我们才会去创建索引，并且添加索引的字段是查询比较频繁的字段，一般也是作为查询条件、排序字段或者分组字段这些。其次就是，我们通常创建索引的时候都是使用复合索引来创建，一条SQL的返回值，尽量使用覆盖索引。</li></ul>              </div>            </details><ul><li>面试官：什么情况下索引会失效？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，这个情况比较多<ul><li>比如索引在使用的时候没有遵循最左匹配原则，举例说明：假设有一个复合索引idx_name_age，包含两列：name和age。下面是一些查询条件和它们是否符合最左匹配原则的判断：<ol><li>查询条件：WHERE name = ‘John’。<ul><li>符合最左匹配原则，因为从复合索引的最左侧列name开始进行匹配。</li></ul></li><li>查询条件：WHERE age &gt; 30。<ul><li>不符合最左匹配原则，因为复合索引的第一列是name，而age不是从最左侧开始进行匹配的。</li></ul></li><li>查询条件：WHERE name = ‘John’ AND age &gt; 30。<ul><li>符合最左匹配原则，因为从复合索引的最左侧列name开始进行匹配，然后紧接着匹配age。</li></ul></li><li>查询条件：WHERE age &gt; 30 AND name = ‘John’。<ul><li>不符合最左匹配原则，虽然涵盖了复合索引的所有列，但是列的顺序并没有从最左侧开始连续匹配。</li></ul></li></ol></li><li>模糊查询的时候，如果%在前面也会导致索引失效。<ul><li>例如 <code>LIKE '%John'</code> 会失效，而 <code>LIKE 'John%'</code>则不会</li></ul></li><li>在添加索引的字段上进行了运算操作或者类型转换也会导致索引失效</li></ul>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 进行了运算操作</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="built_in">substring</span>(name,<span class="number">3</span>,<span class="number">2</span>) <span class="operator">=</span><span class="string">&#x27;科技&#x27;</span></span><br><span class="line"><span class="comment">-- 字符串不加单引号，也会造成索引失效，因为此时要进行类型转换</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><ul><li>面试官：有SQL的优化经验吗？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，这个还是比较常见的，可以从这几方面来考虑<ol><li>建表的时候选择合适的类型</li><li>使用索引</li><li>SQL语句的编写</li><li>主从复制</li><li>读写分离</li></ol></li></ul>              </div>            </details><ul><li>面试官：那你在建表的时候，是如何进行优化的呢？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>这个主要参考阿里开发手册，就比如再定义字段的时候，需要结合字段的内容来选择合适的类型，如果是字符串，需要结合存储的内容来选择是使用char还是varchar或者text类型。用户名邮箱之类的，可以用varchar，文章内容这种可以用text，邮编之类的定长字符串可以用char</li></ul>              </div>            </details><ul><li>面试官：那你在使用索引的时候，是如何优化的呢？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>首先表中的数据要超过10万条以上，我们才会去创建索引，并且添加索引的字段是查询比较频繁的字段，一般也是作为查询条件、排序字段或者分组字段这些。其次就是，我们通常创建索引的时候都是使用复合索引来创建，一条SQL的返回值，尽量使用覆盖索引。</li></ul>              </div>            </details><ul><li>面试官：你平时对SQL语句做了哪些优化呢？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>嗯，这个也有很多，比如SELECT语句务必指明字段名称，不要直接使用SELECT *，还有就是需要注意避免索引失效的写法，如果是聚合查询，尽量使用UNION ALL来替代UNION，因为UNION会多一次过滤，效率相对较低。如果是表关联的话，尽量使用INNER JOIN，必要时用LEFT JOIN或RIGHT JOIN，如果非要用的话，一定要以小表作为驱动。</li></ul>              </div>            </details><ul><li>面试官：事务的特性是什么？可以详细说一下吗？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>事务的特性指的是ACID属性，分别是原子性、一致性、隔离性、持久性。我举个例子吧，就比如转账这种场景<ol><li>A向B转账500，转账成功，A扣除500元，B增加500元。原子性体现在要么都成功，要么都失败。</li><li>在转账过程中，A扣除了500元，那么B必须增加500元，需要保证数据的一致性。</li><li>隔离性体现在，A向B转账，不能受到其他事务的干扰</li><li>持久性体现在，转账成功后，需要将数据持久化。</li></ol></li></ul>              </div>            </details><ul><li>面试官：并发事务带来哪些问题？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>第一是脏读，当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，此时另一个事务也来访问了这个数据，由于这个数据还没有提交，那么另一个事务读取到的数据就是脏数据，根据脏数据所做的操作可能是不正确的。</li><li>第二个是不可重复读，比如在一个事务内多次读同一数据，在这个事务还没有结束时，另一个事务也来访问该数据，那么在第一个事务中的两次读取数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样，因此称为不可重复读。</li><li>第三个是幻读：幻读跟不可重复读类似，它是发生在一个事务读取了几行数据，接着另一个事务插入了一些数据，在随后的查询中，第一个事务就会发现多了一些原本不存在的记录。</li></ul>              </div>            </details><ul><li>面试官：那么怎么解决这些问题呢？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>解决方案是对事务进行隔离，MySQL支持四种隔离级别<ol><li>读未提交：它解决不了刚刚的所有问题，一般项目里也不用这个</li><li>读已提交：它能解决脏读问题，但是解决不了不可重复读和幻读</li><li>可重复读：他能解决脏读和不可重复读，但是解决不了幻读，同时它也是MySQL的默认隔离级别</li><li>串行化：它可以解决刚刚提出的所有问题，但是由于是让事务串行执行的，性能比较低。所以项目中一般用的都是MySQL的默认隔离级别：可重复读。</li></ol></li></ul>              </div>            </details><ul><li>面试官：undo log和redo log的区别</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>redo log日志记录的是数据页的物理变化，服务宕机可用来同步数据，而undo log 不同，它主要记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据，比如我们删除一条数据的时候，就会在undo log日志文件中新增一条delete语句，如果发生回滚就执行逆操作；</li><li>redo log保证了事务的持久性，undo log保证了事务的原子性和一致性</li></ul>              </div>            </details><ul><li>面试官：事务中的隔离性是如何保证的？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>隔离性是由锁和MVCC实现的。</li><li>MVCC是多版本并发控制，指维护一个数据的多个版本，使得读写操作没有冲突，它的底层实现主要是分为了三个部分，第一个是隐藏字段，第二个是undo log日志，第三个是readView视图</li><li>隐藏字段是指在MySQL中给每个表都设置了隐藏字段，有一个是trx_id（事务id），记录每一次操作的事务id，是递增的，另一个是roll_pointer（回滚指针），指向上一个版本的事务地址</li><li>undo log主要的作用是记录回滚日志，存储老版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll_pointer指针形成一个链表</li><li>readView解决的是一个事务查询选择版本的问题，在内部定义了一些匹配规则和当前的一些事务id判断该访问哪个版本的数据，不同的隔离级别快照读是不一样的，最终的访问结果也不一样。如果是读已提交隔离级别，每一次执行快照读时生成ReadView，如果是可重复度隔离级别仅在事务中第一次执行快照读时生成ReadView，后续复用</li></ul>              </div>            </details><ul><li>面试官：MySQL主从同步原理知道吗？</li><li>候选人：</li></ul><details class="folding-tag" cyan><summary>  </summary>              <div class='content'>              <ul><li>MySQL主从复制的核心就是二进制日志(DDL（数据定义语言）语句和 DML（数据操纵语言）语句)，它的步骤是这样的：<ol><li>主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</li><li>从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。</li><li>从库重做中继日志中的事件，将改变反映它自己的数据</li></ol></li></ul>              </div>            </details>]]></content>
    
    
    <summary type="html">MySQL相关面试题</summary>
    
    
    
    <category term="面试题" scheme="https://cyborg2077.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="MySQL" scheme="https://cyborg2077.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
